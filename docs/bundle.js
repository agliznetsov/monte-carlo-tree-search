!function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(r,i,function(n){return t[n]}.bind(null,i));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=5)}([function(t,n,e){(function(t,r){var i;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var o,u=200,a="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",c="Expected a function",f="__lodash_hash_undefined__",s=500,l="__lodash_placeholder__",h=1,d=2,p=4,v=1,g=2,y=1,m=2,b=4,_=8,x=16,w=32,M=64,T=128,C=256,S=512,A=30,k="...",E=800,N=16,D=1,O=2,R=1/0,j=9007199254740991,P=1.7976931348623157e308,$=NaN,I=4294967295,L=I-1,z=I>>>1,q=[["ary",T],["bind",y],["bindKey",m],["curry",_],["curryRight",x],["flip",S],["partial",w],["partialRight",M],["rearg",C]],B="[object Arguments]",U="[object Array]",F="[object AsyncFunction]",H="[object Boolean]",W="[object Date]",Y="[object DOMException]",V="[object Error]",X="[object Function]",G="[object GeneratorFunction]",Z="[object Map]",Q="[object Number]",J="[object Null]",K="[object Object]",tt="[object Proxy]",nt="[object RegExp]",et="[object Set]",rt="[object String]",it="[object Symbol]",ot="[object Undefined]",ut="[object WeakMap]",at="[object WeakSet]",ct="[object ArrayBuffer]",ft="[object DataView]",st="[object Float32Array]",lt="[object Float64Array]",ht="[object Int8Array]",dt="[object Int16Array]",pt="[object Int32Array]",vt="[object Uint8Array]",gt="[object Uint8ClampedArray]",yt="[object Uint16Array]",mt="[object Uint32Array]",bt=/\b__p \+= '';/g,_t=/\b(__p \+=) '' \+/g,xt=/(__e\(.*?\)|\b__t\)) \+\n'';/g,wt=/&(?:amp|lt|gt|quot|#39);/g,Mt=/[&<>"']/g,Tt=RegExp(wt.source),Ct=RegExp(Mt.source),St=/<%-([\s\S]+?)%>/g,At=/<%([\s\S]+?)%>/g,kt=/<%=([\s\S]+?)%>/g,Et=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Nt=/^\w*$/,Dt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,Ot=/[\\^$.*+?()[\]{}|]/g,Rt=RegExp(Ot.source),jt=/^\s+|\s+$/g,Pt=/^\s+/,$t=/\s+$/,It=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,Lt=/\{\n\/\* \[wrapped with (.+)\] \*/,zt=/,? & /,qt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Bt=/\\(\\)?/g,Ut=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,Ft=/\w*$/,Ht=/^[-+]0x[0-9a-f]+$/i,Wt=/^0b[01]+$/i,Yt=/^\[object .+?Constructor\]$/,Vt=/^0o[0-7]+$/i,Xt=/^(?:0|[1-9]\d*)$/,Gt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Zt=/($^)/,Qt=/['\n\r\u2028\u2029\\]/g,Jt="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Kt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",tn="[\\ud800-\\udfff]",nn="["+Kt+"]",en="["+Jt+"]",rn="\\d+",on="[\\u2700-\\u27bf]",un="[a-z\\xdf-\\xf6\\xf8-\\xff]",an="[^\\ud800-\\udfff"+Kt+rn+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",cn="\\ud83c[\\udffb-\\udfff]",fn="[^\\ud800-\\udfff]",sn="(?:\\ud83c[\\udde6-\\uddff]){2}",ln="[\\ud800-\\udbff][\\udc00-\\udfff]",hn="[A-Z\\xc0-\\xd6\\xd8-\\xde]",dn="(?:"+un+"|"+an+")",pn="(?:"+hn+"|"+an+")",vn="(?:"+en+"|"+cn+")"+"?",gn="[\\ufe0e\\ufe0f]?"+vn+("(?:\\u200d(?:"+[fn,sn,ln].join("|")+")[\\ufe0e\\ufe0f]?"+vn+")*"),yn="(?:"+[on,sn,ln].join("|")+")"+gn,mn="(?:"+[fn+en+"?",en,sn,ln,tn].join("|")+")",bn=RegExp("['’]","g"),_n=RegExp(en,"g"),xn=RegExp(cn+"(?="+cn+")|"+mn+gn,"g"),wn=RegExp([hn+"?"+un+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[nn,hn,"$"].join("|")+")",pn+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[nn,hn+dn,"$"].join("|")+")",hn+"?"+dn+"+(?:['’](?:d|ll|m|re|s|t|ve))?",hn+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",rn,yn].join("|"),"g"),Mn=RegExp("[\\u200d\\ud800-\\udfff"+Jt+"\\ufe0e\\ufe0f]"),Tn=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Cn=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Sn=-1,An={};An[st]=An[lt]=An[ht]=An[dt]=An[pt]=An[vt]=An[gt]=An[yt]=An[mt]=!0,An[B]=An[U]=An[ct]=An[H]=An[ft]=An[W]=An[V]=An[X]=An[Z]=An[Q]=An[K]=An[nt]=An[et]=An[rt]=An[ut]=!1;var kn={};kn[B]=kn[U]=kn[ct]=kn[ft]=kn[H]=kn[W]=kn[st]=kn[lt]=kn[ht]=kn[dt]=kn[pt]=kn[Z]=kn[Q]=kn[K]=kn[nt]=kn[et]=kn[rt]=kn[it]=kn[vt]=kn[gt]=kn[yt]=kn[mt]=!0,kn[V]=kn[X]=kn[ut]=!1;var En={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Nn=parseFloat,Dn=parseInt,On="object"==typeof t&&t&&t.Object===Object&&t,Rn="object"==typeof self&&self&&self.Object===Object&&self,jn=On||Rn||Function("return this")(),Pn=n&&!n.nodeType&&n,$n=Pn&&"object"==typeof r&&r&&!r.nodeType&&r,In=$n&&$n.exports===Pn,Ln=In&&On.process,zn=function(){try{var t=$n&&$n.require&&$n.require("util").types;return t||Ln&&Ln.binding&&Ln.binding("util")}catch(t){}}(),qn=zn&&zn.isArrayBuffer,Bn=zn&&zn.isDate,Un=zn&&zn.isMap,Fn=zn&&zn.isRegExp,Hn=zn&&zn.isSet,Wn=zn&&zn.isTypedArray;function Yn(t,n,e){switch(e.length){case 0:return t.call(n);case 1:return t.call(n,e[0]);case 2:return t.call(n,e[0],e[1]);case 3:return t.call(n,e[0],e[1],e[2])}return t.apply(n,e)}function Vn(t,n,e,r){for(var i=-1,o=null==t?0:t.length;++i<o;){var u=t[i];n(r,u,e(u),t)}return r}function Xn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r&&!1!==n(t[e],e,t););return t}function Gn(t,n){for(var e=null==t?0:t.length;e--&&!1!==n(t[e],e,t););return t}function Zn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r;)if(!n(t[e],e,t))return!1;return!0}function Qn(t,n){for(var e=-1,r=null==t?0:t.length,i=0,o=[];++e<r;){var u=t[e];n(u,e,t)&&(o[i++]=u)}return o}function Jn(t,n){return!!(null==t?0:t.length)&&ce(t,n,0)>-1}function Kn(t,n,e){for(var r=-1,i=null==t?0:t.length;++r<i;)if(e(n,t[r]))return!0;return!1}function te(t,n){for(var e=-1,r=null==t?0:t.length,i=Array(r);++e<r;)i[e]=n(t[e],e,t);return i}function ne(t,n){for(var e=-1,r=n.length,i=t.length;++e<r;)t[i+e]=n[e];return t}function ee(t,n,e,r){var i=-1,o=null==t?0:t.length;for(r&&o&&(e=t[++i]);++i<o;)e=n(e,t[i],i,t);return e}function re(t,n,e,r){var i=null==t?0:t.length;for(r&&i&&(e=t[--i]);i--;)e=n(e,t[i],i,t);return e}function ie(t,n){for(var e=-1,r=null==t?0:t.length;++e<r;)if(n(t[e],e,t))return!0;return!1}var oe=he("length");function ue(t,n,e){var r;return e(t,function(t,e,i){if(n(t,e,i))return r=e,!1}),r}function ae(t,n,e,r){for(var i=t.length,o=e+(r?1:-1);r?o--:++o<i;)if(n(t[o],o,t))return o;return-1}function ce(t,n,e){return n==n?function(t,n,e){var r=e-1,i=t.length;for(;++r<i;)if(t[r]===n)return r;return-1}(t,n,e):ae(t,se,e)}function fe(t,n,e,r){for(var i=e-1,o=t.length;++i<o;)if(r(t[i],n))return i;return-1}function se(t){return t!=t}function le(t,n){var e=null==t?0:t.length;return e?ve(t,n)/e:$}function he(t){return function(n){return null==n?o:n[t]}}function de(t){return function(n){return null==t?o:t[n]}}function pe(t,n,e,r,i){return i(t,function(t,i,o){e=r?(r=!1,t):n(e,t,i,o)}),e}function ve(t,n){for(var e,r=-1,i=t.length;++r<i;){var u=n(t[r]);u!==o&&(e=e===o?u:e+u)}return e}function ge(t,n){for(var e=-1,r=Array(t);++e<t;)r[e]=n(e);return r}function ye(t){return function(n){return t(n)}}function me(t,n){return te(n,function(n){return t[n]})}function be(t,n){return t.has(n)}function _e(t,n){for(var e=-1,r=t.length;++e<r&&ce(n,t[e],0)>-1;);return e}function xe(t,n){for(var e=t.length;e--&&ce(n,t[e],0)>-1;);return e}var we=de({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),Me=de({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Te(t){return"\\"+En[t]}function Ce(t){return Mn.test(t)}function Se(t){var n=-1,e=Array(t.size);return t.forEach(function(t,r){e[++n]=[r,t]}),e}function Ae(t,n){return function(e){return t(n(e))}}function ke(t,n){for(var e=-1,r=t.length,i=0,o=[];++e<r;){var u=t[e];u!==n&&u!==l||(t[e]=l,o[i++]=e)}return o}function Ee(t){var n=-1,e=Array(t.size);return t.forEach(function(t){e[++n]=t}),e}function Ne(t){var n=-1,e=Array(t.size);return t.forEach(function(t){e[++n]=[t,t]}),e}function De(t){return Ce(t)?function(t){var n=xn.lastIndex=0;for(;xn.test(t);)++n;return n}(t):oe(t)}function Oe(t){return Ce(t)?function(t){return t.match(xn)||[]}(t):function(t){return t.split("")}(t)}var Re=de({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var je=function t(n){var e,r=(n=null==n?jn:je.defaults(jn.Object(),n,je.pick(jn,Cn))).Array,i=n.Date,Jt=n.Error,Kt=n.Function,tn=n.Math,nn=n.Object,en=n.RegExp,rn=n.String,on=n.TypeError,un=r.prototype,an=Kt.prototype,cn=nn.prototype,fn=n["__core-js_shared__"],sn=an.toString,ln=cn.hasOwnProperty,hn=0,dn=(e=/[^.]+$/.exec(fn&&fn.keys&&fn.keys.IE_PROTO||""))?"Symbol(src)_1."+e:"",pn=cn.toString,vn=sn.call(nn),gn=jn._,yn=en("^"+sn.call(ln).replace(Ot,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),mn=In?n.Buffer:o,xn=n.Symbol,Mn=n.Uint8Array,En=mn?mn.allocUnsafe:o,On=Ae(nn.getPrototypeOf,nn),Rn=nn.create,Pn=cn.propertyIsEnumerable,$n=un.splice,Ln=xn?xn.isConcatSpreadable:o,zn=xn?xn.iterator:o,oe=xn?xn.toStringTag:o,de=function(){try{var t=zo(nn,"defineProperty");return t({},"",{}),t}catch(t){}}(),Pe=n.clearTimeout!==jn.clearTimeout&&n.clearTimeout,$e=i&&i.now!==jn.Date.now&&i.now,Ie=n.setTimeout!==jn.setTimeout&&n.setTimeout,Le=tn.ceil,ze=tn.floor,qe=nn.getOwnPropertySymbols,Be=mn?mn.isBuffer:o,Ue=n.isFinite,Fe=un.join,He=Ae(nn.keys,nn),We=tn.max,Ye=tn.min,Ve=i.now,Xe=n.parseInt,Ge=tn.random,Ze=un.reverse,Qe=zo(n,"DataView"),Je=zo(n,"Map"),Ke=zo(n,"Promise"),tr=zo(n,"Set"),nr=zo(n,"WeakMap"),er=zo(nn,"create"),rr=nr&&new nr,ir={},or=lu(Qe),ur=lu(Je),ar=lu(Ke),cr=lu(tr),fr=lu(nr),sr=xn?xn.prototype:o,lr=sr?sr.valueOf:o,hr=sr?sr.toString:o;function dr(t){if(ka(t)&&!ya(t)&&!(t instanceof yr)){if(t instanceof gr)return t;if(ln.call(t,"__wrapped__"))return hu(t)}return new gr(t)}var pr=function(){function t(){}return function(n){if(!Aa(n))return{};if(Rn)return Rn(n);t.prototype=n;var e=new t;return t.prototype=o,e}}();function vr(){}function gr(t,n){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!n,this.__index__=0,this.__values__=o}function yr(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=I,this.__views__=[]}function mr(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function br(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function _r(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function xr(t){var n=-1,e=null==t?0:t.length;for(this.__data__=new _r;++n<e;)this.add(t[n])}function wr(t){var n=this.__data__=new br(t);this.size=n.size}function Mr(t,n){var e=ya(t),r=!e&&ga(t),i=!e&&!r&&xa(t),o=!e&&!r&&!i&&$a(t),u=e||r||i||o,a=u?ge(t.length,rn):[],c=a.length;for(var f in t)!n&&!ln.call(t,f)||u&&("length"==f||i&&("offset"==f||"parent"==f)||o&&("buffer"==f||"byteLength"==f||"byteOffset"==f)||Yo(f,c))||a.push(f);return a}function Tr(t){var n=t.length;return n?t[xi(0,n-1)]:o}function Cr(t,n){return cu(eo(t),jr(n,0,t.length))}function Sr(t){return cu(eo(t))}function Ar(t,n,e){(e===o||da(t[n],e))&&(e!==o||n in t)||Or(t,n,e)}function kr(t,n,e){var r=t[n];ln.call(t,n)&&da(r,e)&&(e!==o||n in t)||Or(t,n,e)}function Er(t,n){for(var e=t.length;e--;)if(da(t[e][0],n))return e;return-1}function Nr(t,n,e,r){return zr(t,function(t,i,o){n(r,t,e(t),o)}),r}function Dr(t,n){return t&&ro(n,ic(n),t)}function Or(t,n,e){"__proto__"==n&&de?de(t,n,{configurable:!0,enumerable:!0,value:e,writable:!0}):t[n]=e}function Rr(t,n){for(var e=-1,i=n.length,u=r(i),a=null==t;++e<i;)u[e]=a?o:Ka(t,n[e]);return u}function jr(t,n,e){return t==t&&(e!==o&&(t=t<=e?t:e),n!==o&&(t=t>=n?t:n)),t}function Pr(t,n,e,r,i,u){var a,c=n&h,f=n&d,s=n&p;if(e&&(a=i?e(t,r,i,u):e(t)),a!==o)return a;if(!Aa(t))return t;var l=ya(t);if(l){if(a=function(t){var n=t.length,e=new t.constructor(n);return n&&"string"==typeof t[0]&&ln.call(t,"index")&&(e.index=t.index,e.input=t.input),e}(t),!c)return eo(t,a)}else{var v=Uo(t),g=v==X||v==G;if(xa(t))return Zi(t,c);if(v==K||v==B||g&&!i){if(a=f||g?{}:Ho(t),!c)return f?function(t,n){return ro(t,Bo(t),n)}(t,function(t,n){return t&&ro(n,oc(n),t)}(a,t)):function(t,n){return ro(t,qo(t),n)}(t,Dr(a,t))}else{if(!kn[v])return i?t:{};a=function(t,n,e){var r,i,o,u=t.constructor;switch(n){case ct:return Qi(t);case H:case W:return new u(+t);case ft:return function(t,n){var e=n?Qi(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.byteLength)}(t,e);case st:case lt:case ht:case dt:case pt:case vt:case gt:case yt:case mt:return Ji(t,e);case Z:return new u;case Q:case rt:return new u(t);case nt:return(o=new(i=t).constructor(i.source,Ft.exec(i))).lastIndex=i.lastIndex,o;case et:return new u;case it:return r=t,lr?nn(lr.call(r)):{}}}(t,v,c)}}u||(u=new wr);var y=u.get(t);if(y)return y;if(u.set(t,a),Ra(t))return t.forEach(function(r){a.add(Pr(r,n,e,r,t,u))}),a;if(Ea(t))return t.forEach(function(r,i){a.set(i,Pr(r,n,e,i,t,u))}),a;var m=l?o:(s?f?Oo:Do:f?oc:ic)(t);return Xn(m||t,function(r,i){m&&(r=t[i=r]),kr(a,i,Pr(r,n,e,i,t,u))}),a}function $r(t,n,e){var r=e.length;if(null==t)return!r;for(t=nn(t);r--;){var i=e[r],u=n[i],a=t[i];if(a===o&&!(i in t)||!u(a))return!1}return!0}function Ir(t,n,e){if("function"!=typeof t)throw new on(c);return iu(function(){t.apply(o,e)},n)}function Lr(t,n,e,r){var i=-1,o=Jn,a=!0,c=t.length,f=[],s=n.length;if(!c)return f;e&&(n=te(n,ye(e))),r?(o=Kn,a=!1):n.length>=u&&(o=be,a=!1,n=new xr(n));t:for(;++i<c;){var l=t[i],h=null==e?l:e(l);if(l=r||0!==l?l:0,a&&h==h){for(var d=s;d--;)if(n[d]===h)continue t;f.push(l)}else o(n,h,r)||f.push(l)}return f}dr.templateSettings={escape:St,evaluate:At,interpolate:kt,variable:"",imports:{_:dr}},dr.prototype=vr.prototype,dr.prototype.constructor=dr,gr.prototype=pr(vr.prototype),gr.prototype.constructor=gr,yr.prototype=pr(vr.prototype),yr.prototype.constructor=yr,mr.prototype.clear=function(){this.__data__=er?er(null):{},this.size=0},mr.prototype.delete=function(t){var n=this.has(t)&&delete this.__data__[t];return this.size-=n?1:0,n},mr.prototype.get=function(t){var n=this.__data__;if(er){var e=n[t];return e===f?o:e}return ln.call(n,t)?n[t]:o},mr.prototype.has=function(t){var n=this.__data__;return er?n[t]!==o:ln.call(n,t)},mr.prototype.set=function(t,n){var e=this.__data__;return this.size+=this.has(t)?0:1,e[t]=er&&n===o?f:n,this},br.prototype.clear=function(){this.__data__=[],this.size=0},br.prototype.delete=function(t){var n=this.__data__,e=Er(n,t);return!(e<0||(e==n.length-1?n.pop():$n.call(n,e,1),--this.size,0))},br.prototype.get=function(t){var n=this.__data__,e=Er(n,t);return e<0?o:n[e][1]},br.prototype.has=function(t){return Er(this.__data__,t)>-1},br.prototype.set=function(t,n){var e=this.__data__,r=Er(e,t);return r<0?(++this.size,e.push([t,n])):e[r][1]=n,this},_r.prototype.clear=function(){this.size=0,this.__data__={hash:new mr,map:new(Je||br),string:new mr}},_r.prototype.delete=function(t){var n=Io(this,t).delete(t);return this.size-=n?1:0,n},_r.prototype.get=function(t){return Io(this,t).get(t)},_r.prototype.has=function(t){return Io(this,t).has(t)},_r.prototype.set=function(t,n){var e=Io(this,t),r=e.size;return e.set(t,n),this.size+=e.size==r?0:1,this},xr.prototype.add=xr.prototype.push=function(t){return this.__data__.set(t,f),this},xr.prototype.has=function(t){return this.__data__.has(t)},wr.prototype.clear=function(){this.__data__=new br,this.size=0},wr.prototype.delete=function(t){var n=this.__data__,e=n.delete(t);return this.size=n.size,e},wr.prototype.get=function(t){return this.__data__.get(t)},wr.prototype.has=function(t){return this.__data__.has(t)},wr.prototype.set=function(t,n){var e=this.__data__;if(e instanceof br){var r=e.__data__;if(!Je||r.length<u-1)return r.push([t,n]),this.size=++e.size,this;e=this.__data__=new _r(r)}return e.set(t,n),this.size=e.size,this};var zr=uo(Vr),qr=uo(Xr,!0);function Br(t,n){var e=!0;return zr(t,function(t,r,i){return e=!!n(t,r,i)}),e}function Ur(t,n,e){for(var r=-1,i=t.length;++r<i;){var u=t[r],a=n(u);if(null!=a&&(c===o?a==a&&!Pa(a):e(a,c)))var c=a,f=u}return f}function Fr(t,n){var e=[];return zr(t,function(t,r,i){n(t,r,i)&&e.push(t)}),e}function Hr(t,n,e,r,i){var o=-1,u=t.length;for(e||(e=Wo),i||(i=[]);++o<u;){var a=t[o];n>0&&e(a)?n>1?Hr(a,n-1,e,r,i):ne(i,a):r||(i[i.length]=a)}return i}var Wr=ao(),Yr=ao(!0);function Vr(t,n){return t&&Wr(t,n,ic)}function Xr(t,n){return t&&Yr(t,n,ic)}function Gr(t,n){return Qn(n,function(n){return Ta(t[n])})}function Zr(t,n){for(var e=0,r=(n=Yi(n,t)).length;null!=t&&e<r;)t=t[su(n[e++])];return e&&e==r?t:o}function Qr(t,n,e){var r=n(t);return ya(t)?r:ne(r,e(t))}function Jr(t){return null==t?t===o?ot:J:oe&&oe in nn(t)?function(t){var n=ln.call(t,oe),e=t[oe];try{t[oe]=o;var r=!0}catch(t){}var i=pn.call(t);return r&&(n?t[oe]=e:delete t[oe]),i}(t):function(t){return pn.call(t)}(t)}function Kr(t,n){return t>n}function ti(t,n){return null!=t&&ln.call(t,n)}function ni(t,n){return null!=t&&n in nn(t)}function ei(t,n,e){for(var i=e?Kn:Jn,u=t[0].length,a=t.length,c=a,f=r(a),s=1/0,l=[];c--;){var h=t[c];c&&n&&(h=te(h,ye(n))),s=Ye(h.length,s),f[c]=!e&&(n||u>=120&&h.length>=120)?new xr(c&&h):o}h=t[0];var d=-1,p=f[0];t:for(;++d<u&&l.length<s;){var v=h[d],g=n?n(v):v;if(v=e||0!==v?v:0,!(p?be(p,g):i(l,g,e))){for(c=a;--c;){var y=f[c];if(!(y?be(y,g):i(t[c],g,e)))continue t}p&&p.push(g),l.push(v)}}return l}function ri(t,n,e){var r=null==(t=nu(t,n=Yi(n,t)))?t:t[su(Mu(n))];return null==r?o:Yn(r,t,e)}function ii(t){return ka(t)&&Jr(t)==B}function oi(t,n,e,r,i){return t===n||(null==t||null==n||!ka(t)&&!ka(n)?t!=t&&n!=n:function(t,n,e,r,i,u){var a=ya(t),c=ya(n),f=a?U:Uo(t),s=c?U:Uo(n),l=(f=f==B?K:f)==K,h=(s=s==B?K:s)==K,d=f==s;if(d&&xa(t)){if(!xa(n))return!1;a=!0,l=!1}if(d&&!l)return u||(u=new wr),a||$a(t)?Eo(t,n,e,r,i,u):function(t,n,e,r,i,o,u){switch(e){case ft:if(t.byteLength!=n.byteLength||t.byteOffset!=n.byteOffset)return!1;t=t.buffer,n=n.buffer;case ct:return!(t.byteLength!=n.byteLength||!o(new Mn(t),new Mn(n)));case H:case W:case Q:return da(+t,+n);case V:return t.name==n.name&&t.message==n.message;case nt:case rt:return t==n+"";case Z:var a=Se;case et:var c=r&v;if(a||(a=Ee),t.size!=n.size&&!c)return!1;var f=u.get(t);if(f)return f==n;r|=g,u.set(t,n);var s=Eo(a(t),a(n),r,i,o,u);return u.delete(t),s;case it:if(lr)return lr.call(t)==lr.call(n)}return!1}(t,n,f,e,r,i,u);if(!(e&v)){var p=l&&ln.call(t,"__wrapped__"),y=h&&ln.call(n,"__wrapped__");if(p||y){var m=p?t.value():t,b=y?n.value():n;return u||(u=new wr),i(m,b,e,r,u)}}return!!d&&(u||(u=new wr),function(t,n,e,r,i,u){var a=e&v,c=Do(t),f=c.length,s=Do(n).length;if(f!=s&&!a)return!1;for(var l=f;l--;){var h=c[l];if(!(a?h in n:ln.call(n,h)))return!1}var d=u.get(t);if(d&&u.get(n))return d==n;var p=!0;u.set(t,n),u.set(n,t);for(var g=a;++l<f;){h=c[l];var y=t[h],m=n[h];if(r)var b=a?r(m,y,h,n,t,u):r(y,m,h,t,n,u);if(!(b===o?y===m||i(y,m,e,r,u):b)){p=!1;break}g||(g="constructor"==h)}if(p&&!g){var _=t.constructor,x=n.constructor;_!=x&&"constructor"in t&&"constructor"in n&&!("function"==typeof _&&_ instanceof _&&"function"==typeof x&&x instanceof x)&&(p=!1)}return u.delete(t),u.delete(n),p}(t,n,e,r,i,u))}(t,n,e,r,oi,i))}function ui(t,n,e,r){var i=e.length,u=i,a=!r;if(null==t)return!u;for(t=nn(t);i--;){var c=e[i];if(a&&c[2]?c[1]!==t[c[0]]:!(c[0]in t))return!1}for(;++i<u;){var f=(c=e[i])[0],s=t[f],l=c[1];if(a&&c[2]){if(s===o&&!(f in t))return!1}else{var h=new wr;if(r)var d=r(s,l,f,t,n,h);if(!(d===o?oi(l,s,v|g,r,h):d))return!1}}return!0}function ai(t){return!(!Aa(t)||(n=t,dn&&dn in n))&&(Ta(t)?yn:Yt).test(lu(t));var n}function ci(t){return"function"==typeof t?t:null==t?Nc:"object"==typeof t?ya(t)?pi(t[0],t[1]):di(t):zc(t)}function fi(t){if(!Qo(t))return He(t);var n=[];for(var e in nn(t))ln.call(t,e)&&"constructor"!=e&&n.push(e);return n}function si(t){if(!Aa(t))return function(t){var n=[];if(null!=t)for(var e in nn(t))n.push(e);return n}(t);var n=Qo(t),e=[];for(var r in t)("constructor"!=r||!n&&ln.call(t,r))&&e.push(r);return e}function li(t,n){return t<n}function hi(t,n){var e=-1,i=ba(t)?r(t.length):[];return zr(t,function(t,r,o){i[++e]=n(t,r,o)}),i}function di(t){var n=Lo(t);return 1==n.length&&n[0][2]?Ko(n[0][0],n[0][1]):function(e){return e===t||ui(e,t,n)}}function pi(t,n){return Xo(t)&&Jo(n)?Ko(su(t),n):function(e){var r=Ka(e,t);return r===o&&r===n?tc(e,t):oi(n,r,v|g)}}function vi(t,n,e,r,i){t!==n&&Wr(n,function(u,a){if(Aa(u))i||(i=new wr),function(t,n,e,r,i,u,a){var c=eu(t,e),f=eu(n,e),s=a.get(f);if(s)Ar(t,e,s);else{var l=u?u(c,f,e+"",t,n,a):o,h=l===o;if(h){var d=ya(f),p=!d&&xa(f),v=!d&&!p&&$a(f);l=f,d||p||v?ya(c)?l=c:_a(c)?l=eo(c):p?(h=!1,l=Zi(f,!0)):v?(h=!1,l=Ji(f,!0)):l=[]:Da(f)||ga(f)?(l=c,ga(c)?l=Ha(c):Aa(c)&&!Ta(c)||(l=Ho(f))):h=!1}h&&(a.set(f,l),i(l,f,r,u,a),a.delete(f)),Ar(t,e,l)}}(t,n,a,e,vi,r,i);else{var c=r?r(eu(t,a),u,a+"",t,n,i):o;c===o&&(c=u),Ar(t,a,c)}},oc)}function gi(t,n){var e=t.length;if(e)return Yo(n+=n<0?e:0,e)?t[n]:o}function yi(t,n,e){var r=-1;return n=te(n.length?n:[Nc],ye($o())),function(t,n){var e=t.length;for(t.sort(n);e--;)t[e]=t[e].value;return t}(hi(t,function(t,e,i){return{criteria:te(n,function(n){return n(t)}),index:++r,value:t}}),function(t,n){return function(t,n,e){for(var r=-1,i=t.criteria,o=n.criteria,u=i.length,a=e.length;++r<u;){var c=Ki(i[r],o[r]);if(c){if(r>=a)return c;var f=e[r];return c*("desc"==f?-1:1)}}return t.index-n.index}(t,n,e)})}function mi(t,n,e){for(var r=-1,i=n.length,o={};++r<i;){var u=n[r],a=Zr(t,u);e(a,u)&&Si(o,Yi(u,t),a)}return o}function bi(t,n,e,r){var i=r?fe:ce,o=-1,u=n.length,a=t;for(t===n&&(n=eo(n)),e&&(a=te(t,ye(e)));++o<u;)for(var c=0,f=n[o],s=e?e(f):f;(c=i(a,s,c,r))>-1;)a!==t&&$n.call(a,c,1),$n.call(t,c,1);return t}function _i(t,n){for(var e=t?n.length:0,r=e-1;e--;){var i=n[e];if(e==r||i!==o){var o=i;Yo(i)?$n.call(t,i,1):Li(t,i)}}return t}function xi(t,n){return t+ze(Ge()*(n-t+1))}function wi(t,n){var e="";if(!t||n<1||n>j)return e;do{n%2&&(e+=t),(n=ze(n/2))&&(t+=t)}while(n);return e}function Mi(t,n){return ou(tu(t,n,Nc),t+"")}function Ti(t){return Tr(dc(t))}function Ci(t,n){var e=dc(t);return cu(e,jr(n,0,e.length))}function Si(t,n,e,r){if(!Aa(t))return t;for(var i=-1,u=(n=Yi(n,t)).length,a=u-1,c=t;null!=c&&++i<u;){var f=su(n[i]),s=e;if(i!=a){var l=c[f];(s=r?r(l,f,c):o)===o&&(s=Aa(l)?l:Yo(n[i+1])?[]:{})}kr(c,f,s),c=c[f]}return t}var Ai=rr?function(t,n){return rr.set(t,n),t}:Nc,ki=de?function(t,n){return de(t,"toString",{configurable:!0,enumerable:!1,value:Ac(n),writable:!0})}:Nc;function Ei(t){return cu(dc(t))}function Ni(t,n,e){var i=-1,o=t.length;n<0&&(n=-n>o?0:o+n),(e=e>o?o:e)<0&&(e+=o),o=n>e?0:e-n>>>0,n>>>=0;for(var u=r(o);++i<o;)u[i]=t[i+n];return u}function Di(t,n){var e;return zr(t,function(t,r,i){return!(e=n(t,r,i))}),!!e}function Oi(t,n,e){var r=0,i=null==t?r:t.length;if("number"==typeof n&&n==n&&i<=z){for(;r<i;){var o=r+i>>>1,u=t[o];null!==u&&!Pa(u)&&(e?u<=n:u<n)?r=o+1:i=o}return i}return Ri(t,n,Nc,e)}function Ri(t,n,e,r){n=e(n);for(var i=0,u=null==t?0:t.length,a=n!=n,c=null===n,f=Pa(n),s=n===o;i<u;){var l=ze((i+u)/2),h=e(t[l]),d=h!==o,p=null===h,v=h==h,g=Pa(h);if(a)var y=r||v;else y=s?v&&(r||d):c?v&&d&&(r||!p):f?v&&d&&!p&&(r||!g):!p&&!g&&(r?h<=n:h<n);y?i=l+1:u=l}return Ye(u,L)}function ji(t,n){for(var e=-1,r=t.length,i=0,o=[];++e<r;){var u=t[e],a=n?n(u):u;if(!e||!da(a,c)){var c=a;o[i++]=0===u?0:u}}return o}function Pi(t){return"number"==typeof t?t:Pa(t)?$:+t}function $i(t){if("string"==typeof t)return t;if(ya(t))return te(t,$i)+"";if(Pa(t))return hr?hr.call(t):"";var n=t+"";return"0"==n&&1/t==-R?"-0":n}function Ii(t,n,e){var r=-1,i=Jn,o=t.length,a=!0,c=[],f=c;if(e)a=!1,i=Kn;else if(o>=u){var s=n?null:Mo(t);if(s)return Ee(s);a=!1,i=be,f=new xr}else f=n?[]:c;t:for(;++r<o;){var l=t[r],h=n?n(l):l;if(l=e||0!==l?l:0,a&&h==h){for(var d=f.length;d--;)if(f[d]===h)continue t;n&&f.push(h),c.push(l)}else i(f,h,e)||(f!==c&&f.push(h),c.push(l))}return c}function Li(t,n){return null==(t=nu(t,n=Yi(n,t)))||delete t[su(Mu(n))]}function zi(t,n,e,r){return Si(t,n,e(Zr(t,n)),r)}function qi(t,n,e,r){for(var i=t.length,o=r?i:-1;(r?o--:++o<i)&&n(t[o],o,t););return e?Ni(t,r?0:o,r?o+1:i):Ni(t,r?o+1:0,r?i:o)}function Bi(t,n){var e=t;return e instanceof yr&&(e=e.value()),ee(n,function(t,n){return n.func.apply(n.thisArg,ne([t],n.args))},e)}function Ui(t,n,e){var i=t.length;if(i<2)return i?Ii(t[0]):[];for(var o=-1,u=r(i);++o<i;)for(var a=t[o],c=-1;++c<i;)c!=o&&(u[o]=Lr(u[o]||a,t[c],n,e));return Ii(Hr(u,1),n,e)}function Fi(t,n,e){for(var r=-1,i=t.length,u=n.length,a={};++r<i;){var c=r<u?n[r]:o;e(a,t[r],c)}return a}function Hi(t){return _a(t)?t:[]}function Wi(t){return"function"==typeof t?t:Nc}function Yi(t,n){return ya(t)?t:Xo(t,n)?[t]:fu(Wa(t))}var Vi=Mi;function Xi(t,n,e){var r=t.length;return e=e===o?r:e,!n&&e>=r?t:Ni(t,n,e)}var Gi=Pe||function(t){return jn.clearTimeout(t)};function Zi(t,n){if(n)return t.slice();var e=t.length,r=En?En(e):new t.constructor(e);return t.copy(r),r}function Qi(t){var n=new t.constructor(t.byteLength);return new Mn(n).set(new Mn(t)),n}function Ji(t,n){var e=n?Qi(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.length)}function Ki(t,n){if(t!==n){var e=t!==o,r=null===t,i=t==t,u=Pa(t),a=n!==o,c=null===n,f=n==n,s=Pa(n);if(!c&&!s&&!u&&t>n||u&&a&&f&&!c&&!s||r&&a&&f||!e&&f||!i)return 1;if(!r&&!u&&!s&&t<n||s&&e&&i&&!r&&!u||c&&e&&i||!a&&i||!f)return-1}return 0}function to(t,n,e,i){for(var o=-1,u=t.length,a=e.length,c=-1,f=n.length,s=We(u-a,0),l=r(f+s),h=!i;++c<f;)l[c]=n[c];for(;++o<a;)(h||o<u)&&(l[e[o]]=t[o]);for(;s--;)l[c++]=t[o++];return l}function no(t,n,e,i){for(var o=-1,u=t.length,a=-1,c=e.length,f=-1,s=n.length,l=We(u-c,0),h=r(l+s),d=!i;++o<l;)h[o]=t[o];for(var p=o;++f<s;)h[p+f]=n[f];for(;++a<c;)(d||o<u)&&(h[p+e[a]]=t[o++]);return h}function eo(t,n){var e=-1,i=t.length;for(n||(n=r(i));++e<i;)n[e]=t[e];return n}function ro(t,n,e,r){var i=!e;e||(e={});for(var u=-1,a=n.length;++u<a;){var c=n[u],f=r?r(e[c],t[c],c,e,t):o;f===o&&(f=t[c]),i?Or(e,c,f):kr(e,c,f)}return e}function io(t,n){return function(e,r){var i=ya(e)?Vn:Nr,o=n?n():{};return i(e,t,$o(r,2),o)}}function oo(t){return Mi(function(n,e){var r=-1,i=e.length,u=i>1?e[i-1]:o,a=i>2?e[2]:o;for(u=t.length>3&&"function"==typeof u?(i--,u):o,a&&Vo(e[0],e[1],a)&&(u=i<3?o:u,i=1),n=nn(n);++r<i;){var c=e[r];c&&t(n,c,r,u)}return n})}function uo(t,n){return function(e,r){if(null==e)return e;if(!ba(e))return t(e,r);for(var i=e.length,o=n?i:-1,u=nn(e);(n?o--:++o<i)&&!1!==r(u[o],o,u););return e}}function ao(t){return function(n,e,r){for(var i=-1,o=nn(n),u=r(n),a=u.length;a--;){var c=u[t?a:++i];if(!1===e(o[c],c,o))break}return n}}function co(t){return function(n){var e=Ce(n=Wa(n))?Oe(n):o,r=e?e[0]:n.charAt(0),i=e?Xi(e,1).join(""):n.slice(1);return r[t]()+i}}function fo(t){return function(n){return ee(Tc(gc(n).replace(bn,"")),t,"")}}function so(t){return function(){var n=arguments;switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3]);case 5:return new t(n[0],n[1],n[2],n[3],n[4]);case 6:return new t(n[0],n[1],n[2],n[3],n[4],n[5]);case 7:return new t(n[0],n[1],n[2],n[3],n[4],n[5],n[6])}var e=pr(t.prototype),r=t.apply(e,n);return Aa(r)?r:e}}function lo(t){return function(n,e,r){var i=nn(n);if(!ba(n)){var u=$o(e,3);n=ic(n),e=function(t){return u(i[t],t,i)}}var a=t(n,e,r);return a>-1?i[u?n[a]:a]:o}}function ho(t){return No(function(n){var e=n.length,r=e,i=gr.prototype.thru;for(t&&n.reverse();r--;){var u=n[r];if("function"!=typeof u)throw new on(c);if(i&&!a&&"wrapper"==jo(u))var a=new gr([],!0)}for(r=a?r:e;++r<e;){var f=jo(u=n[r]),s="wrapper"==f?Ro(u):o;a=s&&Go(s[0])&&s[1]==(T|_|w|C)&&!s[4].length&&1==s[9]?a[jo(s[0])].apply(a,s[3]):1==u.length&&Go(u)?a[f]():a.thru(u)}return function(){var t=arguments,r=t[0];if(a&&1==t.length&&ya(r))return a.plant(r).value();for(var i=0,o=e?n[i].apply(this,t):r;++i<e;)o=n[i].call(this,o);return o}})}function po(t,n,e,i,u,a,c,f,s,l){var h=n&T,d=n&y,p=n&m,v=n&(_|x),g=n&S,b=p?o:so(t);return function y(){for(var m=arguments.length,_=r(m),x=m;x--;)_[x]=arguments[x];if(v)var w=Po(y),M=function(t,n){for(var e=t.length,r=0;e--;)t[e]===n&&++r;return r}(_,w);if(i&&(_=to(_,i,u,v)),a&&(_=no(_,a,c,v)),m-=M,v&&m<l){var T=ke(_,w);return xo(t,n,po,y.placeholder,e,_,T,f,s,l-m)}var C=d?e:this,S=p?C[t]:t;return m=_.length,f?_=function(t,n){for(var e=t.length,r=Ye(n.length,e),i=eo(t);r--;){var u=n[r];t[r]=Yo(u,e)?i[u]:o}return t}(_,f):g&&m>1&&_.reverse(),h&&s<m&&(_.length=s),this&&this!==jn&&this instanceof y&&(S=b||so(S)),S.apply(C,_)}}function vo(t,n){return function(e,r){return function(t,n,e,r){return Vr(t,function(t,i,o){n(r,e(t),i,o)}),r}(e,t,n(r),{})}}function go(t,n){return function(e,r){var i;if(e===o&&r===o)return n;if(e!==o&&(i=e),r!==o){if(i===o)return r;"string"==typeof e||"string"==typeof r?(e=$i(e),r=$i(r)):(e=Pi(e),r=Pi(r)),i=t(e,r)}return i}}function yo(t){return No(function(n){return n=te(n,ye($o())),Mi(function(e){var r=this;return t(n,function(t){return Yn(t,r,e)})})})}function mo(t,n){var e=(n=n===o?" ":$i(n)).length;if(e<2)return e?wi(n,t):n;var r=wi(n,Le(t/De(n)));return Ce(n)?Xi(Oe(r),0,t).join(""):r.slice(0,t)}function bo(t){return function(n,e,i){return i&&"number"!=typeof i&&Vo(n,e,i)&&(e=i=o),n=qa(n),e===o?(e=n,n=0):e=qa(e),function(t,n,e,i){for(var o=-1,u=We(Le((n-t)/(e||1)),0),a=r(u);u--;)a[i?u:++o]=t,t+=e;return a}(n,e,i=i===o?n<e?1:-1:qa(i),t)}}function _o(t){return function(n,e){return"string"==typeof n&&"string"==typeof e||(n=Fa(n),e=Fa(e)),t(n,e)}}function xo(t,n,e,r,i,u,a,c,f,s){var l=n&_;n|=l?w:M,(n&=~(l?M:w))&b||(n&=~(y|m));var h=[t,n,i,l?u:o,l?a:o,l?o:u,l?o:a,c,f,s],d=e.apply(o,h);return Go(t)&&ru(d,h),d.placeholder=r,uu(d,t,n)}function wo(t){var n=tn[t];return function(t,e){if(t=Fa(t),e=null==e?0:Ye(Ba(e),292)){var r=(Wa(t)+"e").split("e");return+((r=(Wa(n(r[0]+"e"+(+r[1]+e)))+"e").split("e"))[0]+"e"+(+r[1]-e))}return n(t)}}var Mo=tr&&1/Ee(new tr([,-0]))[1]==R?function(t){return new tr(t)}:Pc;function To(t){return function(n){var e=Uo(n);return e==Z?Se(n):e==et?Ne(n):function(t,n){return te(n,function(n){return[n,t[n]]})}(n,t(n))}}function Co(t,n,e,i,u,a,f,s){var h=n&m;if(!h&&"function"!=typeof t)throw new on(c);var d=i?i.length:0;if(d||(n&=~(w|M),i=u=o),f=f===o?f:We(Ba(f),0),s=s===o?s:Ba(s),d-=u?u.length:0,n&M){var p=i,v=u;i=u=o}var g=h?o:Ro(t),S=[t,n,e,i,u,p,v,a,f,s];if(g&&function(t,n){var e=t[1],r=n[1],i=e|r,o=i<(y|m|T),u=r==T&&e==_||r==T&&e==C&&t[7].length<=n[8]||r==(T|C)&&n[7].length<=n[8]&&e==_;if(!o&&!u)return t;r&y&&(t[2]=n[2],i|=e&y?0:b);var a=n[3];if(a){var c=t[3];t[3]=c?to(c,a,n[4]):a,t[4]=c?ke(t[3],l):n[4]}(a=n[5])&&(c=t[5],t[5]=c?no(c,a,n[6]):a,t[6]=c?ke(t[5],l):n[6]),(a=n[7])&&(t[7]=a),r&T&&(t[8]=null==t[8]?n[8]:Ye(t[8],n[8])),null==t[9]&&(t[9]=n[9]),t[0]=n[0],t[1]=i}(S,g),t=S[0],n=S[1],e=S[2],i=S[3],u=S[4],!(s=S[9]=S[9]===o?h?0:t.length:We(S[9]-d,0))&&n&(_|x)&&(n&=~(_|x)),n&&n!=y)A=n==_||n==x?function(t,n,e){var i=so(t);return function u(){for(var a=arguments.length,c=r(a),f=a,s=Po(u);f--;)c[f]=arguments[f];var l=a<3&&c[0]!==s&&c[a-1]!==s?[]:ke(c,s);return(a-=l.length)<e?xo(t,n,po,u.placeholder,o,c,l,o,o,e-a):Yn(this&&this!==jn&&this instanceof u?i:t,this,c)}}(t,n,s):n!=w&&n!=(y|w)||u.length?po.apply(o,S):function(t,n,e,i){var o=n&y,u=so(t);return function n(){for(var a=-1,c=arguments.length,f=-1,s=i.length,l=r(s+c),h=this&&this!==jn&&this instanceof n?u:t;++f<s;)l[f]=i[f];for(;c--;)l[f++]=arguments[++a];return Yn(h,o?e:this,l)}}(t,n,e,i);else var A=function(t,n,e){var r=n&y,i=so(t);return function n(){return(this&&this!==jn&&this instanceof n?i:t).apply(r?e:this,arguments)}}(t,n,e);return uu((g?Ai:ru)(A,S),t,n)}function So(t,n,e,r){return t===o||da(t,cn[e])&&!ln.call(r,e)?n:t}function Ao(t,n,e,r,i,u){return Aa(t)&&Aa(n)&&(u.set(n,t),vi(t,n,o,Ao,u),u.delete(n)),t}function ko(t){return Da(t)?o:t}function Eo(t,n,e,r,i,u){var a=e&v,c=t.length,f=n.length;if(c!=f&&!(a&&f>c))return!1;var s=u.get(t);if(s&&u.get(n))return s==n;var l=-1,h=!0,d=e&g?new xr:o;for(u.set(t,n),u.set(n,t);++l<c;){var p=t[l],y=n[l];if(r)var m=a?r(y,p,l,n,t,u):r(p,y,l,t,n,u);if(m!==o){if(m)continue;h=!1;break}if(d){if(!ie(n,function(t,n){if(!be(d,n)&&(p===t||i(p,t,e,r,u)))return d.push(n)})){h=!1;break}}else if(p!==y&&!i(p,y,e,r,u)){h=!1;break}}return u.delete(t),u.delete(n),h}function No(t){return ou(tu(t,o,mu),t+"")}function Do(t){return Qr(t,ic,qo)}function Oo(t){return Qr(t,oc,Bo)}var Ro=rr?function(t){return rr.get(t)}:Pc;function jo(t){for(var n=t.name+"",e=ir[n],r=ln.call(ir,n)?e.length:0;r--;){var i=e[r],o=i.func;if(null==o||o==t)return i.name}return n}function Po(t){return(ln.call(dr,"placeholder")?dr:t).placeholder}function $o(){var t=dr.iteratee||Dc;return t=t===Dc?ci:t,arguments.length?t(arguments[0],arguments[1]):t}function Io(t,n){var e,r,i=t.__data__;return("string"==(r=typeof(e=n))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==e:null===e)?i["string"==typeof n?"string":"hash"]:i.map}function Lo(t){for(var n=ic(t),e=n.length;e--;){var r=n[e],i=t[r];n[e]=[r,i,Jo(i)]}return n}function zo(t,n){var e=function(t,n){return null==t?o:t[n]}(t,n);return ai(e)?e:o}var qo=qe?function(t){return null==t?[]:(t=nn(t),Qn(qe(t),function(n){return Pn.call(t,n)}))}:Uc,Bo=qe?function(t){for(var n=[];t;)ne(n,qo(t)),t=On(t);return n}:Uc,Uo=Jr;function Fo(t,n,e){for(var r=-1,i=(n=Yi(n,t)).length,o=!1;++r<i;){var u=su(n[r]);if(!(o=null!=t&&e(t,u)))break;t=t[u]}return o||++r!=i?o:!!(i=null==t?0:t.length)&&Sa(i)&&Yo(u,i)&&(ya(t)||ga(t))}function Ho(t){return"function"!=typeof t.constructor||Qo(t)?{}:pr(On(t))}function Wo(t){return ya(t)||ga(t)||!!(Ln&&t&&t[Ln])}function Yo(t,n){var e=typeof t;return!!(n=null==n?j:n)&&("number"==e||"symbol"!=e&&Xt.test(t))&&t>-1&&t%1==0&&t<n}function Vo(t,n,e){if(!Aa(e))return!1;var r=typeof n;return!!("number"==r?ba(e)&&Yo(n,e.length):"string"==r&&n in e)&&da(e[n],t)}function Xo(t,n){if(ya(t))return!1;var e=typeof t;return!("number"!=e&&"symbol"!=e&&"boolean"!=e&&null!=t&&!Pa(t))||Nt.test(t)||!Et.test(t)||null!=n&&t in nn(n)}function Go(t){var n=jo(t),e=dr[n];if("function"!=typeof e||!(n in yr.prototype))return!1;if(t===e)return!0;var r=Ro(e);return!!r&&t===r[0]}(Qe&&Uo(new Qe(new ArrayBuffer(1)))!=ft||Je&&Uo(new Je)!=Z||Ke&&"[object Promise]"!=Uo(Ke.resolve())||tr&&Uo(new tr)!=et||nr&&Uo(new nr)!=ut)&&(Uo=function(t){var n=Jr(t),e=n==K?t.constructor:o,r=e?lu(e):"";if(r)switch(r){case or:return ft;case ur:return Z;case ar:return"[object Promise]";case cr:return et;case fr:return ut}return n});var Zo=fn?Ta:Fc;function Qo(t){var n=t&&t.constructor;return t===("function"==typeof n&&n.prototype||cn)}function Jo(t){return t==t&&!Aa(t)}function Ko(t,n){return function(e){return null!=e&&e[t]===n&&(n!==o||t in nn(e))}}function tu(t,n,e){return n=We(n===o?t.length-1:n,0),function(){for(var i=arguments,o=-1,u=We(i.length-n,0),a=r(u);++o<u;)a[o]=i[n+o];o=-1;for(var c=r(n+1);++o<n;)c[o]=i[o];return c[n]=e(a),Yn(t,this,c)}}function nu(t,n){return n.length<2?t:Zr(t,Ni(n,0,-1))}function eu(t,n){if("__proto__"!=n)return t[n]}var ru=au(Ai),iu=Ie||function(t,n){return jn.setTimeout(t,n)},ou=au(ki);function uu(t,n,e){var r=n+"";return ou(t,function(t,n){var e=n.length;if(!e)return t;var r=e-1;return n[r]=(e>1?"& ":"")+n[r],n=n.join(e>2?", ":" "),t.replace(It,"{\n/* [wrapped with "+n+"] */\n")}(r,function(t,n){return Xn(q,function(e){var r="_."+e[0];n&e[1]&&!Jn(t,r)&&t.push(r)}),t.sort()}(function(t){var n=t.match(Lt);return n?n[1].split(zt):[]}(r),e)))}function au(t){var n=0,e=0;return function(){var r=Ve(),i=N-(r-e);if(e=r,i>0){if(++n>=E)return arguments[0]}else n=0;return t.apply(o,arguments)}}function cu(t,n){var e=-1,r=t.length,i=r-1;for(n=n===o?r:n;++e<n;){var u=xi(e,i),a=t[u];t[u]=t[e],t[e]=a}return t.length=n,t}var fu=function(t){var n=aa(t,function(t){return e.size===s&&e.clear(),t}),e=n.cache;return n}(function(t){var n=[];return 46===t.charCodeAt(0)&&n.push(""),t.replace(Dt,function(t,e,r,i){n.push(r?i.replace(Bt,"$1"):e||t)}),n});function su(t){if("string"==typeof t||Pa(t))return t;var n=t+"";return"0"==n&&1/t==-R?"-0":n}function lu(t){if(null!=t){try{return sn.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function hu(t){if(t instanceof yr)return t.clone();var n=new gr(t.__wrapped__,t.__chain__);return n.__actions__=eo(t.__actions__),n.__index__=t.__index__,n.__values__=t.__values__,n}var du=Mi(function(t,n){return _a(t)?Lr(t,Hr(n,1,_a,!0)):[]}),pu=Mi(function(t,n){var e=Mu(n);return _a(e)&&(e=o),_a(t)?Lr(t,Hr(n,1,_a,!0),$o(e,2)):[]}),vu=Mi(function(t,n){var e=Mu(n);return _a(e)&&(e=o),_a(t)?Lr(t,Hr(n,1,_a,!0),o,e):[]});function gu(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=null==e?0:Ba(e);return i<0&&(i=We(r+i,0)),ae(t,$o(n,3),i)}function yu(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=r-1;return e!==o&&(i=Ba(e),i=e<0?We(r+i,0):Ye(i,r-1)),ae(t,$o(n,3),i,!0)}function mu(t){return null!=t&&t.length?Hr(t,1):[]}function bu(t){return t&&t.length?t[0]:o}var _u=Mi(function(t){var n=te(t,Hi);return n.length&&n[0]===t[0]?ei(n):[]}),xu=Mi(function(t){var n=Mu(t),e=te(t,Hi);return n===Mu(e)?n=o:e.pop(),e.length&&e[0]===t[0]?ei(e,$o(n,2)):[]}),wu=Mi(function(t){var n=Mu(t),e=te(t,Hi);return(n="function"==typeof n?n:o)&&e.pop(),e.length&&e[0]===t[0]?ei(e,o,n):[]});function Mu(t){var n=null==t?0:t.length;return n?t[n-1]:o}var Tu=Mi(Cu);function Cu(t,n){return t&&t.length&&n&&n.length?bi(t,n):t}var Su=No(function(t,n){var e=null==t?0:t.length,r=Rr(t,n);return _i(t,te(n,function(t){return Yo(t,e)?+t:t}).sort(Ki)),r});function Au(t){return null==t?t:Ze.call(t)}var ku=Mi(function(t){return Ii(Hr(t,1,_a,!0))}),Eu=Mi(function(t){var n=Mu(t);return _a(n)&&(n=o),Ii(Hr(t,1,_a,!0),$o(n,2))}),Nu=Mi(function(t){var n=Mu(t);return n="function"==typeof n?n:o,Ii(Hr(t,1,_a,!0),o,n)});function Du(t){if(!t||!t.length)return[];var n=0;return t=Qn(t,function(t){if(_a(t))return n=We(t.length,n),!0}),ge(n,function(n){return te(t,he(n))})}function Ou(t,n){if(!t||!t.length)return[];var e=Du(t);return null==n?e:te(e,function(t){return Yn(n,o,t)})}var Ru=Mi(function(t,n){return _a(t)?Lr(t,n):[]}),ju=Mi(function(t){return Ui(Qn(t,_a))}),Pu=Mi(function(t){var n=Mu(t);return _a(n)&&(n=o),Ui(Qn(t,_a),$o(n,2))}),$u=Mi(function(t){var n=Mu(t);return n="function"==typeof n?n:o,Ui(Qn(t,_a),o,n)}),Iu=Mi(Du);var Lu=Mi(function(t){var n=t.length,e=n>1?t[n-1]:o;return e="function"==typeof e?(t.pop(),e):o,Ou(t,e)});function zu(t){var n=dr(t);return n.__chain__=!0,n}function qu(t,n){return n(t)}var Bu=No(function(t){var n=t.length,e=n?t[0]:0,r=this.__wrapped__,i=function(n){return Rr(n,t)};return!(n>1||this.__actions__.length)&&r instanceof yr&&Yo(e)?((r=r.slice(e,+e+(n?1:0))).__actions__.push({func:qu,args:[i],thisArg:o}),new gr(r,this.__chain__).thru(function(t){return n&&!t.length&&t.push(o),t})):this.thru(i)});var Uu=io(function(t,n,e){ln.call(t,e)?++t[e]:Or(t,e,1)});var Fu=lo(gu),Hu=lo(yu);function Wu(t,n){return(ya(t)?Xn:zr)(t,$o(n,3))}function Yu(t,n){return(ya(t)?Gn:qr)(t,$o(n,3))}var Vu=io(function(t,n,e){ln.call(t,e)?t[e].push(n):Or(t,e,[n])});var Xu=Mi(function(t,n,e){var i=-1,o="function"==typeof n,u=ba(t)?r(t.length):[];return zr(t,function(t){u[++i]=o?Yn(n,t,e):ri(t,n,e)}),u}),Gu=io(function(t,n,e){Or(t,e,n)});function Zu(t,n){return(ya(t)?te:hi)(t,$o(n,3))}var Qu=io(function(t,n,e){t[e?0:1].push(n)},function(){return[[],[]]});var Ju=Mi(function(t,n){if(null==t)return[];var e=n.length;return e>1&&Vo(t,n[0],n[1])?n=[]:e>2&&Vo(n[0],n[1],n[2])&&(n=[n[0]]),yi(t,Hr(n,1),[])}),Ku=$e||function(){return jn.Date.now()};function ta(t,n,e){return n=e?o:n,n=t&&null==n?t.length:n,Co(t,T,o,o,o,o,n)}function na(t,n){var e;if("function"!=typeof n)throw new on(c);return t=Ba(t),function(){return--t>0&&(e=n.apply(this,arguments)),t<=1&&(n=o),e}}var ea=Mi(function(t,n,e){var r=y;if(e.length){var i=ke(e,Po(ea));r|=w}return Co(t,r,n,e,i)}),ra=Mi(function(t,n,e){var r=y|m;if(e.length){var i=ke(e,Po(ra));r|=w}return Co(n,r,t,e,i)});function ia(t,n,e){var r,i,u,a,f,s,l=0,h=!1,d=!1,p=!0;if("function"!=typeof t)throw new on(c);function v(n){var e=r,u=i;return r=i=o,l=n,a=t.apply(u,e)}function g(t){var e=t-s;return s===o||e>=n||e<0||d&&t-l>=u}function y(){var t=Ku();if(g(t))return m(t);f=iu(y,function(t){var e=n-(t-s);return d?Ye(e,u-(t-l)):e}(t))}function m(t){return f=o,p&&r?v(t):(r=i=o,a)}function b(){var t=Ku(),e=g(t);if(r=arguments,i=this,s=t,e){if(f===o)return function(t){return l=t,f=iu(y,n),h?v(t):a}(s);if(d)return f=iu(y,n),v(s)}return f===o&&(f=iu(y,n)),a}return n=Fa(n)||0,Aa(e)&&(h=!!e.leading,u=(d="maxWait"in e)?We(Fa(e.maxWait)||0,n):u,p="trailing"in e?!!e.trailing:p),b.cancel=function(){f!==o&&Gi(f),l=0,r=s=i=f=o},b.flush=function(){return f===o?a:m(Ku())},b}var oa=Mi(function(t,n){return Ir(t,1,n)}),ua=Mi(function(t,n,e){return Ir(t,Fa(n)||0,e)});function aa(t,n){if("function"!=typeof t||null!=n&&"function"!=typeof n)throw new on(c);var e=function(){var r=arguments,i=n?n.apply(this,r):r[0],o=e.cache;if(o.has(i))return o.get(i);var u=t.apply(this,r);return e.cache=o.set(i,u)||o,u};return e.cache=new(aa.Cache||_r),e}function ca(t){if("function"!=typeof t)throw new on(c);return function(){var n=arguments;switch(n.length){case 0:return!t.call(this);case 1:return!t.call(this,n[0]);case 2:return!t.call(this,n[0],n[1]);case 3:return!t.call(this,n[0],n[1],n[2])}return!t.apply(this,n)}}aa.Cache=_r;var fa=Vi(function(t,n){var e=(n=1==n.length&&ya(n[0])?te(n[0],ye($o())):te(Hr(n,1),ye($o()))).length;return Mi(function(r){for(var i=-1,o=Ye(r.length,e);++i<o;)r[i]=n[i].call(this,r[i]);return Yn(t,this,r)})}),sa=Mi(function(t,n){var e=ke(n,Po(sa));return Co(t,w,o,n,e)}),la=Mi(function(t,n){var e=ke(n,Po(la));return Co(t,M,o,n,e)}),ha=No(function(t,n){return Co(t,C,o,o,o,n)});function da(t,n){return t===n||t!=t&&n!=n}var pa=_o(Kr),va=_o(function(t,n){return t>=n}),ga=ii(function(){return arguments}())?ii:function(t){return ka(t)&&ln.call(t,"callee")&&!Pn.call(t,"callee")},ya=r.isArray,ma=qn?ye(qn):function(t){return ka(t)&&Jr(t)==ct};function ba(t){return null!=t&&Sa(t.length)&&!Ta(t)}function _a(t){return ka(t)&&ba(t)}var xa=Be||Fc,wa=Bn?ye(Bn):function(t){return ka(t)&&Jr(t)==W};function Ma(t){if(!ka(t))return!1;var n=Jr(t);return n==V||n==Y||"string"==typeof t.message&&"string"==typeof t.name&&!Da(t)}function Ta(t){if(!Aa(t))return!1;var n=Jr(t);return n==X||n==G||n==F||n==tt}function Ca(t){return"number"==typeof t&&t==Ba(t)}function Sa(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=j}function Aa(t){var n=typeof t;return null!=t&&("object"==n||"function"==n)}function ka(t){return null!=t&&"object"==typeof t}var Ea=Un?ye(Un):function(t){return ka(t)&&Uo(t)==Z};function Na(t){return"number"==typeof t||ka(t)&&Jr(t)==Q}function Da(t){if(!ka(t)||Jr(t)!=K)return!1;var n=On(t);if(null===n)return!0;var e=ln.call(n,"constructor")&&n.constructor;return"function"==typeof e&&e instanceof e&&sn.call(e)==vn}var Oa=Fn?ye(Fn):function(t){return ka(t)&&Jr(t)==nt};var Ra=Hn?ye(Hn):function(t){return ka(t)&&Uo(t)==et};function ja(t){return"string"==typeof t||!ya(t)&&ka(t)&&Jr(t)==rt}function Pa(t){return"symbol"==typeof t||ka(t)&&Jr(t)==it}var $a=Wn?ye(Wn):function(t){return ka(t)&&Sa(t.length)&&!!An[Jr(t)]};var Ia=_o(li),La=_o(function(t,n){return t<=n});function za(t){if(!t)return[];if(ba(t))return ja(t)?Oe(t):eo(t);if(zn&&t[zn])return function(t){for(var n,e=[];!(n=t.next()).done;)e.push(n.value);return e}(t[zn]());var n=Uo(t);return(n==Z?Se:n==et?Ee:dc)(t)}function qa(t){return t?(t=Fa(t))===R||t===-R?(t<0?-1:1)*P:t==t?t:0:0===t?t:0}function Ba(t){var n=qa(t),e=n%1;return n==n?e?n-e:n:0}function Ua(t){return t?jr(Ba(t),0,I):0}function Fa(t){if("number"==typeof t)return t;if(Pa(t))return $;if(Aa(t)){var n="function"==typeof t.valueOf?t.valueOf():t;t=Aa(n)?n+"":n}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(jt,"");var e=Wt.test(t);return e||Vt.test(t)?Dn(t.slice(2),e?2:8):Ht.test(t)?$:+t}function Ha(t){return ro(t,oc(t))}function Wa(t){return null==t?"":$i(t)}var Ya=oo(function(t,n){if(Qo(n)||ba(n))ro(n,ic(n),t);else for(var e in n)ln.call(n,e)&&kr(t,e,n[e])}),Va=oo(function(t,n){ro(n,oc(n),t)}),Xa=oo(function(t,n,e,r){ro(n,oc(n),t,r)}),Ga=oo(function(t,n,e,r){ro(n,ic(n),t,r)}),Za=No(Rr);var Qa=Mi(function(t,n){t=nn(t);var e=-1,r=n.length,i=r>2?n[2]:o;for(i&&Vo(n[0],n[1],i)&&(r=1);++e<r;)for(var u=n[e],a=oc(u),c=-1,f=a.length;++c<f;){var s=a[c],l=t[s];(l===o||da(l,cn[s])&&!ln.call(t,s))&&(t[s]=u[s])}return t}),Ja=Mi(function(t){return t.push(o,Ao),Yn(ac,o,t)});function Ka(t,n,e){var r=null==t?o:Zr(t,n);return r===o?e:r}function tc(t,n){return null!=t&&Fo(t,n,ni)}var nc=vo(function(t,n,e){null!=n&&"function"!=typeof n.toString&&(n=pn.call(n)),t[n]=e},Ac(Nc)),ec=vo(function(t,n,e){null!=n&&"function"!=typeof n.toString&&(n=pn.call(n)),ln.call(t,n)?t[n].push(e):t[n]=[e]},$o),rc=Mi(ri);function ic(t){return ba(t)?Mr(t):fi(t)}function oc(t){return ba(t)?Mr(t,!0):si(t)}var uc=oo(function(t,n,e){vi(t,n,e)}),ac=oo(function(t,n,e,r){vi(t,n,e,r)}),cc=No(function(t,n){var e={};if(null==t)return e;var r=!1;n=te(n,function(n){return n=Yi(n,t),r||(r=n.length>1),n}),ro(t,Oo(t),e),r&&(e=Pr(e,h|d|p,ko));for(var i=n.length;i--;)Li(e,n[i]);return e});var fc=No(function(t,n){return null==t?{}:function(t,n){return mi(t,n,function(n,e){return tc(t,e)})}(t,n)});function sc(t,n){if(null==t)return{};var e=te(Oo(t),function(t){return[t]});return n=$o(n),mi(t,e,function(t,e){return n(t,e[0])})}var lc=To(ic),hc=To(oc);function dc(t){return null==t?[]:me(t,ic(t))}var pc=fo(function(t,n,e){return n=n.toLowerCase(),t+(e?vc(n):n)});function vc(t){return Mc(Wa(t).toLowerCase())}function gc(t){return(t=Wa(t))&&t.replace(Gt,we).replace(_n,"")}var yc=fo(function(t,n,e){return t+(e?"-":"")+n.toLowerCase()}),mc=fo(function(t,n,e){return t+(e?" ":"")+n.toLowerCase()}),bc=co("toLowerCase");var _c=fo(function(t,n,e){return t+(e?"_":"")+n.toLowerCase()});var xc=fo(function(t,n,e){return t+(e?" ":"")+Mc(n)});var wc=fo(function(t,n,e){return t+(e?" ":"")+n.toUpperCase()}),Mc=co("toUpperCase");function Tc(t,n,e){return t=Wa(t),(n=e?o:n)===o?function(t){return Tn.test(t)}(t)?function(t){return t.match(wn)||[]}(t):function(t){return t.match(qt)||[]}(t):t.match(n)||[]}var Cc=Mi(function(t,n){try{return Yn(t,o,n)}catch(t){return Ma(t)?t:new Jt(t)}}),Sc=No(function(t,n){return Xn(n,function(n){n=su(n),Or(t,n,ea(t[n],t))}),t});function Ac(t){return function(){return t}}var kc=ho(),Ec=ho(!0);function Nc(t){return t}function Dc(t){return ci("function"==typeof t?t:Pr(t,h))}var Oc=Mi(function(t,n){return function(e){return ri(e,t,n)}}),Rc=Mi(function(t,n){return function(e){return ri(t,e,n)}});function jc(t,n,e){var r=ic(n),i=Gr(n,r);null!=e||Aa(n)&&(i.length||!r.length)||(e=n,n=t,t=this,i=Gr(n,ic(n)));var o=!(Aa(e)&&"chain"in e&&!e.chain),u=Ta(t);return Xn(i,function(e){var r=n[e];t[e]=r,u&&(t.prototype[e]=function(){var n=this.__chain__;if(o||n){var e=t(this.__wrapped__);return(e.__actions__=eo(this.__actions__)).push({func:r,args:arguments,thisArg:t}),e.__chain__=n,e}return r.apply(t,ne([this.value()],arguments))})}),t}function Pc(){}var $c=yo(te),Ic=yo(Zn),Lc=yo(ie);function zc(t){return Xo(t)?he(su(t)):function(t){return function(n){return Zr(n,t)}}(t)}var qc=bo(),Bc=bo(!0);function Uc(){return[]}function Fc(){return!1}var Hc=go(function(t,n){return t+n},0),Wc=wo("ceil"),Yc=go(function(t,n){return t/n},1),Vc=wo("floor");var Xc,Gc=go(function(t,n){return t*n},1),Zc=wo("round"),Qc=go(function(t,n){return t-n},0);return dr.after=function(t,n){if("function"!=typeof n)throw new on(c);return t=Ba(t),function(){if(--t<1)return n.apply(this,arguments)}},dr.ary=ta,dr.assign=Ya,dr.assignIn=Va,dr.assignInWith=Xa,dr.assignWith=Ga,dr.at=Za,dr.before=na,dr.bind=ea,dr.bindAll=Sc,dr.bindKey=ra,dr.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return ya(t)?t:[t]},dr.chain=zu,dr.chunk=function(t,n,e){n=(e?Vo(t,n,e):n===o)?1:We(Ba(n),0);var i=null==t?0:t.length;if(!i||n<1)return[];for(var u=0,a=0,c=r(Le(i/n));u<i;)c[a++]=Ni(t,u,u+=n);return c},dr.compact=function(t){for(var n=-1,e=null==t?0:t.length,r=0,i=[];++n<e;){var o=t[n];o&&(i[r++]=o)}return i},dr.concat=function(){var t=arguments.length;if(!t)return[];for(var n=r(t-1),e=arguments[0],i=t;i--;)n[i-1]=arguments[i];return ne(ya(e)?eo(e):[e],Hr(n,1))},dr.cond=function(t){var n=null==t?0:t.length,e=$o();return t=n?te(t,function(t){if("function"!=typeof t[1])throw new on(c);return[e(t[0]),t[1]]}):[],Mi(function(e){for(var r=-1;++r<n;){var i=t[r];if(Yn(i[0],this,e))return Yn(i[1],this,e)}})},dr.conforms=function(t){return function(t){var n=ic(t);return function(e){return $r(e,t,n)}}(Pr(t,h))},dr.constant=Ac,dr.countBy=Uu,dr.create=function(t,n){var e=pr(t);return null==n?e:Dr(e,n)},dr.curry=function t(n,e,r){var i=Co(n,_,o,o,o,o,o,e=r?o:e);return i.placeholder=t.placeholder,i},dr.curryRight=function t(n,e,r){var i=Co(n,x,o,o,o,o,o,e=r?o:e);return i.placeholder=t.placeholder,i},dr.debounce=ia,dr.defaults=Qa,dr.defaultsDeep=Ja,dr.defer=oa,dr.delay=ua,dr.difference=du,dr.differenceBy=pu,dr.differenceWith=vu,dr.drop=function(t,n,e){var r=null==t?0:t.length;return r?Ni(t,(n=e||n===o?1:Ba(n))<0?0:n,r):[]},dr.dropRight=function(t,n,e){var r=null==t?0:t.length;return r?Ni(t,0,(n=r-(n=e||n===o?1:Ba(n)))<0?0:n):[]},dr.dropRightWhile=function(t,n){return t&&t.length?qi(t,$o(n,3),!0,!0):[]},dr.dropWhile=function(t,n){return t&&t.length?qi(t,$o(n,3),!0):[]},dr.fill=function(t,n,e,r){var i=null==t?0:t.length;return i?(e&&"number"!=typeof e&&Vo(t,n,e)&&(e=0,r=i),function(t,n,e,r){var i=t.length;for((e=Ba(e))<0&&(e=-e>i?0:i+e),(r=r===o||r>i?i:Ba(r))<0&&(r+=i),r=e>r?0:Ua(r);e<r;)t[e++]=n;return t}(t,n,e,r)):[]},dr.filter=function(t,n){return(ya(t)?Qn:Fr)(t,$o(n,3))},dr.flatMap=function(t,n){return Hr(Zu(t,n),1)},dr.flatMapDeep=function(t,n){return Hr(Zu(t,n),R)},dr.flatMapDepth=function(t,n,e){return e=e===o?1:Ba(e),Hr(Zu(t,n),e)},dr.flatten=mu,dr.flattenDeep=function(t){return null!=t&&t.length?Hr(t,R):[]},dr.flattenDepth=function(t,n){return null!=t&&t.length?Hr(t,n=n===o?1:Ba(n)):[]},dr.flip=function(t){return Co(t,S)},dr.flow=kc,dr.flowRight=Ec,dr.fromPairs=function(t){for(var n=-1,e=null==t?0:t.length,r={};++n<e;){var i=t[n];r[i[0]]=i[1]}return r},dr.functions=function(t){return null==t?[]:Gr(t,ic(t))},dr.functionsIn=function(t){return null==t?[]:Gr(t,oc(t))},dr.groupBy=Vu,dr.initial=function(t){return null!=t&&t.length?Ni(t,0,-1):[]},dr.intersection=_u,dr.intersectionBy=xu,dr.intersectionWith=wu,dr.invert=nc,dr.invertBy=ec,dr.invokeMap=Xu,dr.iteratee=Dc,dr.keyBy=Gu,dr.keys=ic,dr.keysIn=oc,dr.map=Zu,dr.mapKeys=function(t,n){var e={};return n=$o(n,3),Vr(t,function(t,r,i){Or(e,n(t,r,i),t)}),e},dr.mapValues=function(t,n){var e={};return n=$o(n,3),Vr(t,function(t,r,i){Or(e,r,n(t,r,i))}),e},dr.matches=function(t){return di(Pr(t,h))},dr.matchesProperty=function(t,n){return pi(t,Pr(n,h))},dr.memoize=aa,dr.merge=uc,dr.mergeWith=ac,dr.method=Oc,dr.methodOf=Rc,dr.mixin=jc,dr.negate=ca,dr.nthArg=function(t){return t=Ba(t),Mi(function(n){return gi(n,t)})},dr.omit=cc,dr.omitBy=function(t,n){return sc(t,ca($o(n)))},dr.once=function(t){return na(2,t)},dr.orderBy=function(t,n,e,r){return null==t?[]:(ya(n)||(n=null==n?[]:[n]),ya(e=r?o:e)||(e=null==e?[]:[e]),yi(t,n,e))},dr.over=$c,dr.overArgs=fa,dr.overEvery=Ic,dr.overSome=Lc,dr.partial=sa,dr.partialRight=la,dr.partition=Qu,dr.pick=fc,dr.pickBy=sc,dr.property=zc,dr.propertyOf=function(t){return function(n){return null==t?o:Zr(t,n)}},dr.pull=Tu,dr.pullAll=Cu,dr.pullAllBy=function(t,n,e){return t&&t.length&&n&&n.length?bi(t,n,$o(e,2)):t},dr.pullAllWith=function(t,n,e){return t&&t.length&&n&&n.length?bi(t,n,o,e):t},dr.pullAt=Su,dr.range=qc,dr.rangeRight=Bc,dr.rearg=ha,dr.reject=function(t,n){return(ya(t)?Qn:Fr)(t,ca($o(n,3)))},dr.remove=function(t,n){var e=[];if(!t||!t.length)return e;var r=-1,i=[],o=t.length;for(n=$o(n,3);++r<o;){var u=t[r];n(u,r,t)&&(e.push(u),i.push(r))}return _i(t,i),e},dr.rest=function(t,n){if("function"!=typeof t)throw new on(c);return Mi(t,n=n===o?n:Ba(n))},dr.reverse=Au,dr.sampleSize=function(t,n,e){return n=(e?Vo(t,n,e):n===o)?1:Ba(n),(ya(t)?Cr:Ci)(t,n)},dr.set=function(t,n,e){return null==t?t:Si(t,n,e)},dr.setWith=function(t,n,e,r){return r="function"==typeof r?r:o,null==t?t:Si(t,n,e,r)},dr.shuffle=function(t){return(ya(t)?Sr:Ei)(t)},dr.slice=function(t,n,e){var r=null==t?0:t.length;return r?(e&&"number"!=typeof e&&Vo(t,n,e)?(n=0,e=r):(n=null==n?0:Ba(n),e=e===o?r:Ba(e)),Ni(t,n,e)):[]},dr.sortBy=Ju,dr.sortedUniq=function(t){return t&&t.length?ji(t):[]},dr.sortedUniqBy=function(t,n){return t&&t.length?ji(t,$o(n,2)):[]},dr.split=function(t,n,e){return e&&"number"!=typeof e&&Vo(t,n,e)&&(n=e=o),(e=e===o?I:e>>>0)?(t=Wa(t))&&("string"==typeof n||null!=n&&!Oa(n))&&!(n=$i(n))&&Ce(t)?Xi(Oe(t),0,e):t.split(n,e):[]},dr.spread=function(t,n){if("function"!=typeof t)throw new on(c);return n=null==n?0:We(Ba(n),0),Mi(function(e){var r=e[n],i=Xi(e,0,n);return r&&ne(i,r),Yn(t,this,i)})},dr.tail=function(t){var n=null==t?0:t.length;return n?Ni(t,1,n):[]},dr.take=function(t,n,e){return t&&t.length?Ni(t,0,(n=e||n===o?1:Ba(n))<0?0:n):[]},dr.takeRight=function(t,n,e){var r=null==t?0:t.length;return r?Ni(t,(n=r-(n=e||n===o?1:Ba(n)))<0?0:n,r):[]},dr.takeRightWhile=function(t,n){return t&&t.length?qi(t,$o(n,3),!1,!0):[]},dr.takeWhile=function(t,n){return t&&t.length?qi(t,$o(n,3)):[]},dr.tap=function(t,n){return n(t),t},dr.throttle=function(t,n,e){var r=!0,i=!0;if("function"!=typeof t)throw new on(c);return Aa(e)&&(r="leading"in e?!!e.leading:r,i="trailing"in e?!!e.trailing:i),ia(t,n,{leading:r,maxWait:n,trailing:i})},dr.thru=qu,dr.toArray=za,dr.toPairs=lc,dr.toPairsIn=hc,dr.toPath=function(t){return ya(t)?te(t,su):Pa(t)?[t]:eo(fu(Wa(t)))},dr.toPlainObject=Ha,dr.transform=function(t,n,e){var r=ya(t),i=r||xa(t)||$a(t);if(n=$o(n,4),null==e){var o=t&&t.constructor;e=i?r?new o:[]:Aa(t)&&Ta(o)?pr(On(t)):{}}return(i?Xn:Vr)(t,function(t,r,i){return n(e,t,r,i)}),e},dr.unary=function(t){return ta(t,1)},dr.union=ku,dr.unionBy=Eu,dr.unionWith=Nu,dr.uniq=function(t){return t&&t.length?Ii(t):[]},dr.uniqBy=function(t,n){return t&&t.length?Ii(t,$o(n,2)):[]},dr.uniqWith=function(t,n){return n="function"==typeof n?n:o,t&&t.length?Ii(t,o,n):[]},dr.unset=function(t,n){return null==t||Li(t,n)},dr.unzip=Du,dr.unzipWith=Ou,dr.update=function(t,n,e){return null==t?t:zi(t,n,Wi(e))},dr.updateWith=function(t,n,e,r){return r="function"==typeof r?r:o,null==t?t:zi(t,n,Wi(e),r)},dr.values=dc,dr.valuesIn=function(t){return null==t?[]:me(t,oc(t))},dr.without=Ru,dr.words=Tc,dr.wrap=function(t,n){return sa(Wi(n),t)},dr.xor=ju,dr.xorBy=Pu,dr.xorWith=$u,dr.zip=Iu,dr.zipObject=function(t,n){return Fi(t||[],n||[],kr)},dr.zipObjectDeep=function(t,n){return Fi(t||[],n||[],Si)},dr.zipWith=Lu,dr.entries=lc,dr.entriesIn=hc,dr.extend=Va,dr.extendWith=Xa,jc(dr,dr),dr.add=Hc,dr.attempt=Cc,dr.camelCase=pc,dr.capitalize=vc,dr.ceil=Wc,dr.clamp=function(t,n,e){return e===o&&(e=n,n=o),e!==o&&(e=(e=Fa(e))==e?e:0),n!==o&&(n=(n=Fa(n))==n?n:0),jr(Fa(t),n,e)},dr.clone=function(t){return Pr(t,p)},dr.cloneDeep=function(t){return Pr(t,h|p)},dr.cloneDeepWith=function(t,n){return Pr(t,h|p,n="function"==typeof n?n:o)},dr.cloneWith=function(t,n){return Pr(t,p,n="function"==typeof n?n:o)},dr.conformsTo=function(t,n){return null==n||$r(t,n,ic(n))},dr.deburr=gc,dr.defaultTo=function(t,n){return null==t||t!=t?n:t},dr.divide=Yc,dr.endsWith=function(t,n,e){t=Wa(t),n=$i(n);var r=t.length,i=e=e===o?r:jr(Ba(e),0,r);return(e-=n.length)>=0&&t.slice(e,i)==n},dr.eq=da,dr.escape=function(t){return(t=Wa(t))&&Ct.test(t)?t.replace(Mt,Me):t},dr.escapeRegExp=function(t){return(t=Wa(t))&&Rt.test(t)?t.replace(Ot,"\\$&"):t},dr.every=function(t,n,e){var r=ya(t)?Zn:Br;return e&&Vo(t,n,e)&&(n=o),r(t,$o(n,3))},dr.find=Fu,dr.findIndex=gu,dr.findKey=function(t,n){return ue(t,$o(n,3),Vr)},dr.findLast=Hu,dr.findLastIndex=yu,dr.findLastKey=function(t,n){return ue(t,$o(n,3),Xr)},dr.floor=Vc,dr.forEach=Wu,dr.forEachRight=Yu,dr.forIn=function(t,n){return null==t?t:Wr(t,$o(n,3),oc)},dr.forInRight=function(t,n){return null==t?t:Yr(t,$o(n,3),oc)},dr.forOwn=function(t,n){return t&&Vr(t,$o(n,3))},dr.forOwnRight=function(t,n){return t&&Xr(t,$o(n,3))},dr.get=Ka,dr.gt=pa,dr.gte=va,dr.has=function(t,n){return null!=t&&Fo(t,n,ti)},dr.hasIn=tc,dr.head=bu,dr.identity=Nc,dr.includes=function(t,n,e,r){t=ba(t)?t:dc(t),e=e&&!r?Ba(e):0;var i=t.length;return e<0&&(e=We(i+e,0)),ja(t)?e<=i&&t.indexOf(n,e)>-1:!!i&&ce(t,n,e)>-1},dr.indexOf=function(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=null==e?0:Ba(e);return i<0&&(i=We(r+i,0)),ce(t,n,i)},dr.inRange=function(t,n,e){return n=qa(n),e===o?(e=n,n=0):e=qa(e),function(t,n,e){return t>=Ye(n,e)&&t<We(n,e)}(t=Fa(t),n,e)},dr.invoke=rc,dr.isArguments=ga,dr.isArray=ya,dr.isArrayBuffer=ma,dr.isArrayLike=ba,dr.isArrayLikeObject=_a,dr.isBoolean=function(t){return!0===t||!1===t||ka(t)&&Jr(t)==H},dr.isBuffer=xa,dr.isDate=wa,dr.isElement=function(t){return ka(t)&&1===t.nodeType&&!Da(t)},dr.isEmpty=function(t){if(null==t)return!0;if(ba(t)&&(ya(t)||"string"==typeof t||"function"==typeof t.splice||xa(t)||$a(t)||ga(t)))return!t.length;var n=Uo(t);if(n==Z||n==et)return!t.size;if(Qo(t))return!fi(t).length;for(var e in t)if(ln.call(t,e))return!1;return!0},dr.isEqual=function(t,n){return oi(t,n)},dr.isEqualWith=function(t,n,e){var r=(e="function"==typeof e?e:o)?e(t,n):o;return r===o?oi(t,n,o,e):!!r},dr.isError=Ma,dr.isFinite=function(t){return"number"==typeof t&&Ue(t)},dr.isFunction=Ta,dr.isInteger=Ca,dr.isLength=Sa,dr.isMap=Ea,dr.isMatch=function(t,n){return t===n||ui(t,n,Lo(n))},dr.isMatchWith=function(t,n,e){return e="function"==typeof e?e:o,ui(t,n,Lo(n),e)},dr.isNaN=function(t){return Na(t)&&t!=+t},dr.isNative=function(t){if(Zo(t))throw new Jt(a);return ai(t)},dr.isNil=function(t){return null==t},dr.isNull=function(t){return null===t},dr.isNumber=Na,dr.isObject=Aa,dr.isObjectLike=ka,dr.isPlainObject=Da,dr.isRegExp=Oa,dr.isSafeInteger=function(t){return Ca(t)&&t>=-j&&t<=j},dr.isSet=Ra,dr.isString=ja,dr.isSymbol=Pa,dr.isTypedArray=$a,dr.isUndefined=function(t){return t===o},dr.isWeakMap=function(t){return ka(t)&&Uo(t)==ut},dr.isWeakSet=function(t){return ka(t)&&Jr(t)==at},dr.join=function(t,n){return null==t?"":Fe.call(t,n)},dr.kebabCase=yc,dr.last=Mu,dr.lastIndexOf=function(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=r;return e!==o&&(i=(i=Ba(e))<0?We(r+i,0):Ye(i,r-1)),n==n?function(t,n,e){for(var r=e+1;r--;)if(t[r]===n)return r;return r}(t,n,i):ae(t,se,i,!0)},dr.lowerCase=mc,dr.lowerFirst=bc,dr.lt=Ia,dr.lte=La,dr.max=function(t){return t&&t.length?Ur(t,Nc,Kr):o},dr.maxBy=function(t,n){return t&&t.length?Ur(t,$o(n,2),Kr):o},dr.mean=function(t){return le(t,Nc)},dr.meanBy=function(t,n){return le(t,$o(n,2))},dr.min=function(t){return t&&t.length?Ur(t,Nc,li):o},dr.minBy=function(t,n){return t&&t.length?Ur(t,$o(n,2),li):o},dr.stubArray=Uc,dr.stubFalse=Fc,dr.stubObject=function(){return{}},dr.stubString=function(){return""},dr.stubTrue=function(){return!0},dr.multiply=Gc,dr.nth=function(t,n){return t&&t.length?gi(t,Ba(n)):o},dr.noConflict=function(){return jn._===this&&(jn._=gn),this},dr.noop=Pc,dr.now=Ku,dr.pad=function(t,n,e){t=Wa(t);var r=(n=Ba(n))?De(t):0;if(!n||r>=n)return t;var i=(n-r)/2;return mo(ze(i),e)+t+mo(Le(i),e)},dr.padEnd=function(t,n,e){t=Wa(t);var r=(n=Ba(n))?De(t):0;return n&&r<n?t+mo(n-r,e):t},dr.padStart=function(t,n,e){t=Wa(t);var r=(n=Ba(n))?De(t):0;return n&&r<n?mo(n-r,e)+t:t},dr.parseInt=function(t,n,e){return e||null==n?n=0:n&&(n=+n),Xe(Wa(t).replace(Pt,""),n||0)},dr.random=function(t,n,e){if(e&&"boolean"!=typeof e&&Vo(t,n,e)&&(n=e=o),e===o&&("boolean"==typeof n?(e=n,n=o):"boolean"==typeof t&&(e=t,t=o)),t===o&&n===o?(t=0,n=1):(t=qa(t),n===o?(n=t,t=0):n=qa(n)),t>n){var r=t;t=n,n=r}if(e||t%1||n%1){var i=Ge();return Ye(t+i*(n-t+Nn("1e-"+((i+"").length-1))),n)}return xi(t,n)},dr.reduce=function(t,n,e){var r=ya(t)?ee:pe,i=arguments.length<3;return r(t,$o(n,4),e,i,zr)},dr.reduceRight=function(t,n,e){var r=ya(t)?re:pe,i=arguments.length<3;return r(t,$o(n,4),e,i,qr)},dr.repeat=function(t,n,e){return n=(e?Vo(t,n,e):n===o)?1:Ba(n),wi(Wa(t),n)},dr.replace=function(){var t=arguments,n=Wa(t[0]);return t.length<3?n:n.replace(t[1],t[2])},dr.result=function(t,n,e){var r=-1,i=(n=Yi(n,t)).length;for(i||(i=1,t=o);++r<i;){var u=null==t?o:t[su(n[r])];u===o&&(r=i,u=e),t=Ta(u)?u.call(t):u}return t},dr.round=Zc,dr.runInContext=t,dr.sample=function(t){return(ya(t)?Tr:Ti)(t)},dr.size=function(t){if(null==t)return 0;if(ba(t))return ja(t)?De(t):t.length;var n=Uo(t);return n==Z||n==et?t.size:fi(t).length},dr.snakeCase=_c,dr.some=function(t,n,e){var r=ya(t)?ie:Di;return e&&Vo(t,n,e)&&(n=o),r(t,$o(n,3))},dr.sortedIndex=function(t,n){return Oi(t,n)},dr.sortedIndexBy=function(t,n,e){return Ri(t,n,$o(e,2))},dr.sortedIndexOf=function(t,n){var e=null==t?0:t.length;if(e){var r=Oi(t,n);if(r<e&&da(t[r],n))return r}return-1},dr.sortedLastIndex=function(t,n){return Oi(t,n,!0)},dr.sortedLastIndexBy=function(t,n,e){return Ri(t,n,$o(e,2),!0)},dr.sortedLastIndexOf=function(t,n){if(null!=t&&t.length){var e=Oi(t,n,!0)-1;if(da(t[e],n))return e}return-1},dr.startCase=xc,dr.startsWith=function(t,n,e){return t=Wa(t),e=null==e?0:jr(Ba(e),0,t.length),n=$i(n),t.slice(e,e+n.length)==n},dr.subtract=Qc,dr.sum=function(t){return t&&t.length?ve(t,Nc):0},dr.sumBy=function(t,n){return t&&t.length?ve(t,$o(n,2)):0},dr.template=function(t,n,e){var r=dr.templateSettings;e&&Vo(t,n,e)&&(n=o),t=Wa(t),n=Xa({},n,r,So);var i,u,a=Xa({},n.imports,r.imports,So),c=ic(a),f=me(a,c),s=0,l=n.interpolate||Zt,h="__p += '",d=en((n.escape||Zt).source+"|"+l.source+"|"+(l===kt?Ut:Zt).source+"|"+(n.evaluate||Zt).source+"|$","g"),p="//# sourceURL="+("sourceURL"in n?n.sourceURL:"lodash.templateSources["+ ++Sn+"]")+"\n";t.replace(d,function(n,e,r,o,a,c){return r||(r=o),h+=t.slice(s,c).replace(Qt,Te),e&&(i=!0,h+="' +\n__e("+e+") +\n'"),a&&(u=!0,h+="';\n"+a+";\n__p += '"),r&&(h+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),s=c+n.length,n}),h+="';\n";var v=n.variable;v||(h="with (obj) {\n"+h+"\n}\n"),h=(u?h.replace(bt,""):h).replace(_t,"$1").replace(xt,"$1;"),h="function("+(v||"obj")+") {\n"+(v?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(u?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+h+"return __p\n}";var g=Cc(function(){return Kt(c,p+"return "+h).apply(o,f)});if(g.source=h,Ma(g))throw g;return g},dr.times=function(t,n){if((t=Ba(t))<1||t>j)return[];var e=I,r=Ye(t,I);n=$o(n),t-=I;for(var i=ge(r,n);++e<t;)n(e);return i},dr.toFinite=qa,dr.toInteger=Ba,dr.toLength=Ua,dr.toLower=function(t){return Wa(t).toLowerCase()},dr.toNumber=Fa,dr.toSafeInteger=function(t){return t?jr(Ba(t),-j,j):0===t?t:0},dr.toString=Wa,dr.toUpper=function(t){return Wa(t).toUpperCase()},dr.trim=function(t,n,e){if((t=Wa(t))&&(e||n===o))return t.replace(jt,"");if(!t||!(n=$i(n)))return t;var r=Oe(t),i=Oe(n);return Xi(r,_e(r,i),xe(r,i)+1).join("")},dr.trimEnd=function(t,n,e){if((t=Wa(t))&&(e||n===o))return t.replace($t,"");if(!t||!(n=$i(n)))return t;var r=Oe(t);return Xi(r,0,xe(r,Oe(n))+1).join("")},dr.trimStart=function(t,n,e){if((t=Wa(t))&&(e||n===o))return t.replace(Pt,"");if(!t||!(n=$i(n)))return t;var r=Oe(t);return Xi(r,_e(r,Oe(n))).join("")},dr.truncate=function(t,n){var e=A,r=k;if(Aa(n)){var i="separator"in n?n.separator:i;e="length"in n?Ba(n.length):e,r="omission"in n?$i(n.omission):r}var u=(t=Wa(t)).length;if(Ce(t)){var a=Oe(t);u=a.length}if(e>=u)return t;var c=e-De(r);if(c<1)return r;var f=a?Xi(a,0,c).join(""):t.slice(0,c);if(i===o)return f+r;if(a&&(c+=f.length-c),Oa(i)){if(t.slice(c).search(i)){var s,l=f;for(i.global||(i=en(i.source,Wa(Ft.exec(i))+"g")),i.lastIndex=0;s=i.exec(l);)var h=s.index;f=f.slice(0,h===o?c:h)}}else if(t.indexOf($i(i),c)!=c){var d=f.lastIndexOf(i);d>-1&&(f=f.slice(0,d))}return f+r},dr.unescape=function(t){return(t=Wa(t))&&Tt.test(t)?t.replace(wt,Re):t},dr.uniqueId=function(t){var n=++hn;return Wa(t)+n},dr.upperCase=wc,dr.upperFirst=Mc,dr.each=Wu,dr.eachRight=Yu,dr.first=bu,jc(dr,(Xc={},Vr(dr,function(t,n){ln.call(dr.prototype,n)||(Xc[n]=t)}),Xc),{chain:!1}),dr.VERSION="4.17.11",Xn(["bind","bindKey","curry","curryRight","partial","partialRight"],function(t){dr[t].placeholder=dr}),Xn(["drop","take"],function(t,n){yr.prototype[t]=function(e){e=e===o?1:We(Ba(e),0);var r=this.__filtered__&&!n?new yr(this):this.clone();return r.__filtered__?r.__takeCount__=Ye(e,r.__takeCount__):r.__views__.push({size:Ye(e,I),type:t+(r.__dir__<0?"Right":"")}),r},yr.prototype[t+"Right"]=function(n){return this.reverse()[t](n).reverse()}}),Xn(["filter","map","takeWhile"],function(t,n){var e=n+1,r=e==D||3==e;yr.prototype[t]=function(t){var n=this.clone();return n.__iteratees__.push({iteratee:$o(t,3),type:e}),n.__filtered__=n.__filtered__||r,n}}),Xn(["head","last"],function(t,n){var e="take"+(n?"Right":"");yr.prototype[t]=function(){return this[e](1).value()[0]}}),Xn(["initial","tail"],function(t,n){var e="drop"+(n?"":"Right");yr.prototype[t]=function(){return this.__filtered__?new yr(this):this[e](1)}}),yr.prototype.compact=function(){return this.filter(Nc)},yr.prototype.find=function(t){return this.filter(t).head()},yr.prototype.findLast=function(t){return this.reverse().find(t)},yr.prototype.invokeMap=Mi(function(t,n){return"function"==typeof t?new yr(this):this.map(function(e){return ri(e,t,n)})}),yr.prototype.reject=function(t){return this.filter(ca($o(t)))},yr.prototype.slice=function(t,n){t=Ba(t);var e=this;return e.__filtered__&&(t>0||n<0)?new yr(e):(t<0?e=e.takeRight(-t):t&&(e=e.drop(t)),n!==o&&(e=(n=Ba(n))<0?e.dropRight(-n):e.take(n-t)),e)},yr.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},yr.prototype.toArray=function(){return this.take(I)},Vr(yr.prototype,function(t,n){var e=/^(?:filter|find|map|reject)|While$/.test(n),r=/^(?:head|last)$/.test(n),i=dr[r?"take"+("last"==n?"Right":""):n],u=r||/^find/.test(n);i&&(dr.prototype[n]=function(){var n=this.__wrapped__,a=r?[1]:arguments,c=n instanceof yr,f=a[0],s=c||ya(n),l=function(t){var n=i.apply(dr,ne([t],a));return r&&h?n[0]:n};s&&e&&"function"==typeof f&&1!=f.length&&(c=s=!1);var h=this.__chain__,d=!!this.__actions__.length,p=u&&!h,v=c&&!d;if(!u&&s){n=v?n:new yr(this);var g=t.apply(n,a);return g.__actions__.push({func:qu,args:[l],thisArg:o}),new gr(g,h)}return p&&v?t.apply(this,a):(g=this.thru(l),p?r?g.value()[0]:g.value():g)})}),Xn(["pop","push","shift","sort","splice","unshift"],function(t){var n=un[t],e=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);dr.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var i=this.value();return n.apply(ya(i)?i:[],t)}return this[e](function(e){return n.apply(ya(e)?e:[],t)})}}),Vr(yr.prototype,function(t,n){var e=dr[n];if(e){var r=e.name+"";(ir[r]||(ir[r]=[])).push({name:n,func:e})}}),ir[po(o,m).name]=[{name:"wrapper",func:o}],yr.prototype.clone=function(){var t=new yr(this.__wrapped__);return t.__actions__=eo(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=eo(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=eo(this.__views__),t},yr.prototype.reverse=function(){if(this.__filtered__){var t=new yr(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},yr.prototype.value=function(){var t=this.__wrapped__.value(),n=this.__dir__,e=ya(t),r=n<0,i=e?t.length:0,o=function(t,n,e){for(var r=-1,i=e.length;++r<i;){var o=e[r],u=o.size;switch(o.type){case"drop":t+=u;break;case"dropRight":n-=u;break;case"take":n=Ye(n,t+u);break;case"takeRight":t=We(t,n-u)}}return{start:t,end:n}}(0,i,this.__views__),u=o.start,a=o.end,c=a-u,f=r?a:u-1,s=this.__iteratees__,l=s.length,h=0,d=Ye(c,this.__takeCount__);if(!e||!r&&i==c&&d==c)return Bi(t,this.__actions__);var p=[];t:for(;c--&&h<d;){for(var v=-1,g=t[f+=n];++v<l;){var y=s[v],m=y.iteratee,b=y.type,_=m(g);if(b==O)g=_;else if(!_){if(b==D)continue t;break t}}p[h++]=g}return p},dr.prototype.at=Bu,dr.prototype.chain=function(){return zu(this)},dr.prototype.commit=function(){return new gr(this.value(),this.__chain__)},dr.prototype.next=function(){this.__values__===o&&(this.__values__=za(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?o:this.__values__[this.__index__++]}},dr.prototype.plant=function(t){for(var n,e=this;e instanceof vr;){var r=hu(e);r.__index__=0,r.__values__=o,n?i.__wrapped__=r:n=r;var i=r;e=e.__wrapped__}return i.__wrapped__=t,n},dr.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof yr){var n=t;return this.__actions__.length&&(n=new yr(this)),(n=n.reverse()).__actions__.push({func:qu,args:[Au],thisArg:o}),new gr(n,this.__chain__)}return this.thru(Au)},dr.prototype.toJSON=dr.prototype.valueOf=dr.prototype.value=function(){return Bi(this.__wrapped__,this.__actions__)},dr.prototype.first=dr.prototype.head,zn&&(dr.prototype[zn]=function(){return this}),dr}();jn._=je,(i=function(){return je}.call(n,e,n,r))===o||(r.exports=i)}).call(this)}).call(this,e(6),e(7)(t))},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(11),i=function(){return function(t,n){this.cells={},this.cells=t,this.player=n}}();n.Win=i;var o=function(){function t(){this.moves=new r.default,this.cells={}}return t.nextPlayer=function(t){return 1===t?2:1},t.prototype.resize=function(t,n,e){this.width=t,this.height=n,this.winSize=e},t.prototype.deserialize=function(t){this.width=t.width,this.height=t.height,this.winSize=t.winSize,this.moves=new r.default,this.moves.deserialize(t.moves),this.cells=t.cells,this.win=t.win},t.prototype.get=function(t,n){return t<0||n<0||t>=this.width||n>=this.height?-1:this.cells[this.index(t,n)]},t.prototype.set=function(t,n,e){var r=this.index(t,n);if(this.cells[r]&&e)throw new Error("Cell ("+t+","+n+") is already set");this.cells[r]=e,this.addMoves(t,n)},t.prototype.clear=function(t,n){var e=this.index(t,n);delete this.cells[e],this.addMoves(t,n)},t.prototype.setIndex=function(t,n){var e=this.cell(t);this.set(e.x,e.y,n)},t.prototype.index=function(t,n){return n*this.width+t},t.prototype.cell=function(t){var n=Number(t);return{x:n%this.width,y:Math.floor(n/this.width)}},t.prototype.print=function(){for(var t=0;t<this.height;t++){for(var n="",e=0;e<this.width;e++){var r=this.get(e,t);n+=r?r+" ":". "}console.log(n)}},t.prototype.getMoves=function(){return this.moves.getKeys()},t.prototype.findWinnerAt=function(t){var n=this.cell(t);return this.findWinner(n.x,n.y)},t.prototype.findWinner=function(t,n){var e=this.checkCell(t,n,-1,0,1,0);return e||(e=this.checkCell(t,n,0,-1,0,1)),e||(e=this.checkCell(t,n,-1,1,1,-1)),e||(e=this.checkCell(t,n,-1,-1,1,1)),this.win=e,e},t.prototype.checkCell=function(t,n,e,r,o,u){var a=this.get(t,n);if(!a)throw new Error("Empty cell at "+t+","+n);for(var c=0,f=t,s=n,l={};f>=0&&f<this.width&&s>=0&&s<this.height&&this.get(f,s)===a;)c++,l[this.index(f,s)]=!0,f+=e,s+=r;for(var h=t+o,d=n+u;h>=0&&h<this.width&&d>=0&&d<this.height&&this.get(h,d)===a;)c++,l[this.index(h,d)]=!0,h+=o,d+=u;return c>=this.winSize?new i(l,a):null},t.prototype.randomPlayout=function(n){for(;;){var e=this.getMoves();if(0==e.length)break;var r=e[Math.floor(Math.random()*e.length)],i=this.cell(r);this.set(i.x,i.y,n);var o=this.findWinner(i.x,i.y);if(o)return o;n=t.nextPlayer(n)}return null},t}();n.Board=o},function(t,n,e){"use strict";e.r(n);var r=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},i=function(t){var n;return 1===t.length&&(n=t,t=function(t,e){return r(n(t),e)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)<0?r=o+1:i=o}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)>0?i=o:r=o+1}return r}}};var o=i(r),u=o.right,a=o.left,c=u,f=function(t,n){null==n&&(n=s);for(var e=0,r=t.length-1,i=t[0],o=new Array(r<0?0:r);e<r;)o[e]=n(i,i=t[++e]);return o};function s(t,n){return[t,n]}var l=function(t,n,e){var r,i,o,u,a=t.length,c=n.length,f=new Array(a*c);for(null==e&&(e=s),r=o=0;r<a;++r)for(u=t[r],i=0;i<c;++i,++o)f[o]=e(u,n[i]);return f},h=function(t,n){return n<t?-1:n>t?1:n>=t?0:NaN},d=function(t){return null===t?NaN:+t},p=function(t,n){var e,r,i=t.length,o=0,u=-1,a=0,c=0;if(null==n)for(;++u<i;)isNaN(e=d(t[u]))||(c+=(r=e-a)*(e-(a+=r/++o)));else for(;++u<i;)isNaN(e=d(n(t[u],u,t)))||(c+=(r=e-a)*(e-(a+=r/++o)));if(o>1)return c/(o-1)},v=function(t,n){var e=p(t,n);return e?Math.sqrt(e):e},g=function(t,n){var e,r,i,o=t.length,u=-1;if(null==n){for(;++u<o;)if(null!=(e=t[u])&&e>=e)for(r=i=e;++u<o;)null!=(e=t[u])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++u<o;)if(null!=(e=n(t[u],u,t))&&e>=e)for(r=i=e;++u<o;)null!=(e=n(t[u],u,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]},y=Array.prototype,m=y.slice,b=y.map,_=function(t){return function(){return t}},x=function(t){return t},w=function(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o},M=Math.sqrt(50),T=Math.sqrt(10),C=Math.sqrt(2),S=function(t,n,e){var r,i,o,u,a=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(u=A(t,n,e))||!isFinite(u))return[];if(u>0)for(t=Math.ceil(t/u),n=Math.floor(n/u),o=new Array(i=Math.ceil(n-t+1));++a<i;)o[a]=(t+a)*u;else for(t=Math.floor(t*u),n=Math.ceil(n*u),o=new Array(i=Math.ceil(t-n+1));++a<i;)o[a]=(t-a)/u;return r&&o.reverse(),o};function A(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=M?10:o>=T?5:o>=C?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=M?10:o>=T?5:o>=C?2:1)}function k(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=M?i*=10:o>=T?i*=5:o>=C&&(i*=2),n<t?-i:i}var E=function(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1},N=function(){var t=x,n=g,e=E;function r(r){var i,o,u=r.length,a=new Array(u);for(i=0;i<u;++i)a[i]=t(r[i],i,r);var f=n(a),s=f[0],l=f[1],h=e(a,s,l);Array.isArray(h)||(h=k(s,l,h),h=w(Math.ceil(s/h)*h,l,h));for(var d=h.length;h[0]<=s;)h.shift(),--d;for(;h[d-1]>l;)h.pop(),--d;var p,v=new Array(d+1);for(i=0;i<=d;++i)(p=v[i]=[]).x0=i>0?h[i-1]:s,p.x1=i<d?h[i]:l;for(i=0;i<u;++i)s<=(o=a[i])&&o<=l&&v[c(h,o,0,d)].push(r[i]);return v}return r.value=function(n){return arguments.length?(t="function"==typeof n?n:_(n),r):t},r.domain=function(t){return arguments.length?(n="function"==typeof t?t:_([t[0],t[1]]),r):n},r.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:Array.isArray(t)?_(m.call(t)):_(t),r):e},r},D=function(t,n,e){if(null==e&&(e=d),r=t.length){if((n=+n)<=0||r<2)return+e(t[0],0,t);if(n>=1)return+e(t[r-1],r-1,t);var r,i=(r-1)*n,o=Math.floor(i),u=+e(t[o],o,t);return u+(+e(t[o+1],o+1,t)-u)*(i-o)}},O=function(t,n,e){return t=b.call(t,d).sort(r),Math.ceil((e-n)/(2*(D(t,.75)-D(t,.25))*Math.pow(t.length,-1/3)))},R=function(t,n,e){return Math.ceil((e-n)/(3.5*v(t)*Math.pow(t.length,-1/3)))},j=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&e>r&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&e>r&&(r=e);return r},P=function(t,n){var e,r=t.length,i=r,o=-1,u=0;if(null==n)for(;++o<r;)isNaN(e=d(t[o]))?--i:u+=e;else for(;++o<r;)isNaN(e=d(n(t[o],o,t)))?--i:u+=e;if(i)return u/i},$=function(t,n){var e,i=t.length,o=-1,u=[];if(null==n)for(;++o<i;)isNaN(e=d(t[o]))||u.push(e);else for(;++o<i;)isNaN(e=d(n(t[o],o,t)))||u.push(e);return D(u.sort(r),.5)},I=function(t){for(var n,e,r,i=t.length,o=-1,u=0;++o<i;)u+=t[o].length;for(e=new Array(u);--i>=0;)for(n=(r=t[i]).length;--n>=0;)e[--u]=r[n];return e},L=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&r>e&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&r>e&&(r=e);return r},z=function(t,n){for(var e=n.length,r=new Array(e);e--;)r[e]=t[n[e]];return r},q=function(t,n){if(e=t.length){var e,i,o=0,u=0,a=t[u];for(null==n&&(n=r);++o<e;)(n(i=t[o],a)<0||0!==n(a,a))&&(a=i,u=o);return 0===n(a,a)?u:void 0}},B=function(t,n,e){for(var r,i,o=(null==e?t.length:e)-(n=null==n?0:+n);o;)i=Math.random()*o--|0,r=t[o+n],t[o+n]=t[i+n],t[i+n]=r;return t},U=function(t,n){var e,r=t.length,i=-1,o=0;if(null==n)for(;++i<r;)(e=+t[i])&&(o+=e);else for(;++i<r;)(e=+n(t[i],i,t))&&(o+=e);return o},F=function(t){if(!(i=t.length))return[];for(var n=-1,e=L(t,H),r=new Array(e);++n<e;)for(var i,o=-1,u=r[n]=new Array(i);++o<i;)u[o]=t[o][n];return r};function H(t){return t.length}var W=function(){return F(arguments)},Y=Array.prototype.slice,V=function(t){return t},X=1,G=2,Z=3,Q=4,J=1e-6;function K(t){return"translate("+(t+.5)+",0)"}function tt(t){return"translate(0,"+(t+.5)+")"}function nt(){return!this.__axis}function et(t,n){var e=[],r=null,i=null,o=6,u=6,a=3,c=t===X||t===Q?-1:1,f=t===Q||t===G?"x":"y",s=t===X||t===Z?K:tt;function l(l){var h=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,d=null==i?n.tickFormat?n.tickFormat.apply(n,e):V:i,p=Math.max(o,0)+a,v=n.range(),g=+v[0]+.5,y=+v[v.length-1]+.5,m=(n.bandwidth?function(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}:function(t){return function(n){return+t(n)}})(n.copy()),b=l.selection?l.selection():l,_=b.selectAll(".domain").data([null]),x=b.selectAll(".tick").data(h,n).order(),w=x.exit(),M=x.enter().append("g").attr("class","tick"),T=x.select("line"),C=x.select("text");_=_.merge(_.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),x=x.merge(M),T=T.merge(M.append("line").attr("stroke","currentColor").attr(f+"2",c*o)),C=C.merge(M.append("text").attr("fill","currentColor").attr(f,c*p).attr("dy",t===X?"0em":t===Z?"0.71em":"0.32em")),l!==b&&(_=_.transition(l),x=x.transition(l),T=T.transition(l),C=C.transition(l),w=w.transition(l).attr("opacity",J).attr("transform",function(t){return isFinite(t=m(t))?s(t):this.getAttribute("transform")}),M.attr("opacity",J).attr("transform",function(t){var n=this.parentNode.__axis;return s(n&&isFinite(n=n(t))?n:m(t))})),w.remove(),_.attr("d",t===Q||t==G?u?"M"+c*u+","+g+"H0.5V"+y+"H"+c*u:"M0.5,"+g+"V"+y:u?"M"+g+","+c*u+"V0.5H"+y+"V"+c*u:"M"+g+",0.5H"+y),x.attr("opacity",1).attr("transform",function(t){return s(m(t))}),T.attr(f+"2",c*o),C.attr(f,c*p).text(d),b.filter(nt).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===G?"start":t===Q?"end":"middle"),b.each(function(){this.__axis=m})}return l.scale=function(t){return arguments.length?(n=t,l):n},l.ticks=function(){return e=Y.call(arguments),l},l.tickArguments=function(t){return arguments.length?(e=null==t?[]:Y.call(t),l):e.slice()},l.tickValues=function(t){return arguments.length?(r=null==t?null:Y.call(t),l):r&&r.slice()},l.tickFormat=function(t){return arguments.length?(i=t,l):i},l.tickSize=function(t){return arguments.length?(o=u=+t,l):o},l.tickSizeInner=function(t){return arguments.length?(o=+t,l):o},l.tickSizeOuter=function(t){return arguments.length?(u=+t,l):u},l.tickPadding=function(t){return arguments.length?(a=+t,l):a},l}function rt(t){return et(X,t)}function it(t){return et(G,t)}function ot(t){return et(Z,t)}function ut(t){return et(Q,t)}var at={value:function(){}};function ct(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new ft(r)}function ft(t){this._=t}function st(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function lt(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=at,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}ft.prototype=ct.prototype={constructor:ft,on:function(t,n){var e,r,i=this._,o=(r=i,(t+"").trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");if(e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}})),u=-1,a=o.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++u<a;)if(e=(t=o[u]).type)i[e]=lt(i[e],t.name,n);else if(null==n)for(e in i)i[e]=lt(i[e],t.name,null);return this}for(;++u<a;)if((e=(t=o[u]).type)&&(e=st(i[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new ft(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var ht=ct,dt="http://www.w3.org/1999/xhtml",pt={svg:"http://www.w3.org/2000/svg",xhtml:dt,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},vt=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),pt.hasOwnProperty(n)?{space:pt[n],local:t}:t};var gt=function(t){var n=vt(t);return(n.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===dt&&n.documentElement.namespaceURI===dt?n.createElement(t):n.createElementNS(e,t)}})(n)};function yt(){}var mt=function(t){return null==t?yt:function(){return this.querySelector(t)}};function bt(){return[]}var _t=function(t){return null==t?bt:function(){return this.querySelectorAll(t)}},xt=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var wt=document.documentElement;if(!wt.matches){var Mt=wt.webkitMatchesSelector||wt.msMatchesSelector||wt.mozMatchesSelector||wt.oMatchesSelector;xt=function(t){return function(){return Mt.call(this,t)}}}}var Tt=xt,Ct=function(t){return new Array(t.length)};function St(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}St.prototype={constructor:St,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var At="$";function kt(t,n,e,r,i,o){for(var u,a=0,c=n.length,f=o.length;a<f;++a)(u=n[a])?(u.__data__=o[a],r[a]=u):e[a]=new St(t,o[a]);for(;a<c;++a)(u=n[a])&&(i[a]=u)}function Et(t,n,e,r,i,o,u){var a,c,f,s={},l=n.length,h=o.length,d=new Array(l);for(a=0;a<l;++a)(c=n[a])&&(d[a]=f=At+u.call(c,c.__data__,a,n),f in s?i[a]=c:s[f]=c);for(a=0;a<h;++a)(c=s[f=At+u.call(t,o[a],a,o)])?(r[a]=c,c.__data__=o[a],s[f]=null):e[a]=new St(t,o[a]);for(a=0;a<l;++a)(c=n[a])&&s[d[a]]===c&&(i[a]=c)}function Nt(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var Dt=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function Ot(t,n){return t.style.getPropertyValue(n)||Dt(t).getComputedStyle(t,null).getPropertyValue(n)}function Rt(t){return t.trim().split(/^|\s+/)}function jt(t){return t.classList||new Pt(t)}function Pt(t){this._node=t,this._names=Rt(t.getAttribute("class")||"")}function $t(t,n){for(var e=jt(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function It(t,n){for(var e=jt(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}Pt.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function Lt(){this.textContent=""}function zt(){this.innerHTML=""}function qt(){this.nextSibling&&this.parentNode.appendChild(this)}function Bt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Ut(){return null}function Ft(){var t=this.parentNode;t&&t.removeChild(this)}function Ht(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function Wt(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var Yt={},Vt=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Yt={mouseenter:"mouseover",mouseleave:"mouseout"}));function Xt(t,n,e){return t=Gt(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function Gt(t,n,e){return function(r){var i=Vt;Vt=r;try{t.call(this,this.__data__,n,e)}finally{Vt=i}}}function Zt(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function Qt(t,n,e){var r=Yt.hasOwnProperty(t.type)?Xt:Gt;return function(i,o,u){var a,c=this.__on,f=r(n,o,u);if(c)for(var s=0,l=c.length;s<l;++s)if((a=c[s]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=f,a.capture=e),void(a.value=n);this.addEventListener(t.type,f,e),a={type:t.type,name:t.name,value:n,listener:f,capture:e},c?c.push(a):this.__on=[a]}}function Jt(t,n,e,r){var i=Vt;t.sourceEvent=Vt,Vt=t;try{return n.apply(e,r)}finally{Vt=i}}function Kt(t,n,e){var r=Dt(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}var tn=[null];function nn(t,n){this._groups=t,this._parents=n}function en(){return new nn([[document.documentElement]],tn)}nn.prototype=en.prototype={constructor:nn,select:function(t){"function"!=typeof t&&(t=mt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u,a=n[i],c=a.length,f=r[i]=new Array(c),s=0;s<c;++s)(o=a[s])&&(u=t.call(o,o.__data__,s,a))&&("__data__"in o&&(u.__data__=o.__data__),f[s]=u);return new nn(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=_t(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var u,a=n[o],c=a.length,f=0;f<c;++f)(u=a[f])&&(r.push(t.call(u,u.__data__,f,a)),i.push(u));return new nn(r,i)},filter:function(t){"function"!=typeof t&&(t=Tt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,c=r[i]=[],f=0;f<a;++f)(o=u[f])&&t.call(o,o.__data__,f,u)&&c.push(o);return new nn(r,this._parents)},data:function(t,n){if(!t)return p=new Array(this.size()),s=-1,this.each(function(t){p[++s]=t}),p;var e,r=n?Et:kt,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var u=o.length,a=new Array(u),c=new Array(u),f=new Array(u),s=0;s<u;++s){var l=i[s],h=o[s],d=h.length,p=t.call(l,l&&l.__data__,s,i),v=p.length,g=c[s]=new Array(v),y=a[s]=new Array(v);r(l,h,g,y,f[s]=new Array(d),p,n);for(var m,b,_=0,x=0;_<v;++_)if(m=g[_]){for(_>=x&&(x=_+1);!(b=y[x])&&++x<v;);m._next=b||null}}return(a=new nn(a,i))._enter=c,a._exit=f,a},enter:function(){return new nn(this._enter||this._groups.map(Ct),this._parents)},exit:function(){return new nn(this._exit||this._groups.map(Ct),this._parents)},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var c,f=n[a],s=e[a],l=f.length,h=u[a]=new Array(l),d=0;d<l;++d)(c=f[d]||s[d])&&(h[d]=c);for(;a<r;++a)u[a]=n[a];return new nn(u,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,u=i[o];--o>=0;)(r=i[o])&&(u&&u!==r.nextSibling&&u.parentNode.insertBefore(r,u),u=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=Nt);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var u,a=e[o],c=a.length,f=i[o]=new Array(c),s=0;s<c;++s)(u=a[s])&&(f[s]=u);f.sort(n)}return new nn(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each(function(){t[++n]=this}),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var u=r[i];if(u)return u}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],u=0,a=o.length;u<a;++u)(i=o[u])&&t.call(i,i.__data__,u,o);return this},attr:function(t,n){var e=vt(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof n?e.local?function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}:function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}:e.local?function(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}:function(t,n){return function(){this.setAttribute(t,n)}})(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof n?function(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}:function(t,n,e){return function(){this.style.setProperty(t,n,e)}})(t,n,null==e?"":e)):Ot(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?function(t){return function(){delete this[t]}}:"function"==typeof n?function(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}:function(t,n){return function(){this[t]=n}})(t,n)):this.node()[t]},classed:function(t,n){var e=Rt(t+"");if(arguments.length<2){for(var r=jt(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?function(t,n){return function(){(n.apply(this,arguments)?$t:It)(this,t)}}:n?function(t){return function(){$t(this,t)}}:function(t){return function(){It(this,t)}})(e,n))},text:function(t){return arguments.length?this.each(null==t?Lt:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?zt:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(qt)},lower:function(){return this.each(Bt)},append:function(t){var n="function"==typeof t?t:gt(t);return this.select(function(){return this.appendChild(n.apply(this,arguments))})},insert:function(t,n){var e="function"==typeof t?t:gt(t),r=null==n?Ut:"function"==typeof n?n:mt(n);return this.select(function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(Ft)},clone:function(t){return this.select(t?Wt:Ht)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=function(t){return t.trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}})}(t+""),u=o.length;if(!(arguments.length<2)){for(a=n?Qt:Zt,null==e&&(e=!1),r=0;r<u;++r)this.each(a(o[r],n,e));return this}var a=this.node().__on;if(a)for(var c,f=0,s=a.length;f<s;++f)for(r=0,c=a[f];r<u;++r)if((i=o[r]).type===c.type&&i.name===c.name)return c.value},dispatch:function(t,n){return this.each(("function"==typeof n?function(t,n){return function(){return Kt(this,t,n.apply(this,arguments))}}:function(t,n){return function(){return Kt(this,t,n)}})(t,n))}};var rn=en,on=function(t){return"string"==typeof t?new nn([[document.querySelector(t)]],[document.documentElement]):new nn([[t]],tn)},un=function(t){return on(gt(t).call(document.documentElement))},an=0;function cn(){return new fn}function fn(){this._="@"+(++an).toString(36)}fn.prototype=cn.prototype={constructor:fn,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var sn=function(){for(var t,n=Vt;t=n.sourceEvent;)n=t;return n},ln=function(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=n.clientX,r.y=n.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]},hn=function(t){var n=sn();return n.changedTouches&&(n=n.changedTouches[0]),ln(t,n)},dn=function(t){return"string"==typeof t?new nn([document.querySelectorAll(t)],[document.documentElement]):new nn([null==t?[]:t],tn)},pn=function(t,n,e){arguments.length<3&&(e=n,n=sn().changedTouches);for(var r,i=0,o=n?n.length:0;i<o;++i)if((r=n[i]).identifier===e)return ln(t,r);return null},vn=function(t,n){null==n&&(n=sn().touches);for(var e=0,r=n?n.length:0,i=new Array(r);e<r;++e)i[e]=ln(t,n[e]);return i};function gn(){Vt.stopImmediatePropagation()}var yn=function(){Vt.preventDefault(),Vt.stopImmediatePropagation()},mn=function(t){var n=t.document.documentElement,e=on(t).on("dragstart.drag",yn,!0);"onselectstart"in n?e.on("selectstart.drag",yn,!0):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")};function bn(t,n){var e=t.document.documentElement,r=on(t).on("dragstart.drag",null);n&&(r.on("click.drag",yn,!0),setTimeout(function(){r.on("click.drag",null)},0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}var _n=function(t){return function(){return t}};function xn(t,n,e,r,i,o,u,a,c,f){this.target=t,this.type=n,this.subject=e,this.identifier=r,this.active=i,this.x=o,this.y=u,this.dx=a,this.dy=c,this._=f}function wn(){return!Vt.button}function Mn(){return this.parentNode}function Tn(t){return null==t?{x:Vt.x,y:Vt.y}:t}function Cn(){return"ontouchstart"in this}xn.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var Sn=function(){var t,n,e,r,i=wn,o=Mn,u=Tn,a=Cn,c={},f=ht("start","drag","end"),s=0,l=0;function h(t){t.on("mousedown.drag",d).filter(a).on("touchstart.drag",g).on("touchmove.drag",y).on("touchend.drag touchcancel.drag",m).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function d(){if(!r&&i.apply(this,arguments)){var u=b("mouse",o.apply(this,arguments),hn,this,arguments);u&&(on(Vt.view).on("mousemove.drag",p,!0).on("mouseup.drag",v,!0),mn(Vt.view),gn(),e=!1,t=Vt.clientX,n=Vt.clientY,u("start"))}}function p(){if(yn(),!e){var r=Vt.clientX-t,i=Vt.clientY-n;e=r*r+i*i>l}c.mouse("drag")}function v(){on(Vt.view).on("mousemove.drag mouseup.drag",null),bn(Vt.view,e),yn(),c.mouse("end")}function g(){if(i.apply(this,arguments)){var t,n,e=Vt.changedTouches,r=o.apply(this,arguments),u=e.length;for(t=0;t<u;++t)(n=b(e[t].identifier,r,pn,this,arguments))&&(gn(),n("start"))}}function y(){var t,n,e=Vt.changedTouches,r=e.length;for(t=0;t<r;++t)(n=c[e[t].identifier])&&(yn(),n("drag"))}function m(){var t,n,e=Vt.changedTouches,i=e.length;for(r&&clearTimeout(r),r=setTimeout(function(){r=null},500),t=0;t<i;++t)(n=c[e[t].identifier])&&(gn(),n("end"))}function b(t,n,e,r,i){var o,a,l,d=e(n,t),p=f.copy();if(Jt(new xn(h,"beforestart",o,t,s,d[0],d[1],0,0,p),function(){return null!=(Vt.subject=o=u.apply(r,i))&&(a=o.x-d[0]||0,l=o.y-d[1]||0,!0)}))return function u(f){var v,g=d;switch(f){case"start":c[t]=u,v=s++;break;case"end":delete c[t],--s;case"drag":d=e(n,t),v=s}Jt(new xn(h,f,o,t,v,d[0]+a,d[1]+l,d[0]-g[0],d[1]-g[1],p),p.apply,p,[f,r,i])}}return h.filter=function(t){return arguments.length?(i="function"==typeof t?t:_n(!!t),h):i},h.container=function(t){return arguments.length?(o="function"==typeof t?t:_n(t),h):o},h.subject=function(t){return arguments.length?(u="function"==typeof t?t:_n(t),h):u},h.touchable=function(t){return arguments.length?(a="function"==typeof t?t:_n(!!t),h):a},h.on=function(){var t=f.on.apply(f,arguments);return t===f?h:t},h.clickDistance=function(t){return arguments.length?(l=(t=+t)*t,h):Math.sqrt(l)},h},An=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function kn(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function En(){}var Nn="\\s*([+-]?\\d+)\\s*",Dn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",On="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Rn=/^#([0-9a-f]{3})$/,jn=/^#([0-9a-f]{6})$/,Pn=new RegExp("^rgb\\("+[Nn,Nn,Nn]+"\\)$"),$n=new RegExp("^rgb\\("+[On,On,On]+"\\)$"),In=new RegExp("^rgba\\("+[Nn,Nn,Nn,Dn]+"\\)$"),Ln=new RegExp("^rgba\\("+[On,On,On,Dn]+"\\)$"),zn=new RegExp("^hsl\\("+[Dn,On,On]+"\\)$"),qn=new RegExp("^hsla\\("+[Dn,On,On,Dn]+"\\)$"),Bn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Un(t){var n;return t=(t+"").trim().toLowerCase(),(n=Rn.exec(t))?new Vn((n=parseInt(n[1],16))>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):(n=jn.exec(t))?Fn(parseInt(n[1],16)):(n=Pn.exec(t))?new Vn(n[1],n[2],n[3],1):(n=$n.exec(t))?new Vn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=In.exec(t))?Hn(n[1],n[2],n[3],n[4]):(n=Ln.exec(t))?Hn(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=zn.exec(t))?Gn(n[1],n[2]/100,n[3]/100,1):(n=qn.exec(t))?Gn(n[1],n[2]/100,n[3]/100,n[4]):Bn.hasOwnProperty(t)?Fn(Bn[t]):"transparent"===t?new Vn(NaN,NaN,NaN,0):null}function Fn(t){return new Vn(t>>16&255,t>>8&255,255&t,1)}function Hn(t,n,e,r){return r<=0&&(t=n=e=NaN),new Vn(t,n,e,r)}function Wn(t){return t instanceof En||(t=Un(t)),t?new Vn((t=t.rgb()).r,t.g,t.b,t.opacity):new Vn}function Yn(t,n,e,r){return 1===arguments.length?Wn(t):new Vn(t,n,e,null==r?1:r)}function Vn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function Xn(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Gn(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new Qn(t,n,e,r)}function Zn(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof Qn)return new Qn(t.h,t.s,t.l,t.opacity);if(t instanceof En||(t=Un(t)),!t)return new Qn;if(t instanceof Qn)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),u=NaN,a=o-i,c=(o+i)/2;return a?(u=n===o?(e-r)/a+6*(e<r):e===o?(r-n)/a+2:(n-e)/a+4,a/=c<.5?o+i:2-o-i,u*=60):a=c>0&&c<1?0:u,new Qn(u,a,c,t.opacity)}(t):new Qn(t,n,e,null==r?1:r)}function Qn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Jn(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}An(En,Un,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),An(Vn,Yn,kn(En,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Vn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Vn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+Xn(this.r)+Xn(this.g)+Xn(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),An(Qn,Zn,kn(En,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Qn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Qn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new Vn(Jn(t>=240?t-240:t+120,i,r),Jn(t,i,r),Jn(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var Kn=Math.PI/180,te=180/Math.PI,ne=.96422,ee=1,re=.82521,ie=4/29,oe=6/29,ue=3*oe*oe,ae=oe*oe*oe;function ce(t){if(t instanceof le)return new le(t.l,t.a,t.b,t.opacity);if(t instanceof be){if(isNaN(t.h))return new le(t.l,0,0,t.opacity);var n=t.h*Kn;return new le(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}t instanceof Vn||(t=Wn(t));var e,r,i=ve(t.r),o=ve(t.g),u=ve(t.b),a=he((.2225045*i+.7168786*o+.0606169*u)/ee);return i===o&&o===u?e=r=a:(e=he((.4360747*i+.3850649*o+.1430804*u)/ne),r=he((.0139322*i+.0971045*o+.7141733*u)/re)),new le(116*a-16,500*(e-a),200*(a-r),t.opacity)}function fe(t,n){return new le(t,0,0,null==n?1:n)}function se(t,n,e,r){return 1===arguments.length?ce(t):new le(t,n,e,null==r?1:r)}function le(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function he(t){return t>ae?Math.pow(t,1/3):t/ue+ie}function de(t){return t>oe?t*t*t:ue*(t-ie)}function pe(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function ve(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function ge(t){if(t instanceof be)return new be(t.h,t.c,t.l,t.opacity);if(t instanceof le||(t=ce(t)),0===t.a&&0===t.b)return new be(NaN,0,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*te;return new be(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function ye(t,n,e,r){return 1===arguments.length?ge(t):new be(e,n,t,null==r?1:r)}function me(t,n,e,r){return 1===arguments.length?ge(t):new be(t,n,e,null==r?1:r)}function be(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}An(le,se,kn(En,{brighter:function(t){return new le(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new le(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new Vn(pe(3.1338561*(n=ne*de(n))-1.6168667*(t=ee*de(t))-.4906146*(e=re*de(e))),pe(-.9787684*n+1.9161415*t+.033454*e),pe(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),An(be,me,kn(En,{brighter:function(t){return new be(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new be(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return ce(this).rgb()}}));var _e=-.29227,xe=-.90649,we=1.97294,Me=we*xe,Te=1.78277*we,Ce=1.78277*_e- -.14861*xe;function Se(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof Ae)return new Ae(t.h,t.s,t.l,t.opacity);t instanceof Vn||(t=Wn(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(Ce*r+Me*n-Te*e)/(Ce+Me-Te),o=r-i,u=(we*(e-i)-_e*o)/xe,a=Math.sqrt(u*u+o*o)/(we*i*(1-i)),c=a?Math.atan2(u,o)*te-120:NaN;return new Ae(c<0?c+360:c,a,i,t.opacity)}(t):new Ae(t,n,e,null==r?1:r)}function Ae(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function ke(t,n,e,r,i){var o=t*t,u=o*t;return((1-3*t+3*o-u)*n+(4-6*o+3*u)*e+(1+3*t+3*o-3*u)*r+u*i)/6}An(Ae,Se,kn(En,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Ae(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Ae(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*Kn,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new Vn(255*(n+e*(-.14861*r+1.78277*i)),255*(n+e*(_e*r+xe*i)),255*(n+e*(we*r)),this.opacity)}}));var Ee=function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],u=r>0?t[r-1]:2*i-o,a=r<n-1?t[r+2]:2*o-i;return ke((e-r/n)*n,u,i,o,a)}},Ne=function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],u=t[(r+1)%n],a=t[(r+2)%n];return ke((e-r/n)*n,i,o,u,a)}},De=function(t){return function(){return t}};function Oe(t,n){return function(e){return t+e*n}}function Re(t,n){var e=n-t;return e?Oe(t,e>180||e<-180?e-360*Math.round(e/360):e):De(isNaN(t)?n:t)}function je(t){return 1==(t=+t)?Pe:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):De(isNaN(n)?e:n)}}function Pe(t,n){var e=n-t;return e?Oe(t,e):De(isNaN(t)?n:t)}var $e=function t(n){var e=je(n);function r(t,n){var r=e((t=Yn(t)).r,(n=Yn(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),u=Pe(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=u(n),t+""}}return r.gamma=t,r}(1);function Ie(t){return function(n){var e,r,i=n.length,o=new Array(i),u=new Array(i),a=new Array(i);for(e=0;e<i;++e)r=Yn(n[e]),o[e]=r.r||0,u[e]=r.g||0,a[e]=r.b||0;return o=t(o),u=t(u),a=t(a),r.opacity=1,function(t){return r.r=o(t),r.g=u(t),r.b=a(t),r+""}}}var Le=Ie(Ee),ze=Ie(Ne),qe=function(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),u=new Array(r);for(e=0;e<i;++e)o[e]=Qe(t[e],n[e]);for(;e<r;++e)u[e]=n[e];return function(t){for(e=0;e<i;++e)u[e]=o[e](t);return u}},Be=function(t,n){var e=new Date;return n-=t=+t,function(r){return e.setTime(t+n*r),e}},Ue=function(t,n){return n-=t=+t,function(e){return t+n*e}},Fe=function(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=Qe(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}},He=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,We=new RegExp(He.source,"g");var Ye,Ve,Xe,Ge,Ze=function(t,n){var e,r,i,o=He.lastIndex=We.lastIndex=0,u=-1,a=[],c=[];for(t+="",n+="";(e=He.exec(t))&&(r=We.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),a[u]?a[u]+=i:a[++u]=i),(e=e[0])===(r=r[0])?a[u]?a[u]+=r:a[++u]=r:(a[++u]=null,c.push({i:u,x:Ue(e,r)})),o=We.lastIndex;return o<n.length&&(i=n.slice(o),a[u]?a[u]+=i:a[++u]=i),a.length<2?c[0]?function(t){return function(n){return t(n)+""}}(c[0].x):function(t){return function(){return t}}(n):(n=c.length,function(t){for(var e,r=0;r<n;++r)a[(e=c[r]).i]=e.x(t);return a.join("")})},Qe=function(t,n){var e,r=typeof n;return null==n||"boolean"===r?De(n):("number"===r?Ue:"string"===r?(e=Un(n))?(n=e,$e):Ze:n instanceof Un?$e:n instanceof Date?Be:Array.isArray(n)?qe:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?Fe:Ue)(t,n)},Je=function(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}},Ke=function(t,n){var e=Re(+t,+n);return function(t){var n=e(t);return n-360*Math.floor(n/360)}},tr=function(t,n){return n-=t=+t,function(e){return Math.round(t+n*e)}},nr=180/Math.PI,er={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},rr=function(t,n,e,r,i,o){var u,a,c;return(u=Math.sqrt(t*t+n*n))&&(t/=u,n/=u),(c=t*e+n*r)&&(e-=t*c,r-=n*c),(a=Math.sqrt(e*e+r*r))&&(e/=a,r/=a,c/=a),t*r<n*e&&(t=-t,n=-n,c=-c,u=-u),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*nr,skewX:Math.atan(c)*nr,scaleX:u,scaleY:a}};function ir(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,u){var a=[],c=[];return o=t(o),u=t(u),function(t,r,i,o,u,a){if(t!==i||r!==o){var c=u.push("translate(",null,n,null,e);a.push({i:c-4,x:Ue(t,i)},{i:c-2,x:Ue(r,o)})}else(i||o)&&u.push("translate("+i+n+o+e)}(o.translateX,o.translateY,u.translateX,u.translateY,a,c),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:Ue(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,u.rotate,a,c),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:Ue(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,u.skewX,a,c),function(t,n,e,r,o,u){if(t!==e||n!==r){var a=o.push(i(o)+"scale(",null,",",null,")");u.push({i:a-4,x:Ue(t,e)},{i:a-2,x:Ue(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,u.scaleX,u.scaleY,a,c),o=u=null,function(t){for(var n,e=-1,r=c.length;++e<r;)a[(n=c[e]).i]=n.x(t);return a.join("")}}}var or=ir(function(t){return"none"===t?er:(Ye||(Ye=document.createElement("DIV"),Ve=document.documentElement,Xe=document.defaultView),Ye.style.transform=t,t=Xe.getComputedStyle(Ve.appendChild(Ye),null).getPropertyValue("transform"),Ve.removeChild(Ye),t=t.slice(7,-1).split(","),rr(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),ur=ir(function(t){return null==t?er:(Ge||(Ge=document.createElementNS("http://www.w3.org/2000/svg","g")),Ge.setAttribute("transform",t),(t=Ge.transform.baseVal.consolidate())?(t=t.matrix,rr(t.a,t.b,t.c,t.d,t.e,t.f)):er)},", ",")",")"),ar=Math.SQRT2;function cr(t){return((t=Math.exp(t))+1/t)/2}var fr=function(t,n){var e,r,i=t[0],o=t[1],u=t[2],a=n[0],c=n[1],f=n[2],s=a-i,l=c-o,h=s*s+l*l;if(h<1e-12)r=Math.log(f/u)/ar,e=function(t){return[i+t*s,o+t*l,u*Math.exp(ar*t*r)]};else{var d=Math.sqrt(h),p=(f*f-u*u+4*h)/(2*u*2*d),v=(f*f-u*u-4*h)/(2*f*2*d),g=Math.log(Math.sqrt(p*p+1)-p),y=Math.log(Math.sqrt(v*v+1)-v);r=(y-g)/ar,e=function(t){var n,e=t*r,a=cr(g),c=u/(2*d)*(a*(n=ar*e+g,((n=Math.exp(2*n))-1)/(n+1))-function(t){return((t=Math.exp(t))-1/t)/2}(g));return[i+c*s,o+c*l,u*a/cr(ar*e+g)]}}return e.duration=1e3*r,e};function sr(t){return function(n,e){var r=t((n=Zn(n)).h,(e=Zn(e)).h),i=Pe(n.s,e.s),o=Pe(n.l,e.l),u=Pe(n.opacity,e.opacity);return function(t){return n.h=r(t),n.s=i(t),n.l=o(t),n.opacity=u(t),n+""}}}var lr=sr(Re),hr=sr(Pe);function dr(t,n){var e=Pe((t=se(t)).l,(n=se(n)).l),r=Pe(t.a,n.a),i=Pe(t.b,n.b),o=Pe(t.opacity,n.opacity);return function(n){return t.l=e(n),t.a=r(n),t.b=i(n),t.opacity=o(n),t+""}}function pr(t){return function(n,e){var r=t((n=me(n)).h,(e=me(e)).h),i=Pe(n.c,e.c),o=Pe(n.l,e.l),u=Pe(n.opacity,e.opacity);return function(t){return n.h=r(t),n.c=i(t),n.l=o(t),n.opacity=u(t),n+""}}}var vr=pr(Re),gr=pr(Pe);function yr(t){return function n(e){function r(n,r){var i=t((n=Se(n)).h,(r=Se(r)).h),o=Pe(n.s,r.s),u=Pe(n.l,r.l),a=Pe(n.opacity,r.opacity);return function(t){return n.h=i(t),n.s=o(t),n.l=u(Math.pow(t,e)),n.opacity=a(t),n+""}}return e=+e,r.gamma=n,r}(1)}var mr=yr(Re),br=yr(Pe);function _r(t,n){for(var e=0,r=n.length-1,i=n[0],o=new Array(r<0?0:r);e<r;)o[e]=t(i,i=n[++e]);return function(t){var n=Math.max(0,Math.min(r-1,Math.floor(t*=r)));return o[n](t-n)}}var xr,wr,Mr=function(t,n){for(var e=new Array(n),r=0;r<n;++r)e[r]=t(r/(n-1));return e},Tr=0,Cr=0,Sr=0,Ar=1e3,kr=0,Er=0,Nr=0,Dr="object"==typeof performance&&performance.now?performance:Date,Or="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Rr(){return Er||(Or(jr),Er=Dr.now()+Nr)}function jr(){Er=0}function Pr(){this._call=this._time=this._next=null}function $r(t,n,e){var r=new Pr;return r.restart(t,n,e),r}function Ir(){Rr(),++Tr;for(var t,n=xr;n;)(t=Er-n._time)>=0&&n._call.call(null,t),n=n._next;--Tr}function Lr(){Er=(kr=Dr.now())+Nr,Tr=Cr=0;try{Ir()}finally{Tr=0,function(){var t,n,e=xr,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:xr=n);wr=t,qr(r)}(),Er=0}}function zr(){var t=Dr.now(),n=t-kr;n>Ar&&(Nr-=n,kr=t)}function qr(t){Tr||(Cr&&(Cr=clearTimeout(Cr)),t-Er>24?(t<1/0&&(Cr=setTimeout(Lr,t-Dr.now()-Nr)),Sr&&(Sr=clearInterval(Sr))):(Sr||(kr=Dr.now(),Sr=setInterval(zr,Ar)),Tr=1,Or(Lr)))}Pr.prototype=$r.prototype={constructor:Pr,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Rr():+e)+(null==n?0:+n),this._next||wr===this||(wr?wr._next=this:xr=this,wr=this),this._call=t,this._time=e,qr()},stop:function(){this._call&&(this._call=null,this._time=1/0,qr())}};var Br=function(t,n,e){var r=new Pr;return n=null==n?0:+n,r.restart(function(e){r.stop(),t(e+n)},n,e),r},Ur=function(t,n,e){var r=new Pr,i=n;return null==n?(r.restart(t,n,e),r):(n=+n,e=null==e?Rr():+e,r.restart(function o(u){u+=i,r.restart(o,i+=n,e),t(u)},n,e),r)},Fr=ht("start","end","interrupt"),Hr=[],Wr=0,Yr=1,Vr=2,Xr=3,Gr=4,Zr=5,Qr=6,Jr=function(t,n,e,r,i,o){var u=t.__transition;if(u){if(e in u)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(c){var f,s,l,h;if(e.state!==Yr)return a();for(f in i)if((h=i[f]).name===e.name){if(h.state===Xr)return Br(o);h.state===Gr?(h.state=Qr,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[f]):+f<n&&(h.state=Qr,h.timer.stop(),delete i[f])}if(Br(function(){e.state===Xr&&(e.state=Gr,e.timer.restart(u,e.delay,e.time),u(c))}),e.state=Vr,e.on.call("start",t,t.__data__,e.index,e.group),e.state===Vr){for(e.state=Xr,r=new Array(l=e.tween.length),f=0,s=-1;f<l;++f)(h=e.tween[f].value.call(t,t.__data__,e.index,e.group))&&(r[++s]=h);r.length=s+1}}function u(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(a),e.state=Zr,1),o=-1,u=r.length;++o<u;)r[o].call(null,i);e.state===Zr&&(e.on.call("end",t,t.__data__,e.index,e.group),a())}function a(){for(var r in e.state=Qr,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=$r(function(t){e.state=Yr,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)},0,e.time)}(t,e,{name:n,index:r,group:i,on:Fr,tween:Hr,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:Wr})};function Kr(t,n){var e=ni(t,n);if(e.state>Wr)throw new Error("too late; already scheduled");return e}function ti(t,n){var e=ni(t,n);if(e.state>Vr)throw new Error("too late; already started");return e}function ni(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}var ei=function(t,n){var e,r,i,o=t.__transition,u=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>Vr&&e.state<Zr,e.state=Qr,e.timer.stop(),r&&e.on.call("interrupt",t,t.__data__,e.index,e.group),delete o[i]):u=!1;u&&delete t.__transition}};function ri(t,n,e){var r=t._id;return t.each(function(){var t=ti(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)}),function(t){return ni(t,r).value[n]}}var ii=function(t,n){var e;return("number"==typeof n?Ue:n instanceof Un?$e:(e=Un(n))?(n=e,$e):Ze)(t,n)};var oi=rn.prototype.constructor;var ui=0;function ai(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function ci(t){return rn().transition(t)}function fi(){return++ui}var si=rn.prototype;function li(t){return+t}function hi(t){return t*t}function di(t){return t*(2-t)}function pi(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2}function vi(t){return t*t*t}function gi(t){return--t*t*t+1}function yi(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}ai.prototype=ci.prototype={constructor:ai,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=mt(t));for(var r=this._groups,i=r.length,o=new Array(i),u=0;u<i;++u)for(var a,c,f=r[u],s=f.length,l=o[u]=new Array(s),h=0;h<s;++h)(a=f[h])&&(c=t.call(a,a.__data__,h,f))&&("__data__"in a&&(c.__data__=a.__data__),l[h]=c,Jr(l[h],n,e,h,l,ni(a,e)));return new ai(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=_t(t));for(var r=this._groups,i=r.length,o=[],u=[],a=0;a<i;++a)for(var c,f=r[a],s=f.length,l=0;l<s;++l)if(c=f[l]){for(var h,d=t.call(c,c.__data__,l,f),p=ni(c,e),v=0,g=d.length;v<g;++v)(h=d[v])&&Jr(h,n,e,v,d,p);o.push(d),u.push(c)}return new ai(o,u,n,e)},filter:function(t){"function"!=typeof t&&(t=Tt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,c=r[i]=[],f=0;f<a;++f)(o=u[f])&&t.call(o,o.__data__,f,u)&&c.push(o);return new ai(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var c,f=n[a],s=e[a],l=f.length,h=u[a]=new Array(l),d=0;d<l;++d)(c=f[d]||s[d])&&(h[d]=c);for(;a<r;++a)u[a]=n[a];return new ai(u,this._parents,this._name,this._id)},selection:function(){return new oi(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=fi(),r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],c=a.length,f=0;f<c;++f)if(u=a[f]){var s=ni(u,n);Jr(u,t,e,f,a,{time:s.time+s.delay+s.duration,delay:0,duration:s.duration,ease:s.ease})}return new ai(r,this._parents,t,e)},call:si.call,nodes:si.nodes,node:si.node,size:si.size,empty:si.empty,each:si.each,on:function(t,n){var e=this._id;return arguments.length<2?ni(this.node(),e).on.on(t):this.each(function(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t})}(n)?Kr:ti;return function(){var u=o(this,t),a=u.on;a!==r&&(i=(r=a).copy()).on(n,e),u.on=i}}(e,t,n))},attr:function(t,n){var e=vt(t),r="transform"===e?ur:ii;return this.attrTween(t,"function"==typeof n?(e.local?function(t,n,e){var r,i,o;return function(){var u,a=e(this);if(null!=a)return(u=this.getAttributeNS(t.space,t.local))===a?null:u===r&&a===i?o:o=n(r=u,i=a);this.removeAttributeNS(t.space,t.local)}}:function(t,n,e){var r,i,o;return function(){var u,a=e(this);if(null!=a)return(u=this.getAttribute(t))===a?null:u===r&&a===i?o:o=n(r=u,i=a);this.removeAttribute(t)}})(e,r,ri(this,"attr."+t,n)):null==n?(e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(e):(e.local?function(t,n,e){var r,i;return function(){var o=this.getAttributeNS(t.space,t.local);return o===e?null:o===r?i:i=n(r=o,e)}}:function(t,n,e){var r,i;return function(){var o=this.getAttribute(t);return o===e?null:o===r?i:i=n(r=o,e)}})(e,r,n+""))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=vt(t);return this.tween(e,(r.local?function(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttributeNS(t.space,t.local,r(n))}}return e._value=n,e}:function(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttribute(t,r(n))}}return e._value=n,e})(r,n))},style:function(t,n,e){var r="transform"==(t+="")?or:ii;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=Ot(this,t),u=(this.style.removeProperty(t),Ot(this,t));return o===u?null:o===e&&u===r?i:i=n(e=o,r=u)}}(t,r)).on("end.style."+t,function(t){return function(){this.style.removeProperty(t)}}(t)):this.styleTween(t,"function"==typeof n?function(t,n,e){var r,i,o;return function(){var u=Ot(this,t),a=e(this);return null==a&&(this.style.removeProperty(t),a=Ot(this,t)),u===a?null:u===r&&a===i?o:o=n(r=u,i=a)}}(t,r,ri(this,"style."+t,n)):function(t,n,e){var r,i;return function(){var o=Ot(this,t);return o===e?null:o===r?i:i=n(r=o,e)}}(t,r,n+""),e)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,function(t,n,e){function r(){var r=this,i=n.apply(r,arguments);return i&&function(n){r.style.setProperty(t,i(n),e)}}return r._value=n,r}(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(ri(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=ni(this.node(),e).tween,o=0,u=i.length;o<u;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?function(t,n){var e,r;return function(){var i=ti(this,t),o=i.tween;if(o!==e)for(var u=0,a=(r=e=o).length;u<a;++u)if(r[u].name===n){(r=r.slice()).splice(u,1);break}i.tween=r}}:function(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=ti(this,t),u=o.tween;if(u!==r){i=(r=u).slice();for(var a={name:n,value:e},c=0,f=i.length;c<f;++c)if(i[c].name===n){i[c]=a;break}c===f&&i.push(a)}o.tween=i}})(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){Kr(this,t).delay=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){Kr(this,t).delay=n}})(n,t)):ni(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){ti(this,t).duration=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){ti(this,t).duration=n}})(n,t)):ni(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(function(t,n){if("function"!=typeof n)throw new Error;return function(){ti(this,t).ease=n}}(n,t)):ni(this.node(),n).ease}};var mi=function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e}(3),bi=function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),_i=function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),xi=Math.PI,wi=xi/2;function Mi(t){return 1-Math.cos(t*wi)}function Ti(t){return Math.sin(t*wi)}function Ci(t){return(1-Math.cos(xi*t))/2}function Si(t){return Math.pow(2,10*t-10)}function Ai(t){return 1-Math.pow(2,-10*t)}function ki(t){return((t*=2)<=1?Math.pow(2,10*t-10):2-Math.pow(2,10-10*t))/2}function Ei(t){return 1-Math.sqrt(1-t*t)}function Ni(t){return Math.sqrt(1- --t*t)}function Di(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2}var Oi=4/11,Ri=6/11,ji=8/11,Pi=.75,$i=9/11,Ii=10/11,Li=.9375,zi=21/22,qi=63/64,Bi=1/Oi/Oi;function Ui(t){return 1-Fi(1-t)}function Fi(t){return(t=+t)<Oi?Bi*t*t:t<ji?Bi*(t-=Ri)*t+Pi:t<Ii?Bi*(t-=$i)*t+Li:Bi*(t-=zi)*t+qi}function Hi(t){return((t*=2)<=1?1-Fi(1-t):Fi(t-1)+1)/2}var Wi=function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e}(1.70158),Yi=function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(1.70158),Vi=function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(1.70158),Xi=2*Math.PI,Gi=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Xi);function i(t){return n*Math.pow(2,10*--t)*Math.sin((r-t)/e)}return i.amplitude=function(n){return t(n,e*Xi)},i.period=function(e){return t(n,e)},i}(1,.3),Zi=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Xi);function i(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/e)}return i.amplitude=function(n){return t(n,e*Xi)},i.period=function(e){return t(n,e)},i}(1,.3),Qi=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Xi);function i(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((r-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((r+t)/e))/2}return i.amplitude=function(n){return t(n,e*Xi)},i.period=function(e){return t(n,e)},i}(1,.3),Ji={time:null,delay:0,duration:250,ease:yi};function Ki(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return Ji.time=Rr(),Ji;return e}rn.prototype.interrupt=function(t){return this.each(function(){ei(this,t)})},rn.prototype.transition=function(t){var n,e;t instanceof ai?(n=t._id,t=t._name):(n=fi(),(e=Ji).time=Rr(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],c=a.length,f=0;f<c;++f)(u=a[f])&&Jr(u,t,n,f,a,e||Ki(u,n));return new ai(r,this._parents,t,n)};var to=[null],no=function(t,n){var e,r,i=t.__transition;if(i)for(r in n=null==n?null:n+"",i)if((e=i[r]).state>Yr&&e.name===n)return new ai([[t]],to,n,+r);return null},eo=function(t){return function(){return t}},ro=function(t,n,e){this.target=t,this.type=n,this.selection=e};function io(){Vt.stopImmediatePropagation()}var oo=function(){Vt.preventDefault(),Vt.stopImmediatePropagation()},uo={name:"drag"},ao={name:"space"},co={name:"handle"},fo={name:"center"},so={name:"x",handles:["e","w"].map(bo),input:function(t,n){return t&&[[t[0],n[0][1]],[t[1],n[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},lo={name:"y",handles:["n","s"].map(bo),input:function(t,n){return t&&[[n[0][0],t[0]],[n[1][0],t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},ho={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(bo),input:function(t){return t},output:function(t){return t}},po={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},vo={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},go={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},yo={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},mo={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function bo(t){return{type:t}}function _o(){return!Vt.button}function xo(){var t=this.ownerSVGElement||this;return[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function wo(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function Mo(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function To(t){var n=t.__brush;return n?n.dim.output(n.selection):null}function Co(){return ko(so)}function So(){return ko(lo)}var Ao=function(){return ko(ho)};function ko(t){var n,e=xo,r=_o,i=ht(u,"start","brush","end"),o=6;function u(n){var e=n.property("__brush",l).selectAll(".overlay").data([bo("overlay")]);e.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",po.overlay).merge(e).each(function(){var t=wo(this).extent;on(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])}),n.selectAll(".selection").data([bo("selection")]).enter().append("rect").attr("class","selection").attr("cursor",po.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=n.selectAll(".handle").data(t.handles,function(t){return t.type});r.exit().remove(),r.enter().append("rect").attr("class",function(t){return"handle handle--"+t.type}).attr("cursor",function(t){return po[t.type]}),n.each(a).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",s)}function a(){var t=on(this),n=wo(this).selection;n?(t.selectAll(".selection").style("display",null).attr("x",n[0][0]).attr("y",n[0][1]).attr("width",n[1][0]-n[0][0]).attr("height",n[1][1]-n[0][1]),t.selectAll(".handle").style("display",null).attr("x",function(t){return"e"===t.type[t.type.length-1]?n[1][0]-o/2:n[0][0]-o/2}).attr("y",function(t){return"s"===t.type[0]?n[1][1]-o/2:n[0][1]-o/2}).attr("width",function(t){return"n"===t.type||"s"===t.type?n[1][0]-n[0][0]+o:o}).attr("height",function(t){return"e"===t.type||"w"===t.type?n[1][1]-n[0][1]+o:o})):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function c(t,n){return t.__brush.emitter||new f(t,n)}function f(t,n){this.that=t,this.args=n,this.state=t.__brush,this.active=0}function s(){if(Vt.touches){if(Vt.changedTouches.length<Vt.touches.length)return oo()}else if(n)return;if(r.apply(this,arguments)){var e,i,o,u,f,s,l,h,d,p,v,g,y,m=this,b=Vt.target.__data__.type,_="selection"===(Vt.metaKey?b="overlay":b)?uo:Vt.altKey?fo:co,x=t===lo?null:yo[b],w=t===so?null:mo[b],M=wo(m),T=M.extent,C=M.selection,S=T[0][0],A=T[0][1],k=T[1][0],E=T[1][1],N=x&&w&&Vt.shiftKey,D=hn(m),O=D,R=c(m,arguments).beforestart();"overlay"===b?M.selection=C=[[e=t===lo?S:D[0],o=t===so?A:D[1]],[f=t===lo?k:e,l=t===so?E:o]]:(e=C[0][0],o=C[0][1],f=C[1][0],l=C[1][1]),i=e,u=o,s=f,h=l;var j=on(m).attr("pointer-events","none"),P=j.selectAll(".overlay").attr("cursor",po[b]);if(Vt.touches)j.on("touchmove.brush",I,!0).on("touchend.brush touchcancel.brush",z,!0);else{var $=on(Vt.view).on("keydown.brush",function(){switch(Vt.keyCode){case 16:N=x&&w;break;case 18:_===co&&(x&&(f=s-d*x,e=i+d*x),w&&(l=h-p*w,o=u+p*w),_=fo,L());break;case 32:_!==co&&_!==fo||(x<0?f=s-d:x>0&&(e=i-d),w<0?l=h-p:w>0&&(o=u-p),_=ao,P.attr("cursor",po.selection),L());break;default:return}oo()},!0).on("keyup.brush",function(){switch(Vt.keyCode){case 16:N&&(g=y=N=!1,L());break;case 18:_===fo&&(x<0?f=s:x>0&&(e=i),w<0?l=h:w>0&&(o=u),_=co,L());break;case 32:_===ao&&(Vt.altKey?(x&&(f=s-d*x,e=i+d*x),w&&(l=h-p*w,o=u+p*w),_=fo):(x<0?f=s:x>0&&(e=i),w<0?l=h:w>0&&(o=u),_=co),P.attr("cursor",po[b]),L());break;default:return}oo()},!0).on("mousemove.brush",I,!0).on("mouseup.brush",z,!0);mn(Vt.view)}io(),ei(m),a.call(m),R.start()}function I(){var t=hn(m);!N||g||y||(Math.abs(t[0]-O[0])>Math.abs(t[1]-O[1])?y=!0:g=!0),O=t,v=!0,oo(),L()}function L(){var t;switch(d=O[0]-D[0],p=O[1]-D[1],_){case ao:case uo:x&&(d=Math.max(S-e,Math.min(k-f,d)),i=e+d,s=f+d),w&&(p=Math.max(A-o,Math.min(E-l,p)),u=o+p,h=l+p);break;case co:x<0?(d=Math.max(S-e,Math.min(k-e,d)),i=e+d,s=f):x>0&&(d=Math.max(S-f,Math.min(k-f,d)),i=e,s=f+d),w<0?(p=Math.max(A-o,Math.min(E-o,p)),u=o+p,h=l):w>0&&(p=Math.max(A-l,Math.min(E-l,p)),u=o,h=l+p);break;case fo:x&&(i=Math.max(S,Math.min(k,e-d*x)),s=Math.max(S,Math.min(k,f+d*x))),w&&(u=Math.max(A,Math.min(E,o-p*w)),h=Math.max(A,Math.min(E,l+p*w)))}s<i&&(x*=-1,t=e,e=f,f=t,t=i,i=s,s=t,b in vo&&P.attr("cursor",po[b=vo[b]])),h<u&&(w*=-1,t=o,o=l,l=t,t=u,u=h,h=t,b in go&&P.attr("cursor",po[b=go[b]])),M.selection&&(C=M.selection),g&&(i=C[0][0],s=C[1][0]),y&&(u=C[0][1],h=C[1][1]),C[0][0]===i&&C[0][1]===u&&C[1][0]===s&&C[1][1]===h||(M.selection=[[i,u],[s,h]],a.call(m),R.brush())}function z(){if(io(),Vt.touches){if(Vt.touches.length)return;n&&clearTimeout(n),n=setTimeout(function(){n=null},500),j.on("touchmove.brush touchend.brush touchcancel.brush",null)}else bn(Vt.view,v),$.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);j.attr("pointer-events","all"),P.attr("cursor",po.overlay),M.selection&&(C=M.selection),Mo(C)&&(M.selection=null,a.call(m)),R.end()}}function l(){var n=this.__brush||{selection:null};return n.extent=e.apply(this,arguments),n.dim=t,n}return u.move=function(n,e){n.selection?n.on("start.brush",function(){c(this,arguments).beforestart().start()}).on("interrupt.brush end.brush",function(){c(this,arguments).end()}).tween("brush",function(){var n=this,r=n.__brush,i=c(n,arguments),o=r.selection,u=t.input("function"==typeof e?e.apply(this,arguments):e,r.extent),f=Qe(o,u);function s(t){r.selection=1===t&&Mo(u)?null:f(t),a.call(n),i.brush()}return o&&u?s:s(1)}):n.each(function(){var n=arguments,r=this.__brush,i=t.input("function"==typeof e?e.apply(this,n):e,r.extent),o=c(this,n).beforestart();ei(this),r.selection=null==i||Mo(i)?null:i,a.call(this),o.start().brush().end()})},f.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(n){Jt(new ro(u,n,t.output(this.state.selection)),i.apply,i,[n,this.that,this.args])}},u.extent=function(t){return arguments.length?(e="function"==typeof t?t:eo([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),u):e},u.filter=function(t){return arguments.length?(r="function"==typeof t?t:eo(!!t),u):r},u.handleSize=function(t){return arguments.length?(o=+t,u):o},u.on=function(){var t=i.on.apply(i,arguments);return t===i?u:t},u}var Eo=Math.cos,No=Math.sin,Do=Math.PI,Oo=Do/2,Ro=2*Do,jo=Math.max;var Po=function(){var t=0,n=null,e=null,r=null;function i(i){var o,u,a,c,f,s,l=i.length,h=[],d=w(l),p=[],v=[],g=v.groups=new Array(l),y=new Array(l*l);for(o=0,f=-1;++f<l;){for(u=0,s=-1;++s<l;)u+=i[f][s];h.push(u),p.push(w(l)),o+=u}for(n&&d.sort(function(t,e){return n(h[t],h[e])}),e&&p.forEach(function(t,n){t.sort(function(t,r){return e(i[n][t],i[n][r])})}),c=(o=jo(0,Ro-t*l)/o)?t:Ro/l,u=0,f=-1;++f<l;){for(a=u,s=-1;++s<l;){var m=d[f],b=p[m][s],_=i[m][b],x=u,M=u+=_*o;y[b*l+m]={index:m,subindex:b,startAngle:x,endAngle:M,value:_}}g[m]={index:m,startAngle:a,endAngle:u,value:h[m]},u+=c}for(f=-1;++f<l;)for(s=f-1;++s<l;){var T=y[s*l+f],C=y[f*l+s];(T.value||C.value)&&v.push(T.value<C.value?{source:C,target:T}:{source:T,target:C})}return r?v.sort(r):v}return i.padAngle=function(n){return arguments.length?(t=jo(0,n),i):t},i.sortGroups=function(t){return arguments.length?(n=t,i):n},i.sortSubgroups=function(t){return arguments.length?(e=t,i):e},i.sortChords=function(t){return arguments.length?(null==t?r=null:(n=t,r=function(t,e){return n(t.source.value+t.target.value,e.source.value+e.target.value)})._=t,i):r&&r._;var n},i},$o=Array.prototype.slice,Io=function(t){return function(){return t}},Lo=Math.PI,zo=2*Lo,qo=zo-1e-6;function Bo(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Uo(){return new Bo}Bo.prototype=Uo.prototype={constructor:Bo,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,u=this._y1,a=e-t,c=r-n,f=o-t,s=u-n,l=f*f+s*s;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(l>1e-6)if(Math.abs(s*a-c*f)>1e-6&&i){var h=e-o,d=r-u,p=a*a+c*c,v=h*h+d*d,g=Math.sqrt(p),y=Math.sqrt(l),m=i*Math.tan((Lo-Math.acos((p+l-v)/(2*g*y)))/2),b=m/y,_=m/g;Math.abs(b-1)>1e-6&&(this._+="L"+(t+b*f)+","+(n+b*s)),this._+="A"+i+","+i+",0,0,"+ +(s*h>f*d)+","+(this._x1=t+_*a)+","+(this._y1=n+_*c)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,o){t=+t,n=+n;var u=(e=+e)*Math.cos(r),a=e*Math.sin(r),c=t+u,f=n+a,s=1^o,l=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+c+","+f:(Math.abs(this._x1-c)>1e-6||Math.abs(this._y1-f)>1e-6)&&(this._+="L"+c+","+f),e&&(l<0&&(l=l%zo+zo),l>qo?this._+="A"+e+","+e+",0,1,"+s+","+(t-u)+","+(n-a)+"A"+e+","+e+",0,1,"+s+","+(this._x1=c)+","+(this._y1=f):l>1e-6&&(this._+="A"+e+","+e+",0,"+ +(l>=Lo)+","+s+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};var Fo=Uo;function Ho(t){return t.source}function Wo(t){return t.target}function Yo(t){return t.radius}function Vo(t){return t.startAngle}function Xo(t){return t.endAngle}var Go=function(){var t=Ho,n=Wo,e=Yo,r=Vo,i=Xo,o=null;function u(){var u,a=$o.call(arguments),c=t.apply(this,a),f=n.apply(this,a),s=+e.apply(this,(a[0]=c,a)),l=r.apply(this,a)-Oo,h=i.apply(this,a)-Oo,d=s*Eo(l),p=s*No(l),v=+e.apply(this,(a[0]=f,a)),g=r.apply(this,a)-Oo,y=i.apply(this,a)-Oo;if(o||(o=u=Fo()),o.moveTo(d,p),o.arc(0,0,s,l,h),l===g&&h===y||(o.quadraticCurveTo(0,0,v*Eo(g),v*No(g)),o.arc(0,0,v,g,y)),o.quadraticCurveTo(0,0,d,p),o.closePath(),u)return o=null,u+""||null}return u.radius=function(t){return arguments.length?(e="function"==typeof t?t:Io(+t),u):e},u.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:Io(+t),u):r},u.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:Io(+t),u):i},u.source=function(n){return arguments.length?(t=n,u):t},u.target=function(t){return arguments.length?(n=t,u):n},u.context=function(t){return arguments.length?(o=null==t?null:t,u):o},u};function Zo(){}function Qo(t,n){var e=new Zo;if(t instanceof Zo)t.each(function(t,n){e.set(n,t)});else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var u in t)e.set(u,t[u]);return e}Zo.prototype=Qo.prototype={constructor:Zo,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var Jo=Qo,Ko=function(){var t,n,e,r=[],i=[];function o(e,i,u,a){if(i>=r.length)return null!=t&&e.sort(t),null!=n?n(e):e;for(var c,f,s,l=-1,h=e.length,d=r[i++],p=Jo(),v=u();++l<h;)(s=p.get(c=d(f=e[l])+""))?s.push(f):p.set(c,[f]);return p.each(function(t,n){a(v,n,o(t,i,u,a))}),v}return e={object:function(t){return o(t,0,tu,nu)},map:function(t){return o(t,0,eu,ru)},entries:function(t){return function t(e,o){if(++o>r.length)return e;var u,a=i[o-1];return null!=n&&o>=r.length?u=e.entries():(u=[],e.each(function(n,e){u.push({key:e,values:t(n,o)})})),null!=a?u.sort(function(t,n){return a(t.key,n.key)}):u}(o(t,0,eu,ru),0)},key:function(t){return r.push(t),e},sortKeys:function(t){return i[r.length-1]=t,e},sortValues:function(n){return t=n,e},rollup:function(t){return n=t,e}}};function tu(){return{}}function nu(t,n,e){t[n]=e}function eu(){return Jo()}function ru(t,n,e){t.set(n,e)}function iu(){}var ou=Jo.prototype;function uu(t,n){var e=new iu;if(t instanceof iu)t.each(function(t){e.add(t)});else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}iu.prototype=uu.prototype={constructor:iu,has:ou.has,add:function(t){return this["$"+(t+="")]=t,this},remove:ou.remove,clear:ou.clear,values:ou.keys,size:ou.size,empty:ou.empty,each:ou.each};var au=uu,cu=function(t){var n=[];for(var e in t)n.push(e);return n},fu=function(t){var n=[];for(var e in t)n.push(t[e]);return n},su=function(t){var n=[];for(var e in t)n.push({key:e,value:t[e]});return n},lu=Array.prototype.slice,hu=function(t,n){return t-n},du=function(t){for(var n=0,e=t.length,r=t[e-1][1]*t[0][0]-t[e-1][0]*t[0][1];++n<e;)r+=t[n-1][1]*t[n][0]-t[n-1][0]*t[n][1];return r},pu=function(t){return function(){return t}},vu=function(t,n){for(var e,r=-1,i=n.length;++r<i;)if(e=gu(t,n[r]))return e;return 0};function gu(t,n){for(var e=n[0],r=n[1],i=-1,o=0,u=t.length,a=u-1;o<u;a=o++){var c=t[o],f=c[0],s=c[1],l=t[a],h=l[0],d=l[1];if(yu(c,l,n))return 0;s>r!=d>r&&e<(h-f)*(r-s)/(d-s)+f&&(i=-i)}return i}function yu(t,n,e){var r,i,o,u;return function(t,n,e){return(n[0]-t[0])*(e[1]-t[1])==(e[0]-t[0])*(n[1]-t[1])}(t,n,e)&&(i=t[r=+(t[0]===n[0])],o=e[r],u=n[r],i<=o&&o<=u||u<=o&&o<=i)}var mu=function(){},bu=[[],[[[1,1.5],[.5,1]]],[[[1.5,1],[1,1.5]]],[[[1.5,1],[.5,1]]],[[[1,.5],[1.5,1]]],[[[1,1.5],[.5,1]],[[1,.5],[1.5,1]]],[[[1,.5],[1,1.5]]],[[[1,.5],[.5,1]]],[[[.5,1],[1,.5]]],[[[1,1.5],[1,.5]]],[[[.5,1],[1,.5]],[[1.5,1],[1,1.5]]],[[[1.5,1],[1,.5]]],[[[.5,1],[1.5,1]]],[[[1,1.5],[1.5,1]]],[[[.5,1],[1,1.5]]],[]],_u=function(){var t=1,n=1,e=E,r=a;function i(t){var n=e(t);if(Array.isArray(n))n=n.slice().sort(hu);else{var r=g(t),i=r[0],u=r[1];n=k(i,u,n),n=w(Math.floor(i/n)*n,Math.floor(u/n)*n,n)}return n.map(function(n){return o(t,n)})}function o(e,i){var o=[],a=[];return function(e,r,i){var o,a,c,f,s,l,h=new Array,d=new Array;o=a=-1,f=e[0]>=r,bu[f<<1].forEach(p);for(;++o<t-1;)c=f,f=e[o+1]>=r,bu[c|f<<1].forEach(p);bu[f<<0].forEach(p);for(;++a<n-1;){for(o=-1,f=e[a*t+t]>=r,s=e[a*t]>=r,bu[f<<1|s<<2].forEach(p);++o<t-1;)c=f,f=e[a*t+t+o+1]>=r,l=s,s=e[a*t+o+1]>=r,bu[c|f<<1|s<<2|l<<3].forEach(p);bu[f|s<<3].forEach(p)}o=-1,s=e[a*t]>=r,bu[s<<2].forEach(p);for(;++o<t-1;)l=s,s=e[a*t+o+1]>=r,bu[s<<2|l<<3].forEach(p);function p(t){var n,e,r=[t[0][0]+o,t[0][1]+a],c=[t[1][0]+o,t[1][1]+a],f=u(r),s=u(c);(n=d[f])?(e=h[s])?(delete d[n.end],delete h[e.start],n===e?(n.ring.push(c),i(n.ring)):h[n.start]=d[e.end]={start:n.start,end:e.end,ring:n.ring.concat(e.ring)}):(delete d[n.end],n.ring.push(c),d[n.end=s]=n):(n=h[s])?(e=d[f])?(delete h[n.start],delete d[e.end],n===e?(n.ring.push(c),i(n.ring)):h[e.start]=d[n.end]={start:e.start,end:n.end,ring:e.ring.concat(n.ring)}):(delete h[n.start],n.ring.unshift(r),h[n.start=f]=n):h[f]=d[s]={start:f,end:s,ring:[r,c]}}bu[s<<3].forEach(p)}(e,i,function(t){r(t,e,i),du(t)>0?o.push([t]):a.push(t)}),a.forEach(function(t){for(var n,e=0,r=o.length;e<r;++e)if(-1!==vu((n=o[e])[0],t))return void n.push(t)}),{type:"MultiPolygon",value:i,coordinates:o}}function u(n){return 2*n[0]+n[1]*(t+1)*4}function a(e,r,i){e.forEach(function(e){var o,u=e[0],a=e[1],c=0|u,f=0|a,s=r[f*t+c];u>0&&u<t&&c===u&&(o=r[f*t+c-1],e[0]=u+(i-o)/(s-o)-.5),a>0&&a<n&&f===a&&(o=r[(f-1)*t+c],e[1]=a+(i-o)/(s-o)-.5)})}return i.contour=o,i.size=function(e){if(!arguments.length)return[t,n];var r=Math.ceil(e[0]),o=Math.ceil(e[1]);if(!(r>0&&o>0))throw new Error("invalid size");return t=r,n=o,i},i.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:Array.isArray(t)?pu(lu.call(t)):pu(t),i):e},i.smooth=function(t){return arguments.length?(r=t?a:mu,i):r===a},i};function xu(t,n,e){for(var r=t.width,i=t.height,o=1+(e<<1),u=0;u<i;++u)for(var a=0,c=0;a<r+e;++a)a<r&&(c+=t.data[a+u*r]),a>=e&&(a>=o&&(c-=t.data[a-o+u*r]),n.data[a-e+u*r]=c/Math.min(a+1,r-1+o-a,o))}function wu(t,n,e){for(var r=t.width,i=t.height,o=1+(e<<1),u=0;u<r;++u)for(var a=0,c=0;a<i+e;++a)a<i&&(c+=t.data[u+a*r]),a>=e&&(a>=o&&(c-=t.data[u+(a-o)*r]),n.data[u+(a-e)*r]=c/Math.min(a+1,i-1+o-a,o))}function Mu(t){return t[0]}function Tu(t){return t[1]}function Cu(){return 1}var Su=function(){var t=Mu,n=Tu,e=Cu,r=960,i=500,o=20,u=2,a=3*o,c=r+2*a>>u,f=i+2*a>>u,s=pu(20);function l(r){var i=new Float32Array(c*f),l=new Float32Array(c*f);r.forEach(function(r,o,s){var l=+t(r,o,s)+a>>u,h=+n(r,o,s)+a>>u,d=+e(r,o,s);l>=0&&l<c&&h>=0&&h<f&&(i[l+h*c]+=d)}),xu({width:c,height:f,data:i},{width:c,height:f,data:l},o>>u),wu({width:c,height:f,data:l},{width:c,height:f,data:i},o>>u),xu({width:c,height:f,data:i},{width:c,height:f,data:l},o>>u),wu({width:c,height:f,data:l},{width:c,height:f,data:i},o>>u),xu({width:c,height:f,data:i},{width:c,height:f,data:l},o>>u),wu({width:c,height:f,data:l},{width:c,height:f,data:i},o>>u);var d=s(i);if(!Array.isArray(d)){var p=j(i);d=k(0,p,d),(d=w(0,Math.floor(p/d)*d,d)).shift()}return _u().thresholds(d).size([c,f])(i).map(h)}function h(t){return t.value*=Math.pow(2,-2*u),t.coordinates.forEach(d),t}function d(t){t.forEach(p)}function p(t){t.forEach(v)}function v(t){t[0]=t[0]*Math.pow(2,u)-a,t[1]=t[1]*Math.pow(2,u)-a}function g(){return c=r+2*(a=3*o)>>u,f=i+2*a>>u,l}return l.x=function(n){return arguments.length?(t="function"==typeof n?n:pu(+n),l):t},l.y=function(t){return arguments.length?(n="function"==typeof t?t:pu(+t),l):n},l.weight=function(t){return arguments.length?(e="function"==typeof t?t:pu(+t),l):e},l.size=function(t){if(!arguments.length)return[r,i];var n=Math.ceil(t[0]),e=Math.ceil(t[1]);if(!(n>=0||n>=0))throw new Error("invalid size");return r=n,i=e,g()},l.cellSize=function(t){if(!arguments.length)return 1<<u;if(!((t=+t)>=1))throw new Error("invalid cell size");return u=Math.floor(Math.log(t)/Math.LN2),g()},l.thresholds=function(t){return arguments.length?(s="function"==typeof t?t:Array.isArray(t)?pu(lu.call(t)):pu(t),l):s},l.bandwidth=function(t){if(!arguments.length)return Math.sqrt(o*(o+1));if(!((t=+t)>=0))throw new Error("invalid bandwidth");return o=Math.round((Math.sqrt(4*t*t+1)-1)/2),g()},l},Au={},ku={},Eu=34,Nu=10,Du=13;function Ou(t){return new Function("d","return {"+t.map(function(t,n){return JSON.stringify(t)+": d["+n+"]"}).join(",")+"}")}var Ru=function(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],o=t.length,u=0,a=0,c=o<=0,f=!1;function s(){if(c)return ku;if(f)return f=!1,Au;var n,r,i=u;if(t.charCodeAt(i)===Eu){for(;u++<o&&t.charCodeAt(u)!==Eu||t.charCodeAt(++u)===Eu;);return(n=u)>=o?c=!0:(r=t.charCodeAt(u++))===Nu?f=!0:r===Du&&(f=!0,t.charCodeAt(u)===Nu&&++u),t.slice(i+1,n-1).replace(/""/g,'"')}for(;u<o;){if((r=t.charCodeAt(n=u++))===Nu)f=!0;else if(r===Du)f=!0,t.charCodeAt(u)===Nu&&++u;else if(r!==e)continue;return t.slice(i,n)}return c=!0,t.slice(i,o)}for(t.charCodeAt(o-1)===Nu&&--o,t.charCodeAt(o-1)===Du&&--o;(r=s())!==ku;){for(var l=[];r!==Au&&r!==ku;)l.push(r),r=s();n&&null==(l=n(l,a++))||i.push(l)}return i}function i(n){return n.map(o).join(t)}function o(t){return null==t?"":n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,o=r(t,function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=Ou(t);return function(r,i){return n(e(r),i,t)}}(t,n):Ou(t)});return o.columns=i||[],o},parseRows:r,format:function(n,e){return null==e&&(e=function(t){var n=Object.create(null),e=[];return t.forEach(function(t){for(var r in t)r in n||e.push(n[r]=r)}),e}(n)),[e.map(o).join(t)].concat(n.map(function(n){return e.map(function(t){return o(n[t])}).join(t)})).join("\n")},formatRows:function(t){return t.map(i).join("\n")}}},ju=Ru(","),Pu=ju.parse,$u=ju.parseRows,Iu=ju.format,Lu=ju.formatRows,zu=Ru("\t"),qu=zu.parse,Bu=zu.parseRows,Uu=zu.format,Fu=zu.formatRows;function Hu(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.blob()}var Wu=function(t,n){return fetch(t,n).then(Hu)};function Yu(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.arrayBuffer()}var Vu=function(t,n){return fetch(t,n).then(Yu)};function Xu(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var Gu=function(t,n){return fetch(t,n).then(Xu)};function Zu(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=void 0),Gu(n,e).then(function(n){return t(n,r)})}}function Qu(t,n,e,r){3===arguments.length&&"function"==typeof e&&(r=e,e=void 0);var i=Ru(t);return Gu(n,e).then(function(t){return i.parse(t,r)})}var Ju=Zu(Pu),Ku=Zu(qu),ta=function(t,n){return new Promise(function(e,r){var i=new Image;for(var o in n)i[o]=n[o];i.onerror=r,i.onload=function(){e(i)},i.src=t})};function na(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}var ea=function(t,n){return fetch(t,n).then(na)};function ra(t){return function(n,e){return Gu(n,e).then(function(n){return(new DOMParser).parseFromString(n,t)})}}var ia=ra("application/xml"),oa=ra("text/html"),ua=ra("image/svg+xml"),aa=function(t,n){var e;function r(){var r,i,o=e.length,u=0,a=0;for(r=0;r<o;++r)u+=(i=e[r]).x,a+=i.y;for(u=u/o-t,a=a/o-n,r=0;r<o;++r)(i=e[r]).x-=u,i.y-=a}return null==t&&(t=0),null==n&&(n=0),r.initialize=function(t){e=t},r.x=function(n){return arguments.length?(t=+n,r):t},r.y=function(t){return arguments.length?(n=+t,r):n},r},ca=function(t){return function(){return t}},fa=function(){return 1e-6*(Math.random()-.5)};function sa(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,o,u,a,c,f,s,l,h,d=t._root,p={data:r},v=t._x0,g=t._y0,y=t._x1,m=t._y1;if(!d)return t._root=p,t;for(;d.length;)if((f=n>=(o=(v+y)/2))?v=o:y=o,(s=e>=(u=(g+m)/2))?g=u:m=u,i=d,!(d=d[l=s<<1|f]))return i[l]=p,t;if(a=+t._x.call(null,d.data),c=+t._y.call(null,d.data),n===a&&e===c)return p.next=d,i?i[l]=p:t._root=p,t;do{i=i?i[l]=new Array(4):t._root=new Array(4),(f=n>=(o=(v+y)/2))?v=o:y=o,(s=e>=(u=(g+m)/2))?g=u:m=u}while((l=s<<1|f)==(h=(c>=u)<<1|a>=o));return i[h]=d,i[l]=p,t}var la=function(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i};function ha(t){return t[0]}function da(t){return t[1]}function pa(t,n,e){var r=new va(null==n?ha:n,null==e?da:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function va(t,n,e,r,i,o){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function ga(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var ya=pa.prototype=va.prototype;function ma(t){return t.x+t.vx}function ba(t){return t.y+t.vy}ya.copy=function(){var t,n,e=new va(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=ga(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=ga(n));return e},ya.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return sa(this.cover(n,e),n,e,t)},ya.addAll=function(t){var n,e,r,i,o=t.length,u=new Array(o),a=new Array(o),c=1/0,f=1/0,s=-1/0,l=-1/0;for(e=0;e<o;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(u[e]=r,a[e]=i,r<c&&(c=r),r>s&&(s=r),i<f&&(f=i),i>l&&(l=i));for(s<c&&(c=this._x0,s=this._x1),l<f&&(f=this._y0,l=this._y1),this.cover(c,f).cover(s,l),e=0;e<o;++e)sa(this,u[e],a[e],t[e]);return this},ya.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,o=(r=Math.floor(n))+1;else{if(!(e>t||t>i||r>n||n>o))return this;var u,a,c=i-e,f=this._root;switch(a=(n<(r+o)/2)<<1|t<(e+i)/2){case 0:do{(u=new Array(4))[a]=f,f=u}while(o=r+(c*=2),t>(i=e+c)||n>o);break;case 1:do{(u=new Array(4))[a]=f,f=u}while(o=r+(c*=2),(e=i-c)>t||n>o);break;case 2:do{(u=new Array(4))[a]=f,f=u}while(r=o-(c*=2),t>(i=e+c)||r>n);break;case 3:do{(u=new Array(4))[a]=f,f=u}while(r=o-(c*=2),(e=i-c)>t||r>n)}this._root&&this._root.length&&(this._root=f)}return this._x0=e,this._y0=r,this._x1=i,this._y1=o,this},ya.data=function(){var t=[];return this.visit(function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)}),t},ya.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},ya.find=function(t,n,e){var r,i,o,u,a,c,f,s=this._x0,l=this._y0,h=this._x1,d=this._y1,p=[],v=this._root;for(v&&p.push(new la(v,s,l,h,d)),null==e?e=1/0:(s=t-e,l=n-e,h=t+e,d=n+e,e*=e);c=p.pop();)if(!(!(v=c.node)||(i=c.x0)>h||(o=c.y0)>d||(u=c.x1)<s||(a=c.y1)<l))if(v.length){var g=(i+u)/2,y=(o+a)/2;p.push(new la(v[3],g,y,u,a),new la(v[2],i,y,g,a),new la(v[1],g,o,u,y),new la(v[0],i,o,g,y)),(f=(n>=y)<<1|t>=g)&&(c=p[p.length-1],p[p.length-1]=p[p.length-1-f],p[p.length-1-f]=c)}else{var m=t-+this._x.call(null,v.data),b=n-+this._y.call(null,v.data),_=m*m+b*b;if(_<e){var x=Math.sqrt(e=_);s=t-x,l=n-x,h=t+x,d=n+x,r=v.data}}return r},ya.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(u=+this._y.call(null,t)))return this;var n,e,r,i,o,u,a,c,f,s,l,h,d=this._root,p=this._x0,v=this._y0,g=this._x1,y=this._y1;if(!d)return this;if(d.length)for(;;){if((f=o>=(a=(p+g)/2))?p=a:g=a,(s=u>=(c=(v+y)/2))?v=c:y=c,n=d,!(d=d[l=s<<1|f]))return this;if(!d.length)break;(n[l+1&3]||n[l+2&3]||n[l+3&3])&&(e=n,h=l)}for(;d.data!==t;)if(r=d,!(d=d.next))return this;return(i=d.next)&&delete d.next,r?(i?r.next=i:delete r.next,this):n?(i?n[l]=i:delete n[l],(d=n[0]||n[1]||n[2]||n[3])&&d===(n[3]||n[2]||n[1]||n[0])&&!d.length&&(e?e[h]=d:this._root=d),this):(this._root=i,this)},ya.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},ya.root=function(){return this._root},ya.size=function(){var t=0;return this.visit(function(n){if(!n.length)do{++t}while(n=n.next)}),t},ya.visit=function(t){var n,e,r,i,o,u,a=[],c=this._root;for(c&&a.push(new la(c,this._x0,this._y0,this._x1,this._y1));n=a.pop();)if(!t(c=n.node,r=n.x0,i=n.y0,o=n.x1,u=n.y1)&&c.length){var f=(r+o)/2,s=(i+u)/2;(e=c[3])&&a.push(new la(e,f,s,o,u)),(e=c[2])&&a.push(new la(e,r,s,f,u)),(e=c[1])&&a.push(new la(e,f,i,o,s)),(e=c[0])&&a.push(new la(e,r,i,f,s))}return this},ya.visitAfter=function(t){var n,e=[],r=[];for(this._root&&e.push(new la(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var o,u=n.x0,a=n.y0,c=n.x1,f=n.y1,s=(u+c)/2,l=(a+f)/2;(o=i[0])&&e.push(new la(o,u,a,s,l)),(o=i[1])&&e.push(new la(o,s,a,c,l)),(o=i[2])&&e.push(new la(o,u,l,s,f)),(o=i[3])&&e.push(new la(o,s,l,c,f))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},ya.x=function(t){return arguments.length?(this._x=t,this):this._x},ya.y=function(t){return arguments.length?(this._y=t,this):this._y};var _a=function(t){var n,e,r=1,i=1;function o(){for(var t,o,a,c,f,s,l,h=n.length,d=0;d<i;++d)for(o=pa(n,ma,ba).visitAfter(u),t=0;t<h;++t)a=n[t],s=e[a.index],l=s*s,c=a.x+a.vx,f=a.y+a.vy,o.visit(p);function p(t,n,e,i,o){var u=t.data,h=t.r,d=s+h;if(!u)return n>c+d||i<c-d||e>f+d||o<f-d;if(u.index>a.index){var p=c-u.x-u.vx,v=f-u.y-u.vy,g=p*p+v*v;g<d*d&&(0===p&&(g+=(p=fa())*p),0===v&&(g+=(v=fa())*v),g=(d-(g=Math.sqrt(g)))/g*r,a.vx+=(p*=g)*(d=(h*=h)/(l+h)),a.vy+=(v*=g)*d,u.vx-=p*(d=1-d),u.vy-=v*d)}}}function u(t){if(t.data)return t.r=e[t.data.index];for(var n=t.r=0;n<4;++n)t[n]&&t[n].r>t.r&&(t.r=t[n].r)}function a(){if(n){var r,i,o=n.length;for(e=new Array(o),r=0;r<o;++r)i=n[r],e[i.index]=+t(i,r,n)}}return"function"!=typeof t&&(t=ca(null==t?1:+t)),o.initialize=function(t){n=t,a()},o.iterations=function(t){return arguments.length?(i=+t,o):i},o.strength=function(t){return arguments.length?(r=+t,o):r},o.radius=function(n){return arguments.length?(t="function"==typeof n?n:ca(+n),a(),o):t},o};function xa(t){return t.index}function wa(t,n){var e=t.get(n);if(!e)throw new Error("missing: "+n);return e}var Ma=function(t){var n,e,r,i,o,u=xa,a=function(t){return 1/Math.min(i[t.source.index],i[t.target.index])},c=ca(30),f=1;function s(r){for(var i=0,u=t.length;i<f;++i)for(var a,c,s,l,h,d,p,v=0;v<u;++v)c=(a=t[v]).source,l=(s=a.target).x+s.vx-c.x-c.vx||fa(),h=s.y+s.vy-c.y-c.vy||fa(),l*=d=((d=Math.sqrt(l*l+h*h))-e[v])/d*r*n[v],h*=d,s.vx-=l*(p=o[v]),s.vy-=h*p,c.vx+=l*(p=1-p),c.vy+=h*p}function l(){if(r){var a,c,f=r.length,s=t.length,l=Jo(r,u);for(a=0,i=new Array(f);a<s;++a)(c=t[a]).index=a,"object"!=typeof c.source&&(c.source=wa(l,c.source)),"object"!=typeof c.target&&(c.target=wa(l,c.target)),i[c.source.index]=(i[c.source.index]||0)+1,i[c.target.index]=(i[c.target.index]||0)+1;for(a=0,o=new Array(s);a<s;++a)c=t[a],o[a]=i[c.source.index]/(i[c.source.index]+i[c.target.index]);n=new Array(s),h(),e=new Array(s),d()}}function h(){if(r)for(var e=0,i=t.length;e<i;++e)n[e]=+a(t[e],e,t)}function d(){if(r)for(var n=0,i=t.length;n<i;++n)e[n]=+c(t[n],n,t)}return null==t&&(t=[]),s.initialize=function(t){r=t,l()},s.links=function(n){return arguments.length?(t=n,l(),s):t},s.id=function(t){return arguments.length?(u=t,s):u},s.iterations=function(t){return arguments.length?(f=+t,s):f},s.strength=function(t){return arguments.length?(a="function"==typeof t?t:ca(+t),h(),s):a},s.distance=function(t){return arguments.length?(c="function"==typeof t?t:ca(+t),d(),s):c},s};function Ta(t){return t.x}function Ca(t){return t.y}var Sa=10,Aa=Math.PI*(3-Math.sqrt(5)),ka=function(t){var n,e=1,r=.001,i=1-Math.pow(r,1/300),o=0,u=.6,a=Jo(),c=$r(s),f=ht("tick","end");function s(){l(),f.call("tick",n),e<r&&(c.stop(),f.call("end",n))}function l(){var n,r,c=t.length;for(e+=(o-e)*i,a.each(function(t){t(e)}),n=0;n<c;++n)null==(r=t[n]).fx?r.x+=r.vx*=u:(r.x=r.fx,r.vx=0),null==r.fy?r.y+=r.vy*=u:(r.y=r.fy,r.vy=0)}function h(){for(var n,e=0,r=t.length;e<r;++e){if((n=t[e]).index=e,isNaN(n.x)||isNaN(n.y)){var i=Sa*Math.sqrt(e),o=e*Aa;n.x=i*Math.cos(o),n.y=i*Math.sin(o)}(isNaN(n.vx)||isNaN(n.vy))&&(n.vx=n.vy=0)}}function d(n){return n.initialize&&n.initialize(t),n}return null==t&&(t=[]),h(),n={tick:l,restart:function(){return c.restart(s),n},stop:function(){return c.stop(),n},nodes:function(e){return arguments.length?(t=e,h(),a.each(d),n):t},alpha:function(t){return arguments.length?(e=+t,n):e},alphaMin:function(t){return arguments.length?(r=+t,n):r},alphaDecay:function(t){return arguments.length?(i=+t,n):+i},alphaTarget:function(t){return arguments.length?(o=+t,n):o},velocityDecay:function(t){return arguments.length?(u=1-t,n):1-u},force:function(t,e){return arguments.length>1?(null==e?a.remove(t):a.set(t,d(e)),n):a.get(t)},find:function(n,e,r){var i,o,u,a,c,f=0,s=t.length;for(null==r?r=1/0:r*=r,f=0;f<s;++f)(u=(i=n-(a=t[f]).x)*i+(o=e-a.y)*o)<r&&(c=a,r=u);return c},on:function(t,e){return arguments.length>1?(f.on(t,e),n):f.on(t)}}},Ea=function(){var t,n,e,r,i=ca(-30),o=1,u=1/0,a=.81;function c(r){var i,o=t.length,u=pa(t,Ta,Ca).visitAfter(s);for(e=r,i=0;i<o;++i)n=t[i],u.visit(l)}function f(){if(t){var n,e,o=t.length;for(r=new Array(o),n=0;n<o;++n)e=t[n],r[e.index]=+i(e,n,t)}}function s(t){var n,e,i,o,u,a=0,c=0;if(t.length){for(i=o=u=0;u<4;++u)(n=t[u])&&(e=Math.abs(n.value))&&(a+=n.value,c+=e,i+=e*n.x,o+=e*n.y);t.x=i/c,t.y=o/c}else{(n=t).x=n.data.x,n.y=n.data.y;do{a+=r[n.data.index]}while(n=n.next)}t.value=a}function l(t,i,c,f){if(!t.value)return!0;var s=t.x-n.x,l=t.y-n.y,h=f-i,d=s*s+l*l;if(h*h/a<d)return d<u&&(0===s&&(d+=(s=fa())*s),0===l&&(d+=(l=fa())*l),d<o&&(d=Math.sqrt(o*d)),n.vx+=s*t.value*e/d,n.vy+=l*t.value*e/d),!0;if(!(t.length||d>=u)){(t.data!==n||t.next)&&(0===s&&(d+=(s=fa())*s),0===l&&(d+=(l=fa())*l),d<o&&(d=Math.sqrt(o*d)));do{t.data!==n&&(h=r[t.data.index]*e/d,n.vx+=s*h,n.vy+=l*h)}while(t=t.next)}}return c.initialize=function(n){t=n,f()},c.strength=function(t){return arguments.length?(i="function"==typeof t?t:ca(+t),f(),c):i},c.distanceMin=function(t){return arguments.length?(o=t*t,c):Math.sqrt(o)},c.distanceMax=function(t){return arguments.length?(u=t*t,c):Math.sqrt(u)},c.theta=function(t){return arguments.length?(a=t*t,c):Math.sqrt(a)},c},Na=function(t,n,e){var r,i,o,u=ca(.1);function a(t){for(var u=0,a=r.length;u<a;++u){var c=r[u],f=c.x-n||1e-6,s=c.y-e||1e-6,l=Math.sqrt(f*f+s*s),h=(o[u]-l)*i[u]*t/l;c.vx+=f*h,c.vy+=s*h}}function c(){if(r){var n,e=r.length;for(i=new Array(e),o=new Array(e),n=0;n<e;++n)o[n]=+t(r[n],n,r),i[n]=isNaN(o[n])?0:+u(r[n],n,r)}}return"function"!=typeof t&&(t=ca(+t)),null==n&&(n=0),null==e&&(e=0),a.initialize=function(t){r=t,c()},a.strength=function(t){return arguments.length?(u="function"==typeof t?t:ca(+t),c(),a):u},a.radius=function(n){return arguments.length?(t="function"==typeof n?n:ca(+n),c(),a):t},a.x=function(t){return arguments.length?(n=+t,a):n},a.y=function(t){return arguments.length?(e=+t,a):e},a},Da=function(t){var n,e,r,i=ca(.1);function o(t){for(var i,o=0,u=n.length;o<u;++o)(i=n[o]).vx+=(r[o]-i.x)*e[o]*t}function u(){if(n){var o,u=n.length;for(e=new Array(u),r=new Array(u),o=0;o<u;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=ca(null==t?0:+t)),o.initialize=function(t){n=t,u()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:ca(+t),u(),o):i},o.x=function(n){return arguments.length?(t="function"==typeof n?n:ca(+n),u(),o):t},o},Oa=function(t){var n,e,r,i=ca(.1);function o(t){for(var i,o=0,u=n.length;o<u;++o)(i=n[o]).vy+=(r[o]-i.y)*e[o]*t}function u(){if(n){var o,u=n.length;for(e=new Array(u),r=new Array(u),o=0;o<u;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=ca(null==t?0:+t)),o.initialize=function(t){n=t,u()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:ca(+t),u(),o):i},o.y=function(n){return arguments.length?(t="function"==typeof n?n:ca(+n),u(),o):t},o},Ra=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]},ja=function(t){return(t=Ra(Math.abs(t)))?t[1]:NaN},Pa=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function $a(t){return new Ia(t)}function Ia(t){if(!(n=Pa.exec(t)))throw new Error("invalid format: "+t);var n;this.fill=n[1]||" ",this.align=n[2]||">",this.sign=n[3]||"-",this.symbol=n[4]||"",this.zero=!!n[5],this.width=n[6]&&+n[6],this.comma=!!n[7],this.precision=n[8]&&+n[8].slice(1),this.trim=!!n[9],this.type=n[10]||""}$a.prototype=Ia.prototype,Ia.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var La,za,qa,Ba,Ua=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(i>0){if(!+t[r])break t;i=0}}return i>0?t.slice(0,i)+t.slice(n+1):t},Fa=function(t,n){var e=Ra(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},Ha={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return Fa(100*t,n)},r:Fa,s:function(t,n){var e=Ra(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(La=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,u=r.length;return o===u?r:o>u?r+new Array(o-u+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Ra(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},Wa=function(t){return t},Ya=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"],Va=function(t){var n,e,r=t.grouping&&t.thousands?(n=t.grouping,e=t.thousands,function(t,r){for(var i=t.length,o=[],u=0,a=n[0],c=0;i>0&&a>0&&(c+a+1>r&&(a=Math.max(1,r-c)),o.push(t.substring(i-=a,i+a)),!((c+=a+1)>r));)a=n[u=(u+1)%n.length];return o.reverse().join(e)}):Wa,i=t.currency,o=t.decimal,u=t.numerals?function(t){return function(n){return n.replace(/[0-9]/g,function(n){return t[+n]})}}(t.numerals):Wa,a=t.percent||"%";function c(t){var n=(t=$a(t)).fill,e=t.align,c=t.sign,f=t.symbol,s=t.zero,l=t.width,h=t.comma,d=t.precision,p=t.trim,v=t.type;"n"===v?(h=!0,v="g"):Ha[v]||(null==d&&(d=12),p=!0,v="g"),(s||"0"===n&&"="===e)&&(s=!0,n="0",e="=");var g="$"===f?i[0]:"#"===f&&/[boxX]/.test(v)?"0"+v.toLowerCase():"",y="$"===f?i[1]:/[%p]/.test(v)?a:"",m=Ha[v],b=/[defgprs%]/.test(v);function _(t){var i,a,f,_=g,x=y;if("c"===v)x=m(t)+x,t="";else{var w=(t=+t)<0;if(t=m(Math.abs(t),d),p&&(t=Ua(t)),w&&0==+t&&(w=!1),_=(w?"("===c?c:"-":"-"===c||"("===c?"":c)+_,x=("s"===v?Ya[8+La/3]:"")+x+(w&&"("===c?")":""),b)for(i=-1,a=t.length;++i<a;)if(48>(f=t.charCodeAt(i))||f>57){x=(46===f?o+t.slice(i+1):t.slice(i))+x,t=t.slice(0,i);break}}h&&!s&&(t=r(t,1/0));var M=_.length+t.length+x.length,T=M<l?new Array(l-M+1).join(n):"";switch(h&&s&&(t=r(T+t,T.length?l-x.length:1/0),T=""),e){case"<":t=_+t+x+T;break;case"=":t=_+T+t+x;break;case"^":t=T.slice(0,M=T.length>>1)+_+t+x+T.slice(M);break;default:t=T+_+t+x}return u(t)}return d=null==d?6:/[gprs]/.test(v)?Math.max(1,Math.min(21,d)):Math.max(0,Math.min(20,d)),_.toString=function(){return t+""},_}return{format:c,formatPrefix:function(t,n){var e=c(((t=$a(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(ja(n)/3))),i=Math.pow(10,-r),o=Ya[8+r/3];return function(t){return e(i*t)+o}}}};function Xa(t){return za=Va(t),qa=za.format,Ba=za.formatPrefix,za}Xa({decimal:".",thousands:",",grouping:[3],currency:["$",""]});var Ga=function(t){return Math.max(0,-ja(Math.abs(t)))},Za=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(ja(n)/3)))-ja(Math.abs(t)))},Qa=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,ja(n)-ja(t))+1},Ja=function(){return new Ka};function Ka(){this.reset()}Ka.prototype={constructor:Ka,reset:function(){this.s=this.t=0},add:function(t){nc(tc,t,this.t),nc(this,tc.s,this.s),this.s?this.t+=tc.t:this.s=tc.t},valueOf:function(){return this.s}};var tc=new Ka;function nc(t,n,e){var r=t.s=n+e,i=r-n,o=r-i;t.t=n-o+(e-i)}var ec=1e-6,rc=Math.PI,ic=rc/2,oc=rc/4,uc=2*rc,ac=180/rc,cc=rc/180,fc=Math.abs,sc=Math.atan,lc=Math.atan2,hc=Math.cos,dc=Math.ceil,pc=Math.exp,vc=(Math.floor,Math.log),gc=Math.pow,yc=Math.sin,mc=Math.sign||function(t){return t>0?1:t<0?-1:0},bc=Math.sqrt,_c=Math.tan;function xc(t){return t>1?0:t<-1?rc:Math.acos(t)}function wc(t){return t>1?ic:t<-1?-ic:Math.asin(t)}function Mc(t){return(t=yc(t/2))*t}function Tc(){}function Cc(t,n){t&&Ac.hasOwnProperty(t.type)&&Ac[t.type](t,n)}var Sc={Feature:function(t,n){Cc(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)Cc(e[r].geometry,n)}},Ac={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){kc(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)kc(e[r],n,0)},Polygon:function(t,n){Ec(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)Ec(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)Cc(e[r],n)}};function kc(t,n,e){var r,i=-1,o=t.length-e;for(n.lineStart();++i<o;)r=t[i],n.point(r[0],r[1],r[2]);n.lineEnd()}function Ec(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)kc(t[e],n,1);n.polygonEnd()}var Nc,Dc,Oc,Rc,jc,Pc=function(t,n){t&&Sc.hasOwnProperty(t.type)?Sc[t.type](t,n):Cc(t,n)},$c=Ja(),Ic=Ja(),Lc={point:Tc,lineStart:Tc,lineEnd:Tc,polygonStart:function(){$c.reset(),Lc.lineStart=zc,Lc.lineEnd=qc},polygonEnd:function(){var t=+$c;Ic.add(t<0?uc+t:t),this.lineStart=this.lineEnd=this.point=Tc},sphere:function(){Ic.add(uc)}};function zc(){Lc.point=Bc}function qc(){Uc(Nc,Dc)}function Bc(t,n){Lc.point=Uc,Nc=t,Dc=n,Oc=t*=cc,Rc=hc(n=(n*=cc)/2+oc),jc=yc(n)}function Uc(t,n){var e=(t*=cc)-Oc,r=e>=0?1:-1,i=r*e,o=hc(n=(n*=cc)/2+oc),u=yc(n),a=jc*u,c=Rc*o+a*hc(i),f=a*r*yc(i);$c.add(lc(f,c)),Oc=t,Rc=o,jc=u}var Fc=function(t){return Ic.reset(),Pc(t,Lc),2*Ic};function Hc(t){return[lc(t[1],t[0]),wc(t[2])]}function Wc(t){var n=t[0],e=t[1],r=hc(e);return[r*hc(n),r*yc(n),yc(e)]}function Yc(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function Vc(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function Xc(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function Gc(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function Zc(t){var n=bc(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}var Qc,Jc,Kc,tf,nf,ef,rf,of,uf,af,cf=Ja(),ff={point:sf,lineStart:hf,lineEnd:df,polygonStart:function(){ff.point=pf,ff.lineStart=vf,ff.lineEnd=gf,cf.reset(),Lc.polygonStart()},polygonEnd:function(){Lc.polygonEnd(),ff.point=sf,ff.lineStart=hf,ff.lineEnd=df,$c<0?(Qc=-(Kc=180),Jc=-(tf=90)):cf>ec?tf=90:cf<-ec&&(Jc=-90),af[0]=Qc,af[1]=Kc}};function sf(t,n){uf.push(af=[Qc=t,Kc=t]),n<Jc&&(Jc=n),n>tf&&(tf=n)}function lf(t,n){var e=Wc([t*cc,n*cc]);if(of){var r=Vc(of,e),i=Vc([r[1],-r[0],0],r);Zc(i),i=Hc(i);var o,u=t-nf,a=u>0?1:-1,c=i[0]*ac*a,f=fc(u)>180;f^(a*nf<c&&c<a*t)?(o=i[1]*ac)>tf&&(tf=o):f^(a*nf<(c=(c+360)%360-180)&&c<a*t)?(o=-i[1]*ac)<Jc&&(Jc=o):(n<Jc&&(Jc=n),n>tf&&(tf=n)),f?t<nf?yf(Qc,t)>yf(Qc,Kc)&&(Kc=t):yf(t,Kc)>yf(Qc,Kc)&&(Qc=t):Kc>=Qc?(t<Qc&&(Qc=t),t>Kc&&(Kc=t)):t>nf?yf(Qc,t)>yf(Qc,Kc)&&(Kc=t):yf(t,Kc)>yf(Qc,Kc)&&(Qc=t)}else uf.push(af=[Qc=t,Kc=t]);n<Jc&&(Jc=n),n>tf&&(tf=n),of=e,nf=t}function hf(){ff.point=lf}function df(){af[0]=Qc,af[1]=Kc,ff.point=sf,of=null}function pf(t,n){if(of){var e=t-nf;cf.add(fc(e)>180?e+(e>0?360:-360):e)}else ef=t,rf=n;Lc.point(t,n),lf(t,n)}function vf(){Lc.lineStart()}function gf(){pf(ef,rf),Lc.lineEnd(),fc(cf)>ec&&(Qc=-(Kc=180)),af[0]=Qc,af[1]=Kc,of=null}function yf(t,n){return(n-=t)<0?n+360:n}function mf(t,n){return t[0]-n[0]}function bf(t,n){return t[0]<=t[1]?t[0]<=n&&n<=t[1]:n<t[0]||t[1]<n}var _f,xf,wf,Mf,Tf,Cf,Sf,Af,kf,Ef,Nf,Df,Of,Rf,jf,Pf,$f=function(t){var n,e,r,i,o,u,a;if(tf=Kc=-(Qc=Jc=1/0),uf=[],Pc(t,ff),e=uf.length){for(uf.sort(mf),n=1,o=[r=uf[0]];n<e;++n)bf(r,(i=uf[n])[0])||bf(r,i[1])?(yf(r[0],i[1])>yf(r[0],r[1])&&(r[1]=i[1]),yf(i[0],r[1])>yf(r[0],r[1])&&(r[0]=i[0])):o.push(r=i);for(u=-1/0,n=0,r=o[e=o.length-1];n<=e;r=i,++n)i=o[n],(a=yf(r[1],i[0]))>u&&(u=a,Qc=i[0],Kc=r[1])}return uf=af=null,Qc===1/0||Jc===1/0?[[NaN,NaN],[NaN,NaN]]:[[Qc,Jc],[Kc,tf]]},If={sphere:Tc,point:Lf,lineStart:qf,lineEnd:Ff,polygonStart:function(){If.lineStart=Hf,If.lineEnd=Wf},polygonEnd:function(){If.lineStart=qf,If.lineEnd=Ff}};function Lf(t,n){t*=cc;var e=hc(n*=cc);zf(e*hc(t),e*yc(t),yc(n))}function zf(t,n,e){wf+=(t-wf)/++_f,Mf+=(n-Mf)/_f,Tf+=(e-Tf)/_f}function qf(){If.point=Bf}function Bf(t,n){t*=cc;var e=hc(n*=cc);Rf=e*hc(t),jf=e*yc(t),Pf=yc(n),If.point=Uf,zf(Rf,jf,Pf)}function Uf(t,n){t*=cc;var e=hc(n*=cc),r=e*hc(t),i=e*yc(t),o=yc(n),u=lc(bc((u=jf*o-Pf*i)*u+(u=Pf*r-Rf*o)*u+(u=Rf*i-jf*r)*u),Rf*r+jf*i+Pf*o);xf+=u,Cf+=u*(Rf+(Rf=r)),Sf+=u*(jf+(jf=i)),Af+=u*(Pf+(Pf=o)),zf(Rf,jf,Pf)}function Ff(){If.point=Lf}function Hf(){If.point=Yf}function Wf(){Vf(Df,Of),If.point=Lf}function Yf(t,n){Df=t,Of=n,t*=cc,n*=cc,If.point=Vf;var e=hc(n);Rf=e*hc(t),jf=e*yc(t),Pf=yc(n),zf(Rf,jf,Pf)}function Vf(t,n){t*=cc;var e=hc(n*=cc),r=e*hc(t),i=e*yc(t),o=yc(n),u=jf*o-Pf*i,a=Pf*r-Rf*o,c=Rf*i-jf*r,f=bc(u*u+a*a+c*c),s=wc(f),l=f&&-s/f;kf+=l*u,Ef+=l*a,Nf+=l*c,xf+=s,Cf+=s*(Rf+(Rf=r)),Sf+=s*(jf+(jf=i)),Af+=s*(Pf+(Pf=o)),zf(Rf,jf,Pf)}var Xf=function(t){_f=xf=wf=Mf=Tf=Cf=Sf=Af=kf=Ef=Nf=0,Pc(t,If);var n=kf,e=Ef,r=Nf,i=n*n+e*e+r*r;return i<1e-12&&(n=Cf,e=Sf,r=Af,xf<ec&&(n=wf,e=Mf,r=Tf),(i=n*n+e*e+r*r)<1e-12)?[NaN,NaN]:[lc(e,n)*ac,wc(r/bc(i))*ac]},Gf=function(t){return function(){return t}},Zf=function(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return(e=n.invert(e,r))&&t.invert(e[0],e[1])}),e};function Qf(t,n){return[t>rc?t-uc:t<-rc?t+uc:t,n]}function Jf(t,n,e){return(t%=uc)?n||e?Zf(ts(t),ns(n,e)):ts(t):n||e?ns(n,e):Qf}function Kf(t){return function(n,e){return[(n+=t)>rc?n-uc:n<-rc?n+uc:n,e]}}function ts(t){var n=Kf(t);return n.invert=Kf(-t),n}function ns(t,n){var e=hc(t),r=yc(t),i=hc(n),o=yc(n);function u(t,n){var u=hc(n),a=hc(t)*u,c=yc(t)*u,f=yc(n),s=f*e+a*r;return[lc(c*i-s*o,a*e-f*r),wc(s*i+c*o)]}return u.invert=function(t,n){var u=hc(n),a=hc(t)*u,c=yc(t)*u,f=yc(n),s=f*i-c*o;return[lc(c*i+f*o,a*e+s*r),wc(s*e-a*r)]},u}Qf.invert=Qf;var es=function(t){function n(n){return(n=t(n[0]*cc,n[1]*cc))[0]*=ac,n[1]*=ac,n}return t=Jf(t[0]*cc,t[1]*cc,t.length>2?t[2]*cc:0),n.invert=function(n){return(n=t.invert(n[0]*cc,n[1]*cc))[0]*=ac,n[1]*=ac,n},n};function rs(t,n,e,r,i,o){if(e){var u=hc(n),a=yc(n),c=r*e;null==i?(i=n+r*uc,o=n-c/2):(i=is(u,i),o=is(u,o),(r>0?i<o:i>o)&&(i+=r*uc));for(var f,s=i;r>0?s>o:s<o;s-=c)f=Hc([u,-a*hc(s),-a*yc(s)]),t.point(f[0],f[1])}}function is(t,n){(n=Wc(n))[0]-=t,Zc(n);var e=xc(-n[1]);return((-n[2]<0?-e:e)+uc-ec)%uc}var os=function(){var t,n,e=Gf([0,0]),r=Gf(90),i=Gf(6),o={point:function(e,r){t.push(e=n(e,r)),e[0]*=ac,e[1]*=ac}};function u(){var u=e.apply(this,arguments),a=r.apply(this,arguments)*cc,c=i.apply(this,arguments)*cc;return t=[],n=Jf(-u[0]*cc,-u[1]*cc,0).invert,rs(o,a,c,1),u={type:"Polygon",coordinates:[t]},t=n=null,u}return u.center=function(t){return arguments.length?(e="function"==typeof t?t:Gf([+t[0],+t[1]]),u):e},u.radius=function(t){return arguments.length?(r="function"==typeof t?t:Gf(+t),u):r},u.precision=function(t){return arguments.length?(i="function"==typeof t?t:Gf(+t),u):i},u},us=function(){var t,n=[];return{point:function(n,e){t.push([n,e])},lineStart:function(){n.push(t=[])},lineEnd:Tc,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}},as=function(t,n){return fc(t[0]-n[0])<ec&&fc(t[1]-n[1])<ec};function cs(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}var fs=function(t,n,e,r,i){var o,u,a=[],c=[];if(t.forEach(function(t){if(!((n=t.length-1)<=0)){var n,e,r=t[0],u=t[n];if(as(r,u)){for(i.lineStart(),o=0;o<n;++o)i.point((r=t[o])[0],r[1]);i.lineEnd()}else a.push(e=new cs(r,t,null,!0)),c.push(e.o=new cs(r,null,e,!1)),a.push(e=new cs(u,t,null,!1)),c.push(e.o=new cs(u,null,e,!0))}}),a.length){for(c.sort(n),ss(a),ss(c),o=0,u=c.length;o<u;++o)c[o].e=e=!e;for(var f,s,l=a[0];;){for(var h=l,d=!0;h.v;)if((h=h.n)===l)return;f=h.z,i.lineStart();do{if(h.v=h.o.v=!0,h.e){if(d)for(o=0,u=f.length;o<u;++o)i.point((s=f[o])[0],s[1]);else r(h.x,h.n.x,1,i);h=h.n}else{if(d)for(f=h.p.z,o=f.length-1;o>=0;--o)i.point((s=f[o])[0],s[1]);else r(h.x,h.p.x,-1,i);h=h.p}f=(h=h.o).z,d=!d}while(!h.v);i.lineEnd()}}};function ss(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}var ls=Ja(),hs=function(t,n){var e=n[0],r=n[1],i=yc(r),o=[yc(e),-hc(e),0],u=0,a=0;ls.reset(),1===i?r=ic+ec:-1===i&&(r=-ic-ec);for(var c=0,f=t.length;c<f;++c)if(l=(s=t[c]).length)for(var s,l,h=s[l-1],d=h[0],p=h[1]/2+oc,v=yc(p),g=hc(p),y=0;y<l;++y,d=b,v=x,g=w,h=m){var m=s[y],b=m[0],_=m[1]/2+oc,x=yc(_),w=hc(_),M=b-d,T=M>=0?1:-1,C=T*M,S=C>rc,A=v*x;if(ls.add(lc(A*T*yc(C),g*w+A*hc(C))),u+=S?M+T*uc:M,S^d>=e^b>=e){var k=Vc(Wc(h),Wc(m));Zc(k);var E=Vc(o,k);Zc(E);var N=(S^M>=0?-1:1)*wc(E[2]);(r>N||r===N&&(k[0]||k[1]))&&(a+=S^M>=0?1:-1)}}return(u<-ec||u<ec&&ls<-ec)^1&a},ds=function(t,n,e,r){return function(i){var o,u,a,c=n(i),f=us(),s=n(f),l=!1,h={point:d,lineStart:v,lineEnd:g,polygonStart:function(){h.point=y,h.lineStart=m,h.lineEnd=b,u=[],o=[]},polygonEnd:function(){h.point=d,h.lineStart=v,h.lineEnd=g,u=I(u);var t=hs(o,r);u.length?(l||(i.polygonStart(),l=!0),fs(u,vs,t,e,i)):t&&(l||(i.polygonStart(),l=!0),i.lineStart(),e(null,null,1,i),i.lineEnd()),l&&(i.polygonEnd(),l=!1),u=o=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function d(n,e){t(n,e)&&i.point(n,e)}function p(t,n){c.point(t,n)}function v(){h.point=p,c.lineStart()}function g(){h.point=d,c.lineEnd()}function y(t,n){a.push([t,n]),s.point(t,n)}function m(){s.lineStart(),a=[]}function b(){y(a[0][0],a[0][1]),s.lineEnd();var t,n,e,r,c=s.clean(),h=f.result(),d=h.length;if(a.pop(),o.push(a),a=null,d)if(1&c){if((n=(e=h[0]).length-1)>0){for(l||(i.polygonStart(),l=!0),i.lineStart(),t=0;t<n;++t)i.point((r=e[t])[0],r[1]);i.lineEnd()}}else d>1&&2&c&&h.push(h.pop().concat(h.shift())),u.push(h.filter(ps))}return h}};function ps(t){return t.length>1}function vs(t,n){return((t=t.x)[0]<0?t[1]-ic-ec:ic-t[1])-((n=n.x)[0]<0?n[1]-ic-ec:ic-n[1])}var gs=ds(function(){return!0},function(t){var n,e=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(o,u){var a=o>0?rc:-rc,c=fc(o-e);fc(c-rc)<ec?(t.point(e,r=(r+u)/2>0?ic:-ic),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),t.point(o,r),n=0):i!==a&&c>=rc&&(fc(e-i)<ec&&(e-=i*ec),fc(o-a)<ec&&(o-=a*ec),r=function(t,n,e,r){var i,o,u=yc(t-e);return fc(u)>ec?sc((yc(n)*(o=hc(r))*yc(e)-yc(r)*(i=hc(n))*yc(t))/(i*o*u)):(n+r)/2}(e,r,o,u),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),n=0),t.point(e=o,r=u),i=a},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}},function(t,n,e,r){var i;if(null==t)i=e*ic,r.point(-rc,i),r.point(0,i),r.point(rc,i),r.point(rc,0),r.point(rc,-i),r.point(0,-i),r.point(-rc,-i),r.point(-rc,0),r.point(-rc,i);else if(fc(t[0]-n[0])>ec){var o=t[0]<n[0]?rc:-rc;i=e*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(n[0],n[1])},[-rc,-ic]);var ys=function(t){var n=hc(t),e=6*cc,r=n>0,i=fc(n)>ec;function o(t,e){return hc(t)*hc(e)>n}function u(t,e,r){var i=[1,0,0],o=Vc(Wc(t),Wc(e)),u=Yc(o,o),a=o[0],c=u-a*a;if(!c)return!r&&t;var f=n*u/c,s=-n*a/c,l=Vc(i,o),h=Gc(i,f);Xc(h,Gc(o,s));var d=l,p=Yc(h,d),v=Yc(d,d),g=p*p-v*(Yc(h,h)-1);if(!(g<0)){var y=bc(g),m=Gc(d,(-p-y)/v);if(Xc(m,h),m=Hc(m),!r)return m;var b,_=t[0],x=e[0],w=t[1],M=e[1];x<_&&(b=_,_=x,x=b);var T=x-_,C=fc(T-rc)<ec;if(!C&&M<w&&(b=w,w=M,M=b),C||T<ec?C?w+M>0^m[1]<(fc(m[0]-_)<ec?w:M):w<=m[1]&&m[1]<=M:T>rc^(_<=m[0]&&m[0]<=x)){var S=Gc(d,(-p+y)/v);return Xc(S,h),[m,Hc(S)]}}}function a(n,e){var i=r?t:rc-t,o=0;return n<-i?o|=1:n>i&&(o|=2),e<-i?o|=4:e>i&&(o|=8),o}return ds(o,function(t){var n,e,c,f,s;return{lineStart:function(){f=c=!1,s=1},point:function(l,h){var d,p=[l,h],v=o(l,h),g=r?v?0:a(l,h):v?a(l+(l<0?rc:-rc),h):0;if(!n&&(f=c=v)&&t.lineStart(),v!==c&&(!(d=u(n,p))||as(n,d)||as(p,d))&&(p[0]+=ec,p[1]+=ec,v=o(p[0],p[1])),v!==c)s=0,v?(t.lineStart(),d=u(p,n),t.point(d[0],d[1])):(d=u(n,p),t.point(d[0],d[1]),t.lineEnd()),n=d;else if(i&&n&&r^v){var y;g&e||!(y=u(p,n,!0))||(s=0,r?(t.lineStart(),t.point(y[0][0],y[0][1]),t.point(y[1][0],y[1][1]),t.lineEnd()):(t.point(y[1][0],y[1][1]),t.lineEnd(),t.lineStart(),t.point(y[0][0],y[0][1])))}!v||n&&as(n,p)||t.point(p[0],p[1]),n=p,c=v,e=g},lineEnd:function(){c&&t.lineEnd(),n=null},clean:function(){return s|(f&&c)<<1}}},function(n,r,i,o){rs(o,t,e,i,n,r)},r?[0,-t]:[-rc,t-rc])},ms=function(t,n,e,r,i,o){var u,a=t[0],c=t[1],f=0,s=1,l=n[0]-a,h=n[1]-c;if(u=e-a,l||!(u>0)){if(u/=l,l<0){if(u<f)return;u<s&&(s=u)}else if(l>0){if(u>s)return;u>f&&(f=u)}if(u=i-a,l||!(u<0)){if(u/=l,l<0){if(u>s)return;u>f&&(f=u)}else if(l>0){if(u<f)return;u<s&&(s=u)}if(u=r-c,h||!(u>0)){if(u/=h,h<0){if(u<f)return;u<s&&(s=u)}else if(h>0){if(u>s)return;u>f&&(f=u)}if(u=o-c,h||!(u<0)){if(u/=h,h<0){if(u>s)return;u>f&&(f=u)}else if(h>0){if(u<f)return;u<s&&(s=u)}return f>0&&(t[0]=a+f*l,t[1]=c+f*h),s<1&&(n[0]=a+s*l,n[1]=c+s*h),!0}}}}},bs=1e9,_s=-bs;function xs(t,n,e,r){function i(i,o){return t<=i&&i<=e&&n<=o&&o<=r}function o(i,o,a,f){var s=0,l=0;if(null==i||(s=u(i,a))!==(l=u(o,a))||c(i,o)<0^a>0)do{f.point(0===s||3===s?t:e,s>1?r:n)}while((s=(s+a+4)%4)!==l);else f.point(o[0],o[1])}function u(r,i){return fc(r[0]-t)<ec?i>0?0:3:fc(r[0]-e)<ec?i>0?2:1:fc(r[1]-n)<ec?i>0?1:0:i>0?3:2}function a(t,n){return c(t.x,n.x)}function c(t,n){var e=u(t,1),r=u(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}return function(u){var c,f,s,l,h,d,p,v,g,y,m,b=u,_=us(),x={point:w,lineStart:function(){x.point=M,f&&f.push(s=[]);y=!0,g=!1,p=v=NaN},lineEnd:function(){c&&(M(l,h),d&&g&&_.rejoin(),c.push(_.result()));x.point=w,g&&b.lineEnd()},polygonStart:function(){b=_,c=[],f=[],m=!0},polygonEnd:function(){var n=function(){for(var n=0,e=0,i=f.length;e<i;++e)for(var o,u,a=f[e],c=1,s=a.length,l=a[0],h=l[0],d=l[1];c<s;++c)o=h,u=d,l=a[c],h=l[0],d=l[1],u<=r?d>r&&(h-o)*(r-u)>(d-u)*(t-o)&&++n:d<=r&&(h-o)*(r-u)<(d-u)*(t-o)&&--n;return n}(),e=m&&n,i=(c=I(c)).length;(e||i)&&(u.polygonStart(),e&&(u.lineStart(),o(null,null,1,u),u.lineEnd()),i&&fs(c,a,n,o,u),u.polygonEnd());b=u,c=f=s=null}};function w(t,n){i(t,n)&&b.point(t,n)}function M(o,u){var a=i(o,u);if(f&&s.push([o,u]),y)l=o,h=u,d=a,y=!1,a&&(b.lineStart(),b.point(o,u));else if(a&&g)b.point(o,u);else{var c=[p=Math.max(_s,Math.min(bs,p)),v=Math.max(_s,Math.min(bs,v))],_=[o=Math.max(_s,Math.min(bs,o)),u=Math.max(_s,Math.min(bs,u))];ms(c,_,t,n,e,r)?(g||(b.lineStart(),b.point(c[0],c[1])),b.point(_[0],_[1]),a||b.lineEnd(),m=!1):a&&(b.lineStart(),b.point(o,u),m=!1)}p=o,v=u,g=a}return x}}var ws,Ms,Ts,Cs=function(){var t,n,e,r=0,i=0,o=960,u=500;return e={stream:function(e){return t&&n===e?t:t=xs(r,i,o,u)(n=e)},extent:function(a){return arguments.length?(r=+a[0][0],i=+a[0][1],o=+a[1][0],u=+a[1][1],t=n=null,e):[[r,i],[o,u]]}}},Ss=Ja(),As={sphere:Tc,point:Tc,lineStart:function(){As.point=Es,As.lineEnd=ks},lineEnd:Tc,polygonStart:Tc,polygonEnd:Tc};function ks(){As.point=As.lineEnd=Tc}function Es(t,n){ws=t*=cc,Ms=yc(n*=cc),Ts=hc(n),As.point=Ns}function Ns(t,n){t*=cc;var e=yc(n*=cc),r=hc(n),i=fc(t-ws),o=hc(i),u=r*yc(i),a=Ts*e-Ms*r*o,c=Ms*e+Ts*r*o;Ss.add(lc(bc(u*u+a*a),c)),ws=t,Ms=e,Ts=r}var Ds=function(t){return Ss.reset(),Pc(t,As),+Ss},Os=[null,null],Rs={type:"LineString",coordinates:Os},js=function(t,n){return Os[0]=t,Os[1]=n,Ds(Rs)},Ps={Feature:function(t,n){return Is(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)if(Is(e[r].geometry,n))return!0;return!1}},$s={Sphere:function(){return!0},Point:function(t,n){return Ls(t.coordinates,n)},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(Ls(e[r],n))return!0;return!1},LineString:function(t,n){return zs(t.coordinates,n)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(zs(e[r],n))return!0;return!1},Polygon:function(t,n){return qs(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(qs(e[r],n))return!0;return!1},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)if(Is(e[r],n))return!0;return!1}};function Is(t,n){return!(!t||!$s.hasOwnProperty(t.type))&&$s[t.type](t,n)}function Ls(t,n){return 0===js(t,n)}function zs(t,n){var e=js(t[0],t[1]);return js(t[0],n)+js(n,t[1])<=e+ec}function qs(t,n){return!!hs(t.map(Bs),Us(n))}function Bs(t){return(t=t.map(Us)).pop(),t}function Us(t){return[t[0]*cc,t[1]*cc]}var Fs=function(t,n){return(t&&Ps.hasOwnProperty(t.type)?Ps[t.type]:Is)(t,n)};function Hs(t,n,e){var r=w(t,n-ec,e).concat(n);return function(t){return r.map(function(n){return[t,n]})}}function Ws(t,n,e){var r=w(t,n-ec,e).concat(n);return function(t){return r.map(function(n){return[n,t]})}}function Ys(){var t,n,e,r,i,o,u,a,c,f,s,l,h=10,d=h,p=90,v=360,g=2.5;function y(){return{type:"MultiLineString",coordinates:m()}}function m(){return w(dc(r/p)*p,e,p).map(s).concat(w(dc(a/v)*v,u,v).map(l)).concat(w(dc(n/h)*h,t,h).filter(function(t){return fc(t%p)>ec}).map(c)).concat(w(dc(o/d)*d,i,d).filter(function(t){return fc(t%v)>ec}).map(f))}return y.lines=function(){return m().map(function(t){return{type:"LineString",coordinates:t}})},y.outline=function(){return{type:"Polygon",coordinates:[s(r).concat(l(u).slice(1),s(e).reverse().slice(1),l(a).reverse().slice(1))]}},y.extent=function(t){return arguments.length?y.extentMajor(t).extentMinor(t):y.extentMinor()},y.extentMajor=function(t){return arguments.length?(r=+t[0][0],e=+t[1][0],a=+t[0][1],u=+t[1][1],r>e&&(t=r,r=e,e=t),a>u&&(t=a,a=u,u=t),y.precision(g)):[[r,a],[e,u]]},y.extentMinor=function(e){return arguments.length?(n=+e[0][0],t=+e[1][0],o=+e[0][1],i=+e[1][1],n>t&&(e=n,n=t,t=e),o>i&&(e=o,o=i,i=e),y.precision(g)):[[n,o],[t,i]]},y.step=function(t){return arguments.length?y.stepMajor(t).stepMinor(t):y.stepMinor()},y.stepMajor=function(t){return arguments.length?(p=+t[0],v=+t[1],y):[p,v]},y.stepMinor=function(t){return arguments.length?(h=+t[0],d=+t[1],y):[h,d]},y.precision=function(h){return arguments.length?(g=+h,c=Hs(o,i,90),f=Ws(n,t,g),s=Hs(a,u,90),l=Ws(r,e,g),y):g},y.extentMajor([[-180,-90+ec],[180,90-ec]]).extentMinor([[-180,-80-ec],[180,80+ec]])}function Vs(){return Ys()()}var Xs,Gs,Zs,Qs,Js=function(t,n){var e=t[0]*cc,r=t[1]*cc,i=n[0]*cc,o=n[1]*cc,u=hc(r),a=yc(r),c=hc(o),f=yc(o),s=u*hc(e),l=u*yc(e),h=c*hc(i),d=c*yc(i),p=2*wc(bc(Mc(o-r)+u*c*Mc(i-e))),v=yc(p),g=p?function(t){var n=yc(t*=p)/v,e=yc(p-t)/v,r=e*s+n*h,i=e*l+n*d,o=e*a+n*f;return[lc(i,r)*ac,lc(o,bc(r*r+i*i))*ac]}:function(){return[e*ac,r*ac]};return g.distance=p,g},Ks=function(t){return t},tl=Ja(),nl=Ja(),el={point:Tc,lineStart:Tc,lineEnd:Tc,polygonStart:function(){el.lineStart=rl,el.lineEnd=ul},polygonEnd:function(){el.lineStart=el.lineEnd=el.point=Tc,tl.add(fc(nl)),nl.reset()},result:function(){var t=tl/2;return tl.reset(),t}};function rl(){el.point=il}function il(t,n){el.point=ol,Xs=Zs=t,Gs=Qs=n}function ol(t,n){nl.add(Qs*t-Zs*n),Zs=t,Qs=n}function ul(){ol(Xs,Gs)}var al=el,cl=1/0,fl=cl,sl=-cl,ll=sl;var hl,dl,pl,vl,gl={point:function(t,n){t<cl&&(cl=t);t>sl&&(sl=t);n<fl&&(fl=n);n>ll&&(ll=n)},lineStart:Tc,lineEnd:Tc,polygonStart:Tc,polygonEnd:Tc,result:function(){var t=[[cl,fl],[sl,ll]];return sl=ll=-(fl=cl=1/0),t}},yl=0,ml=0,bl=0,_l=0,xl=0,wl=0,Ml=0,Tl=0,Cl=0,Sl={point:Al,lineStart:kl,lineEnd:Dl,polygonStart:function(){Sl.lineStart=Ol,Sl.lineEnd=Rl},polygonEnd:function(){Sl.point=Al,Sl.lineStart=kl,Sl.lineEnd=Dl},result:function(){var t=Cl?[Ml/Cl,Tl/Cl]:wl?[_l/wl,xl/wl]:bl?[yl/bl,ml/bl]:[NaN,NaN];return yl=ml=bl=_l=xl=wl=Ml=Tl=Cl=0,t}};function Al(t,n){yl+=t,ml+=n,++bl}function kl(){Sl.point=El}function El(t,n){Sl.point=Nl,Al(pl=t,vl=n)}function Nl(t,n){var e=t-pl,r=n-vl,i=bc(e*e+r*r);_l+=i*(pl+t)/2,xl+=i*(vl+n)/2,wl+=i,Al(pl=t,vl=n)}function Dl(){Sl.point=Al}function Ol(){Sl.point=jl}function Rl(){Pl(hl,dl)}function jl(t,n){Sl.point=Pl,Al(hl=pl=t,dl=vl=n)}function Pl(t,n){var e=t-pl,r=n-vl,i=bc(e*e+r*r);_l+=i*(pl+t)/2,xl+=i*(vl+n)/2,wl+=i,Ml+=(i=vl*t-pl*n)*(pl+t),Tl+=i*(vl+n),Cl+=3*i,Al(pl=t,vl=n)}var $l=Sl;function Il(t){this._context=t}Il.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,uc)}},result:Tc};var Ll,zl,ql,Bl,Ul,Fl=Ja(),Hl={point:Tc,lineStart:function(){Hl.point=Wl},lineEnd:function(){Ll&&Yl(zl,ql),Hl.point=Tc},polygonStart:function(){Ll=!0},polygonEnd:function(){Ll=null},result:function(){var t=+Fl;return Fl.reset(),t}};function Wl(t,n){Hl.point=Yl,zl=Bl=t,ql=Ul=n}function Yl(t,n){Bl-=t,Ul-=n,Fl.add(bc(Bl*Bl+Ul*Ul)),Bl=t,Ul=n}var Vl=Hl;function Xl(){this._string=[]}function Gl(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}Xl.prototype={_radius:4.5,_circle:Gl(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=Gl(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};var Zl=function(t,n){var e,r,i=4.5;function o(t){return t&&("function"==typeof i&&r.pointRadius(+i.apply(this,arguments)),Pc(t,e(r))),r.result()}return o.area=function(t){return Pc(t,e(al)),al.result()},o.measure=function(t){return Pc(t,e(Vl)),Vl.result()},o.bounds=function(t){return Pc(t,e(gl)),gl.result()},o.centroid=function(t){return Pc(t,e($l)),$l.result()},o.projection=function(n){return arguments.length?(e=null==n?(t=null,Ks):(t=n).stream,o):t},o.context=function(t){return arguments.length?(r=null==t?(n=null,new Xl):new Il(n=t),"function"!=typeof i&&r.pointRadius(i),o):n},o.pointRadius=function(t){return arguments.length?(i="function"==typeof t?t:(r.pointRadius(+t),+t),o):i},o.projection(t).context(n)},Ql=function(t){return{stream:Jl(t)}};function Jl(t){return function(n){var e=new Kl;for(var r in t)e[r]=t[r];return e.stream=n,e}}function Kl(){}function th(t,n,e){var r=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=r&&t.clipExtent(null),Pc(e,t.stream(gl)),n(gl.result()),null!=r&&t.clipExtent(r),t}function nh(t,n,e){return th(t,function(e){var r=n[1][0]-n[0][0],i=n[1][1]-n[0][1],o=Math.min(r/(e[1][0]-e[0][0]),i/(e[1][1]-e[0][1])),u=+n[0][0]+(r-o*(e[1][0]+e[0][0]))/2,a=+n[0][1]+(i-o*(e[1][1]+e[0][1]))/2;t.scale(150*o).translate([u,a])},e)}function eh(t,n,e){return nh(t,[[0,0],n],e)}function rh(t,n,e){return th(t,function(e){var r=+n,i=r/(e[1][0]-e[0][0]),o=(r-i*(e[1][0]+e[0][0]))/2,u=-i*e[0][1];t.scale(150*i).translate([o,u])},e)}function ih(t,n,e){return th(t,function(e){var r=+n,i=r/(e[1][1]-e[0][1]),o=-i*e[0][0],u=(r-i*(e[1][1]+e[0][1]))/2;t.scale(150*i).translate([o,u])},e)}Kl.prototype={constructor:Kl,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var oh=16,uh=hc(30*cc),ah=function(t,n){return+n?function(t,n){function e(r,i,o,u,a,c,f,s,l,h,d,p,v,g){var y=f-r,m=s-i,b=y*y+m*m;if(b>4*n&&v--){var _=u+h,x=a+d,w=c+p,M=bc(_*_+x*x+w*w),T=wc(w/=M),C=fc(fc(w)-1)<ec||fc(o-l)<ec?(o+l)/2:lc(x,_),S=t(C,T),A=S[0],k=S[1],E=A-r,N=k-i,D=m*E-y*N;(D*D/b>n||fc((y*E+m*N)/b-.5)>.3||u*h+a*d+c*p<uh)&&(e(r,i,o,u,a,c,A,k,C,_/=M,x/=M,w,v,g),g.point(A,k),e(A,k,C,_,x,w,f,s,l,h,d,p,v,g))}}return function(n){var r,i,o,u,a,c,f,s,l,h,d,p,v={point:g,lineStart:y,lineEnd:b,polygonStart:function(){n.polygonStart(),v.lineStart=_},polygonEnd:function(){n.polygonEnd(),v.lineStart=y}};function g(e,r){e=t(e,r),n.point(e[0],e[1])}function y(){s=NaN,v.point=m,n.lineStart()}function m(r,i){var o=Wc([r,i]),u=t(r,i);e(s,l,f,h,d,p,s=u[0],l=u[1],f=r,h=o[0],d=o[1],p=o[2],oh,n),n.point(s,l)}function b(){v.point=g,n.lineEnd()}function _(){y(),v.point=x,v.lineEnd=w}function x(t,n){m(r=t,n),i=s,o=l,u=h,a=d,c=p,v.point=m}function w(){e(s,l,f,h,d,p,i,o,r,u,a,c,oh,n),v.lineEnd=b,b()}return v}}(t,n):function(t){return Jl({point:function(n,e){n=t(n,e),this.stream.point(n[0],n[1])}})}(t)};var ch=Jl({point:function(t,n){this.stream.point(t*cc,n*cc)}});function fh(t,n,e,r){var i=hc(r),o=yc(r),u=i*t,a=o*t,c=i/t,f=o/t,s=(o*e-i*n)/t,l=(o*n+i*e)/t;function h(t,r){return[u*t-a*r+n,e-a*t-u*r]}return h.invert=function(t,n){return[c*t-f*n+s,l-f*t-c*n]},h}function sh(t){return lh(function(){return t})()}function lh(t){var n,e,r,i,o,u,a,c,f,s,l=150,h=480,d=250,p=0,v=0,g=0,y=0,m=0,b=0,_=null,x=gs,w=null,M=Ks,T=.5;function C(t){return c(t[0]*cc,t[1]*cc)}function S(t){return(t=c.invert(t[0],t[1]))&&[t[0]*ac,t[1]*ac]}function A(){var t=fh(l,0,0,b).apply(null,n(p,v)),r=(b?fh:function(t,n,e){function r(r,i){return[n+t*r,e-t*i]}return r.invert=function(r,i){return[(r-n)/t,(e-i)/t]},r})(l,h-t[0],d-t[1],b);return e=Jf(g,y,m),a=Zf(n,r),c=Zf(e,a),u=ah(a,T),k()}function k(){return f=s=null,C}return C.stream=function(t){return f&&s===t?f:f=ch(function(t){return Jl({point:function(n,e){var r=t(n,e);return this.stream.point(r[0],r[1])}})}(e)(x(u(M(s=t)))))},C.preclip=function(t){return arguments.length?(x=t,_=void 0,k()):x},C.postclip=function(t){return arguments.length?(M=t,w=r=i=o=null,k()):M},C.clipAngle=function(t){return arguments.length?(x=+t?ys(_=t*cc):(_=null,gs),k()):_*ac},C.clipExtent=function(t){return arguments.length?(M=null==t?(w=r=i=o=null,Ks):xs(w=+t[0][0],r=+t[0][1],i=+t[1][0],o=+t[1][1]),k()):null==w?null:[[w,r],[i,o]]},C.scale=function(t){return arguments.length?(l=+t,A()):l},C.translate=function(t){return arguments.length?(h=+t[0],d=+t[1],A()):[h,d]},C.center=function(t){return arguments.length?(p=t[0]%360*cc,v=t[1]%360*cc,A()):[p*ac,v*ac]},C.rotate=function(t){return arguments.length?(g=t[0]%360*cc,y=t[1]%360*cc,m=t.length>2?t[2]%360*cc:0,A()):[g*ac,y*ac,m*ac]},C.angle=function(t){return arguments.length?(b=t%360*cc,A()):b*ac},C.precision=function(t){return arguments.length?(u=ah(a,T=t*t),k()):bc(T)},C.fitExtent=function(t,n){return nh(C,t,n)},C.fitSize=function(t,n){return eh(C,t,n)},C.fitWidth=function(t,n){return rh(C,t,n)},C.fitHeight=function(t,n){return ih(C,t,n)},function(){return n=t.apply(this,arguments),C.invert=n.invert&&S,A()}}function hh(t){var n=0,e=rc/3,r=lh(t),i=r(n,e);return i.parallels=function(t){return arguments.length?r(n=t[0]*cc,e=t[1]*cc):[n*ac,e*ac]},i}function dh(t,n){var e=yc(t),r=(e+yc(n))/2;if(fc(r)<ec)return function(t){var n=hc(t);function e(t,e){return[t*n,yc(e)/n]}return e.invert=function(t,e){return[t/n,wc(e*n)]},e}(t);var i=1+e*(2*r-e),o=bc(i)/r;function u(t,n){var e=bc(i-2*r*yc(n))/r;return[e*yc(t*=r),o-e*hc(t)]}return u.invert=function(t,n){var e=o-n;return[lc(t,fc(e))/r*mc(e),wc((i-(t*t+e*e)*r*r)/(2*r))]},u}var ph=function(){return hh(dh).scale(155.424).center([0,33.6442])},vh=function(){return ph().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])};var gh=function(){var t,n,e,r,i,o,u=vh(),a=ph().rotate([154,0]).center([-2,58.5]).parallels([55,65]),c=ph().rotate([157,0]).center([-3,19.9]).parallels([8,18]),f={point:function(t,n){o=[t,n]}};function s(t){var n=t[0],u=t[1];return o=null,e.point(n,u),o||(r.point(n,u),o)||(i.point(n,u),o)}function l(){return t=n=null,s}return s.invert=function(t){var n=u.scale(),e=u.translate(),r=(t[0]-e[0])/n,i=(t[1]-e[1])/n;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?a:i>=.166&&i<.234&&r>=-.214&&r<-.115?c:u).invert(t)},s.stream=function(e){return t&&n===e?t:(r=[u.stream(n=e),a.stream(e),c.stream(e)],i=r.length,t={point:function(t,n){for(var e=-1;++e<i;)r[e].point(t,n)},sphere:function(){for(var t=-1;++t<i;)r[t].sphere()},lineStart:function(){for(var t=-1;++t<i;)r[t].lineStart()},lineEnd:function(){for(var t=-1;++t<i;)r[t].lineEnd()},polygonStart:function(){for(var t=-1;++t<i;)r[t].polygonStart()},polygonEnd:function(){for(var t=-1;++t<i;)r[t].polygonEnd()}});var r,i},s.precision=function(t){return arguments.length?(u.precision(t),a.precision(t),c.precision(t),l()):u.precision()},s.scale=function(t){return arguments.length?(u.scale(t),a.scale(.35*t),c.scale(t),s.translate(u.translate())):u.scale()},s.translate=function(t){if(!arguments.length)return u.translate();var n=u.scale(),o=+t[0],s=+t[1];return e=u.translate(t).clipExtent([[o-.455*n,s-.238*n],[o+.455*n,s+.238*n]]).stream(f),r=a.translate([o-.307*n,s+.201*n]).clipExtent([[o-.425*n+ec,s+.12*n+ec],[o-.214*n-ec,s+.234*n-ec]]).stream(f),i=c.translate([o-.205*n,s+.212*n]).clipExtent([[o-.214*n+ec,s+.166*n+ec],[o-.115*n-ec,s+.234*n-ec]]).stream(f),l()},s.fitExtent=function(t,n){return nh(s,t,n)},s.fitSize=function(t,n){return eh(s,t,n)},s.fitWidth=function(t,n){return rh(s,t,n)},s.fitHeight=function(t,n){return ih(s,t,n)},s.scale(1070)};function yh(t){return function(n,e){var r=hc(n),i=hc(e),o=t(r*i);return[o*i*yc(n),o*yc(e)]}}function mh(t){return function(n,e){var r=bc(n*n+e*e),i=t(r),o=yc(i),u=hc(i);return[lc(n*o,r*u),wc(r&&e*o/r)]}}var bh=yh(function(t){return bc(2/(1+t))});bh.invert=mh(function(t){return 2*wc(t/2)});var _h=function(){return sh(bh).scale(124.75).clipAngle(179.999)},xh=yh(function(t){return(t=xc(t))&&t/yc(t)});xh.invert=mh(function(t){return t});var wh=function(){return sh(xh).scale(79.4188).clipAngle(179.999)};function Mh(t,n){return[t,vc(_c((ic+n)/2))]}Mh.invert=function(t,n){return[t,2*sc(pc(n))-ic]};var Th=function(){return Ch(Mh).scale(961/uc)};function Ch(t){var n,e,r,i=sh(t),o=i.center,u=i.scale,a=i.translate,c=i.clipExtent,f=null;function s(){var o=rc*u(),a=i(es(i.rotate()).invert([0,0]));return c(null==f?[[a[0]-o,a[1]-o],[a[0]+o,a[1]+o]]:t===Mh?[[Math.max(a[0]-o,f),n],[Math.min(a[0]+o,e),r]]:[[f,Math.max(a[1]-o,n)],[e,Math.min(a[1]+o,r)]])}return i.scale=function(t){return arguments.length?(u(t),s()):u()},i.translate=function(t){return arguments.length?(a(t),s()):a()},i.center=function(t){return arguments.length?(o(t),s()):o()},i.clipExtent=function(t){return arguments.length?(null==t?f=n=e=r=null:(f=+t[0][0],n=+t[0][1],e=+t[1][0],r=+t[1][1]),s()):null==f?null:[[f,n],[e,r]]},s()}function Sh(t){return _c((ic+t)/2)}function Ah(t,n){var e=hc(t),r=t===n?yc(t):vc(e/hc(n))/vc(Sh(n)/Sh(t)),i=e*gc(Sh(t),r)/r;if(!r)return Mh;function o(t,n){i>0?n<-ic+ec&&(n=-ic+ec):n>ic-ec&&(n=ic-ec);var e=i/gc(Sh(n),r);return[e*yc(r*t),i-e*hc(r*t)]}return o.invert=function(t,n){var e=i-n,o=mc(r)*bc(t*t+e*e);return[lc(t,fc(e))/r*mc(e),2*sc(gc(i/o,1/r))-ic]},o}var kh=function(){return hh(Ah).scale(109.5).parallels([30,30])};function Eh(t,n){return[t,n]}Eh.invert=Eh;var Nh=function(){return sh(Eh).scale(152.63)};function Dh(t,n){var e=hc(t),r=t===n?yc(t):(e-hc(n))/(n-t),i=e/r+t;if(fc(r)<ec)return Eh;function o(t,n){var e=i-n,o=r*t;return[e*yc(o),i-e*hc(o)]}return o.invert=function(t,n){var e=i-n;return[lc(t,fc(e))/r*mc(e),i-mc(r)*bc(t*t+e*e)]},o}var Oh=function(){return hh(Dh).scale(131.154).center([0,13.9389])},Rh=1.340264,jh=-.081106,Ph=893e-6,$h=.003796,Ih=bc(3)/2;function Lh(t,n){var e=wc(Ih*yc(n)),r=e*e,i=r*r*r;return[t*hc(e)/(Ih*(Rh+3*jh*r+i*(7*Ph+9*$h*r))),e*(Rh+jh*r+i*(Ph+$h*r))]}Lh.invert=function(t,n){for(var e,r=n,i=r*r,o=i*i*i,u=0;u<12&&(o=(i=(r-=e=(r*(Rh+jh*i+o*(Ph+$h*i))-n)/(Rh+3*jh*i+o*(7*Ph+9*$h*i)))*r)*i*i,!(fc(e)<1e-12));++u);return[Ih*t*(Rh+3*jh*i+o*(7*Ph+9*$h*i))/hc(r),wc(yc(r)/Ih)]};var zh=function(){return sh(Lh).scale(177.158)};function qh(t,n){var e=hc(n),r=hc(t)*e;return[e*yc(t)/r,yc(n)/r]}qh.invert=mh(sc);var Bh=function(){return sh(qh).scale(144.049).clipAngle(60)};function Uh(t,n,e,r){return 1===t&&1===n&&0===e&&0===r?Ks:Jl({point:function(i,o){this.stream.point(i*t+e,o*n+r)}})}var Fh=function(){var t,n,e,r,i,o,u=1,a=0,c=0,f=1,s=1,l=Ks,h=null,d=Ks;function p(){return r=i=null,o}return o={stream:function(t){return r&&i===t?r:r=l(d(i=t))},postclip:function(r){return arguments.length?(d=r,h=t=n=e=null,p()):d},clipExtent:function(r){return arguments.length?(d=null==r?(h=t=n=e=null,Ks):xs(h=+r[0][0],t=+r[0][1],n=+r[1][0],e=+r[1][1]),p()):null==h?null:[[h,t],[n,e]]},scale:function(t){return arguments.length?(l=Uh((u=+t)*f,u*s,a,c),p()):u},translate:function(t){return arguments.length?(l=Uh(u*f,u*s,a=+t[0],c=+t[1]),p()):[a,c]},reflectX:function(t){return arguments.length?(l=Uh(u*(f=t?-1:1),u*s,a,c),p()):f<0},reflectY:function(t){return arguments.length?(l=Uh(u*f,u*(s=t?-1:1),a,c),p()):s<0},fitExtent:function(t,n){return nh(o,t,n)},fitSize:function(t,n){return eh(o,t,n)},fitWidth:function(t,n){return rh(o,t,n)},fitHeight:function(t,n){return ih(o,t,n)}}};function Hh(t,n){var e=n*n,r=e*e;return[t*(.8707-.131979*e+r*(r*(.003971*e-.001529*r)-.013791)),n*(1.007226+e*(.015085+r*(.028874*e-.044475-.005916*r)))]}Hh.invert=function(t,n){var e,r=n,i=25;do{var o=r*r,u=o*o;r-=e=(r*(1.007226+o*(.015085+u*(.028874*o-.044475-.005916*u)))-n)/(1.007226+o*(.045255+u*(.259866*o-.311325-.005916*11*u)))}while(fc(e)>ec&&--i>0);return[t/(.8707+(o=r*r)*(o*(o*o*o*(.003971-.001529*o)-.013791)-.131979)),r]};var Wh=function(){return sh(Hh).scale(175.295)};function Yh(t,n){return[hc(n)*yc(t),yc(n)]}Yh.invert=mh(wc);var Vh=function(){return sh(Yh).scale(249.5).clipAngle(90+ec)};function Xh(t,n){var e=hc(n),r=1+hc(t)*e;return[e*yc(t)/r,yc(n)/r]}Xh.invert=mh(function(t){return 2*sc(t)});var Gh=function(){return sh(Xh).scale(250).clipAngle(142)};function Zh(t,n){return[vc(_c((ic+n)/2)),-t]}Zh.invert=function(t,n){return[-n,2*sc(pc(t))-ic]};var Qh=function(){var t=Ch(Zh),n=t.center,e=t.rotate;return t.center=function(t){return arguments.length?n([-t[1],t[0]]):[(t=n())[1],-t[0]]},t.rotate=function(t){return arguments.length?e([t[0],t[1],t.length>2?t[2]+90:90]):[(t=e())[0],t[1],t[2]-90]},e([0,0,90]).scale(159.155)};function Jh(t,n){return t.parent===n.parent?1:2}function Kh(t,n){return t+n.x}function td(t,n){return Math.max(t,n.y)}var nd=function(){var t=Jh,n=1,e=1,r=!1;function i(i){var o,u=0;i.eachAfter(function(n){var e=n.children;e?(n.x=function(t){return t.reduce(Kh,0)/t.length}(e),n.y=function(t){return 1+t.reduce(td,0)}(e)):(n.x=o?u+=t(n,o):0,n.y=0,o=n)});var a=function(t){for(var n;n=t.children;)t=n[0];return t}(i),c=function(t){for(var n;n=t.children;)t=n[n.length-1];return t}(i),f=a.x-t(a,c)/2,s=c.x+t(c,a)/2;return i.eachAfter(r?function(t){t.x=(t.x-i.x)*n,t.y=(i.y-t.y)*e}:function(t){t.x=(t.x-f)/(s-f)*n,t.y=(1-(i.y?t.y/i.y:1))*e})}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i};function ed(t){var n=0,e=t.children,r=e&&e.length;if(r)for(;--r>=0;)n+=e[r].value;else n=1;t.value=n}function rd(t,n){var e,r,i,o,u,a=new ad(t),c=+t.value&&(a.value=t.value),f=[a];for(null==n&&(n=id);e=f.pop();)if(c&&(e.value=+e.data.value),(i=n(e.data))&&(u=i.length))for(e.children=new Array(u),o=u-1;o>=0;--o)f.push(r=e.children[o]=new ad(i[o])),r.parent=e,r.depth=e.depth+1;return a.eachBefore(ud)}function id(t){return t.children}function od(t){t.data=t.data.data}function ud(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function ad(t){this.data=t,this.depth=this.height=0,this.parent=null}ad.prototype=rd.prototype={constructor:ad,count:function(){return this.eachAfter(ed)},each:function(t){var n,e,r,i,o=this,u=[o];do{for(n=u.reverse(),u=[];o=n.pop();)if(t(o),e=o.children)for(r=0,i=e.length;r<i;++r)u.push(e[r])}while(u.length);return this},eachAfter:function(t){for(var n,e,r,i=this,o=[i],u=[];i=o.pop();)if(u.push(i),n=i.children)for(e=0,r=n.length;e<r;++e)o.push(n[e]);for(;i=u.pop();)t(i);return this},eachBefore:function(t){for(var n,e,r=this,i=[r];r=i.pop();)if(t(r),n=r.children)for(e=n.length-1;e>=0;--e)i.push(n[e]);return this},sum:function(t){return this.eachAfter(function(n){for(var e=+t(n.data)||0,r=n.children,i=r&&r.length;--i>=0;)e+=r[i].value;n.value=e})},sort:function(t){return this.eachBefore(function(n){n.children&&n.children.sort(t)})},path:function(t){for(var n=this,e=function(t,n){if(t===n)return t;var e=t.ancestors(),r=n.ancestors(),i=null;for(t=e.pop(),n=r.pop();t===n;)i=t,t=e.pop(),n=r.pop();return i}(n,t),r=[n];n!==e;)n=n.parent,r.push(n);for(var i=r.length;t!==e;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},descendants:function(){var t=[];return this.each(function(n){t.push(n)}),t},leaves:function(){var t=[];return this.eachBefore(function(n){n.children||t.push(n)}),t},links:function(){var t=this,n=[];return t.each(function(e){e!==t&&n.push({source:e.parent,target:e})}),n},copy:function(){return rd(this).eachBefore(od)}};var cd=Array.prototype.slice;var fd=function(t){for(var n,e,r=0,i=(t=function(t){for(var n,e,r=t.length;r;)e=Math.random()*r--|0,n=t[r],t[r]=t[e],t[e]=n;return t}(cd.call(t))).length,o=[];r<i;)n=t[r],e&&hd(e,n)?++r:(e=pd(o=sd(o,n)),r=0);return e};function sd(t,n){var e,r;if(dd(n,t))return[n];for(e=0;e<t.length;++e)if(ld(n,t[e])&&dd(vd(t[e],n),t))return[t[e],n];for(e=0;e<t.length-1;++e)for(r=e+1;r<t.length;++r)if(ld(vd(t[e],t[r]),n)&&ld(vd(t[e],n),t[r])&&ld(vd(t[r],n),t[e])&&dd(gd(t[e],t[r],n),t))return[t[e],t[r],n];throw new Error}function ld(t,n){var e=t.r-n.r,r=n.x-t.x,i=n.y-t.y;return e<0||e*e<r*r+i*i}function hd(t,n){var e=t.r-n.r+1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function dd(t,n){for(var e=0;e<n.length;++e)if(!hd(t,n[e]))return!1;return!0}function pd(t){switch(t.length){case 1:return{x:(n=t[0]).x,y:n.y,r:n.r};case 2:return vd(t[0],t[1]);case 3:return gd(t[0],t[1],t[2])}var n}function vd(t,n){var e=t.x,r=t.y,i=t.r,o=n.x,u=n.y,a=n.r,c=o-e,f=u-r,s=a-i,l=Math.sqrt(c*c+f*f);return{x:(e+o+c/l*s)/2,y:(r+u+f/l*s)/2,r:(l+i+a)/2}}function gd(t,n,e){var r=t.x,i=t.y,o=t.r,u=n.x,a=n.y,c=n.r,f=e.x,s=e.y,l=e.r,h=r-u,d=r-f,p=i-a,v=i-s,g=c-o,y=l-o,m=r*r+i*i-o*o,b=m-u*u-a*a+c*c,_=m-f*f-s*s+l*l,x=d*p-h*v,w=(p*_-v*b)/(2*x)-r,M=(v*g-p*y)/x,T=(d*b-h*_)/(2*x)-i,C=(h*y-d*g)/x,S=M*M+C*C-1,A=2*(o+w*M+T*C),k=w*w+T*T-o*o,E=-(S?(A+Math.sqrt(A*A-4*S*k))/(2*S):k/A);return{x:r+w+M*E,y:i+T+C*E,r:E}}function yd(t,n,e){var r,i,o,u,a=t.x-n.x,c=t.y-n.y,f=a*a+c*c;f?(i=n.r+e.r,i*=i,u=t.r+e.r,i>(u*=u)?(r=(f+u-i)/(2*f),o=Math.sqrt(Math.max(0,u/f-r*r)),e.x=t.x-r*a-o*c,e.y=t.y-r*c+o*a):(r=(f+i-u)/(2*f),o=Math.sqrt(Math.max(0,i/f-r*r)),e.x=n.x+r*a-o*c,e.y=n.y+r*c+o*a)):(e.x=n.x+e.r,e.y=n.y)}function md(t,n){var e=t.r+n.r-1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function bd(t){var n=t._,e=t.next._,r=n.r+e.r,i=(n.x*e.r+e.x*n.r)/r,o=(n.y*e.r+e.y*n.r)/r;return i*i+o*o}function _d(t){this._=t,this.next=null,this.previous=null}function xd(t){if(!(i=t.length))return 0;var n,e,r,i,o,u,a,c,f,s,l;if((n=t[0]).x=0,n.y=0,!(i>1))return n.r;if(e=t[1],n.x=-e.r,e.x=n.r,e.y=0,!(i>2))return n.r+e.r;yd(e,n,r=t[2]),n=new _d(n),e=new _d(e),r=new _d(r),n.next=r.previous=e,e.next=n.previous=r,r.next=e.previous=n;t:for(a=3;a<i;++a){yd(n._,e._,r=t[a]),r=new _d(r),c=e.next,f=n.previous,s=e._.r,l=n._.r;do{if(s<=l){if(md(c._,r._)){e=c,n.next=e,e.previous=n,--a;continue t}s+=c._.r,c=c.next}else{if(md(f._,r._)){(n=f).next=e,e.previous=n,--a;continue t}l+=f._.r,f=f.previous}}while(c!==f.next);for(r.previous=n,r.next=e,n.next=e.previous=e=r,o=bd(n);(r=r.next)!==e;)(u=bd(r))<o&&(n=r,o=u);e=n.next}for(n=[e._],r=e;(r=r.next)!==e;)n.push(r._);for(r=fd(n),a=0;a<i;++a)(n=t[a]).x-=r.x,n.y-=r.y;return r.r}var wd=function(t){return xd(t),t};function Md(t){if("function"!=typeof t)throw new Error;return t}function Td(){return 0}var Cd=function(t){return function(){return t}};function Sd(t){return Math.sqrt(t.value)}var Ad=function(){var t=null,n=1,e=1,r=Td;function i(i){return i.x=n/2,i.y=e/2,t?i.eachBefore(kd(t)).eachAfter(Ed(r,.5)).eachBefore(Nd(1)):i.eachBefore(kd(Sd)).eachAfter(Ed(Td,1)).eachAfter(Ed(r,i.r/Math.min(n,e))).eachBefore(Nd(Math.min(n,e)/(2*i.r))),i}return i.radius=function(n){return arguments.length?(t=null==(e=n)?null:Md(e),i):t;var e},i.size=function(t){return arguments.length?(n=+t[0],e=+t[1],i):[n,e]},i.padding=function(t){return arguments.length?(r="function"==typeof t?t:Cd(+t),i):r},i};function kd(t){return function(n){n.children||(n.r=Math.max(0,+t(n)||0))}}function Ed(t,n){return function(e){if(r=e.children){var r,i,o,u=r.length,a=t(e)*n||0;if(a)for(i=0;i<u;++i)r[i].r+=a;if(o=xd(r),a)for(i=0;i<u;++i)r[i].r-=a;e.r=o+a}}}function Nd(t){return function(n){var e=n.parent;n.r*=t,e&&(n.x=e.x+t*n.x,n.y=e.y+t*n.y)}}var Dd=function(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)},Od=function(t,n,e,r,i){for(var o,u=t.children,a=-1,c=u.length,f=t.value&&(r-n)/t.value;++a<c;)(o=u[a]).y0=e,o.y1=i,o.x0=n,o.x1=n+=o.value*f},Rd=function(){var t=1,n=1,e=0,r=!1;function i(i){var o=i.height+1;return i.x0=i.y0=e,i.x1=t,i.y1=n/o,i.eachBefore(function(t,n){return function(r){r.children&&Od(r,r.x0,t*(r.depth+1)/n,r.x1,t*(r.depth+2)/n);var i=r.x0,o=r.y0,u=r.x1-e,a=r.y1-e;u<i&&(i=u=(i+u)/2),a<o&&(o=a=(o+a)/2),r.x0=i,r.y0=o,r.x1=u,r.y1=a}}(n,o)),r&&i.eachBefore(Dd),i}return i.round=function(t){return arguments.length?(r=!!t,i):r},i.size=function(e){return arguments.length?(t=+e[0],n=+e[1],i):[t,n]},i.padding=function(t){return arguments.length?(e=+t,i):e},i},jd="$",Pd={depth:-1},$d={};function Id(t){return t.id}function Ld(t){return t.parentId}var zd=function(){var t=Id,n=Ld;function e(e){var r,i,o,u,a,c,f,s=e.length,l=new Array(s),h={};for(i=0;i<s;++i)r=e[i],a=l[i]=new ad(r),null!=(c=t(r,i,e))&&(c+="")&&(h[f=jd+(a.id=c)]=f in h?$d:a);for(i=0;i<s;++i)if(a=l[i],null!=(c=n(e[i],i,e))&&(c+="")){if(!(u=h[jd+c]))throw new Error("missing: "+c);if(u===$d)throw new Error("ambiguous: "+c);u.children?u.children.push(a):u.children=[a],a.parent=u}else{if(o)throw new Error("multiple roots");o=a}if(!o)throw new Error("no root");if(o.parent=Pd,o.eachBefore(function(t){t.depth=t.parent.depth+1,--s}).eachBefore(ud),o.parent=null,s>0)throw new Error("cycle");return o}return e.id=function(n){return arguments.length?(t=Md(n),e):t},e.parentId=function(t){return arguments.length?(n=Md(t),e):n},e};function qd(t,n){return t.parent===n.parent?1:2}function Bd(t){var n=t.children;return n?n[0]:t.t}function Ud(t){var n=t.children;return n?n[n.length-1]:t.t}function Fd(t,n,e){var r=e/(n.i-t.i);n.c-=r,n.s+=e,t.c+=r,n.z+=e,n.m+=e}function Hd(t,n,e){return t.a.parent===n.parent?t.a:e}function Wd(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}Wd.prototype=Object.create(ad.prototype);var Yd=function(){var t=qd,n=1,e=1,r=null;function i(i){var c=function(t){for(var n,e,r,i,o,u=new Wd(t,0),a=[u];n=a.pop();)if(r=n._.children)for(n.children=new Array(o=r.length),i=o-1;i>=0;--i)a.push(e=n.children[i]=new Wd(r[i],i)),e.parent=n;return(u.parent=new Wd(null,0)).children=[u],u}(i);if(c.eachAfter(o),c.parent.m=-c.z,c.eachBefore(u),r)i.eachBefore(a);else{var f=i,s=i,l=i;i.eachBefore(function(t){t.x<f.x&&(f=t),t.x>s.x&&(s=t),t.depth>l.depth&&(l=t)});var h=f===s?1:t(f,s)/2,d=h-f.x,p=n/(s.x+h+d),v=e/(l.depth||1);i.eachBefore(function(t){t.x=(t.x+d)*p,t.y=t.depth*v})}return i}function o(n){var e=n.children,r=n.parent.children,i=n.i?r[n.i-1]:null;if(e){!function(t){for(var n,e=0,r=0,i=t.children,o=i.length;--o>=0;)(n=i[o]).z+=e,n.m+=e,e+=n.s+(r+=n.c)}(n);var o=(e[0].z+e[e.length-1].z)/2;i?(n.z=i.z+t(n._,i._),n.m=n.z-o):n.z=o}else i&&(n.z=i.z+t(n._,i._));n.parent.A=function(n,e,r){if(e){for(var i,o=n,u=n,a=e,c=o.parent.children[0],f=o.m,s=u.m,l=a.m,h=c.m;a=Ud(a),o=Bd(o),a&&o;)c=Bd(c),(u=Ud(u)).a=n,(i=a.z+l-o.z-f+t(a._,o._))>0&&(Fd(Hd(a,n,r),n,i),f+=i,s+=i),l+=a.m,f+=o.m,h+=c.m,s+=u.m;a&&!Ud(u)&&(u.t=a,u.m+=l-s),o&&!Bd(c)&&(c.t=o,c.m+=f-h,r=n)}return r}(n,i,n.parent.A||r[0])}function u(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function a(t){t.x*=n,t.y=t.depth*e}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i},Vd=function(t,n,e,r,i){for(var o,u=t.children,a=-1,c=u.length,f=t.value&&(i-e)/t.value;++a<c;)(o=u[a]).x0=n,o.x1=r,o.y0=e,o.y1=e+=o.value*f},Xd=(1+Math.sqrt(5))/2;function Gd(t,n,e,r,i,o){for(var u,a,c,f,s,l,h,d,p,v,g,y=[],m=n.children,b=0,_=0,x=m.length,w=n.value;b<x;){c=i-e,f=o-r;do{s=m[_++].value}while(!s&&_<x);for(l=h=s,g=s*s*(v=Math.max(f/c,c/f)/(w*t)),p=Math.max(h/g,g/l);_<x;++_){if(s+=a=m[_].value,a<l&&(l=a),a>h&&(h=a),g=s*s*v,(d=Math.max(h/g,g/l))>p){s-=a;break}p=d}y.push(u={value:s,dice:c<f,children:m.slice(b,_)}),u.dice?Od(u,e,r,i,w?r+=f*s/w:o):Vd(u,e,r,w?e+=c*s/w:i,o),w-=s,b=_}return y}var Zd=function t(n){function e(t,e,r,i,o){Gd(n,t,e,r,i,o)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(Xd),Qd=function(){var t=Zd,n=!1,e=1,r=1,i=[0],o=Td,u=Td,a=Td,c=Td,f=Td;function s(t){return t.x0=t.y0=0,t.x1=e,t.y1=r,t.eachBefore(l),i=[0],n&&t.eachBefore(Dd),t}function l(n){var e=i[n.depth],r=n.x0+e,s=n.y0+e,l=n.x1-e,h=n.y1-e;l<r&&(r=l=(r+l)/2),h<s&&(s=h=(s+h)/2),n.x0=r,n.y0=s,n.x1=l,n.y1=h,n.children&&(e=i[n.depth+1]=o(n)/2,r+=f(n)-e,s+=u(n)-e,(l-=a(n)-e)<r&&(r=l=(r+l)/2),(h-=c(n)-e)<s&&(s=h=(s+h)/2),t(n,r,s,l,h))}return s.round=function(t){return arguments.length?(n=!!t,s):n},s.size=function(t){return arguments.length?(e=+t[0],r=+t[1],s):[e,r]},s.tile=function(n){return arguments.length?(t=Md(n),s):t},s.padding=function(t){return arguments.length?s.paddingInner(t).paddingOuter(t):s.paddingInner()},s.paddingInner=function(t){return arguments.length?(o="function"==typeof t?t:Cd(+t),s):o},s.paddingOuter=function(t){return arguments.length?s.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):s.paddingTop()},s.paddingTop=function(t){return arguments.length?(u="function"==typeof t?t:Cd(+t),s):u},s.paddingRight=function(t){return arguments.length?(a="function"==typeof t?t:Cd(+t),s):a},s.paddingBottom=function(t){return arguments.length?(c="function"==typeof t?t:Cd(+t),s):c},s.paddingLeft=function(t){return arguments.length?(f="function"==typeof t?t:Cd(+t),s):f},s},Jd=function(t,n,e,r,i){var o,u,a=t.children,c=a.length,f=new Array(c+1);for(f[0]=u=o=0;o<c;++o)f[o+1]=u+=a[o].value;!function t(n,e,r,i,o,u,c){if(n>=e-1){var s=a[n];return s.x0=i,s.y0=o,s.x1=u,void(s.y1=c)}var l=f[n],h=r/2+l,d=n+1,p=e-1;for(;d<p;){var v=d+p>>>1;f[v]<h?d=v+1:p=v}h-f[d-1]<f[d]-h&&n+1<d&&--d;var g=f[d]-l,y=r-g;if(u-i>c-o){var m=(i*y+u*g)/r;t(n,d,g,i,o,m,c),t(d,e,y,m,o,u,c)}else{var b=(o*y+c*g)/r;t(n,d,g,i,o,u,b),t(d,e,y,i,b,u,c)}}(0,c,t.value,n,e,r,i)},Kd=function(t,n,e,r,i){(1&t.depth?Vd:Od)(t,n,e,r,i)},tp=function t(n){function e(t,e,r,i,o){if((u=t._squarify)&&u.ratio===n)for(var u,a,c,f,s,l=-1,h=u.length,d=t.value;++l<h;){for(c=(a=u[l]).children,f=a.value=0,s=c.length;f<s;++f)a.value+=c[f].value;a.dice?Od(a,e,r,i,r+=(o-r)*a.value/d):Vd(a,e,r,e+=(i-e)*a.value/d,o),d-=a.value}else t._squarify=u=Gd(n,t,e,r,i,o),u.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(Xd),np=function(t){for(var n,e=-1,r=t.length,i=t[r-1],o=0;++e<r;)n=i,i=t[e],o+=n[1]*i[0]-n[0]*i[1];return o/2},ep=function(t){for(var n,e,r=-1,i=t.length,o=0,u=0,a=t[i-1],c=0;++r<i;)n=a,a=t[r],c+=e=n[0]*a[1]-a[0]*n[1],o+=(n[0]+a[0])*e,u+=(n[1]+a[1])*e;return[o/(c*=3),u/c]},rp=function(t,n,e){return(n[0]-t[0])*(e[1]-t[1])-(n[1]-t[1])*(e[0]-t[0])};function ip(t,n){return t[0]-n[0]||t[1]-n[1]}function op(t){for(var n=t.length,e=[0,1],r=2,i=2;i<n;++i){for(;r>1&&rp(t[e[r-2]],t[e[r-1]],t[i])<=0;)--r;e[r++]=i}return e.slice(0,r)}var up=function(t){if((e=t.length)<3)return null;var n,e,r=new Array(e),i=new Array(e);for(n=0;n<e;++n)r[n]=[+t[n][0],+t[n][1],n];for(r.sort(ip),n=0;n<e;++n)i[n]=[r[n][0],-r[n][1]];var o=op(r),u=op(i),a=u[0]===o[0],c=u[u.length-1]===o[o.length-1],f=[];for(n=o.length-1;n>=0;--n)f.push(t[r[o[n]][2]]);for(n=+a;n<u.length-c;++n)f.push(t[r[u[n]][2]]);return f},ap=function(t,n){for(var e,r,i=t.length,o=t[i-1],u=n[0],a=n[1],c=o[0],f=o[1],s=!1,l=0;l<i;++l)e=(o=t[l])[0],(r=o[1])>a!=f>a&&u<(c-e)*(a-r)/(f-r)+e&&(s=!s),c=e,f=r;return s},cp=function(t){for(var n,e,r=-1,i=t.length,o=t[i-1],u=o[0],a=o[1],c=0;++r<i;)n=u,e=a,n-=u=(o=t[r])[0],e-=a=o[1],c+=Math.sqrt(n*n+e*e);return c},fp=function(){return Math.random()},sp=function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(fp),lp=function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var o;if(null!=r)o=r,r=null;else do{r=2*n()-1,o=2*n()-1,i=r*r+o*o}while(!i||i>1);return t+e*o*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(fp),hp=function t(n){function e(){var t=lp.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(fp),dp=function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(fp),pp=function t(n){function e(t){var e=dp.source(n)(t);return function(){return e()/t}}return e.source=t,e}(fp),vp=function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(fp),gp=Array.prototype,yp=gp.map,mp=gp.slice,bp={name:"implicit"};function _p(t){var n=Jo(),e=[],r=bp;function i(i){var o=i+"",u=n.get(o);if(!u){if(r!==bp)return r;n.set(o,u=e.push(i))}return t[(u-1)%t.length]}return t=null==t?[]:mp.call(t),i.domain=function(t){if(!arguments.length)return e.slice();e=[],n=Jo();for(var r,o,u=-1,a=t.length;++u<a;)n.has(o=(r=t[u])+"")||n.set(o,e.push(r));return i},i.range=function(n){return arguments.length?(t=mp.call(n),i):t.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return _p().domain(e).range(t).unknown(r)},i}function xp(){var t,n,e=_p().unknown(void 0),r=e.domain,i=e.range,o=[0,1],u=!1,a=0,c=0,f=.5;function s(){var e=r().length,s=o[1]<o[0],l=o[s-0],h=o[1-s];t=(h-l)/Math.max(1,e-a+2*c),u&&(t=Math.floor(t)),l+=(h-l-t*(e-a))*f,n=t*(1-a),u&&(l=Math.round(l),n=Math.round(n));var d=w(e).map(function(n){return l+t*n});return i(s?d.reverse():d)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),s()):r()},e.range=function(t){return arguments.length?(o=[+t[0],+t[1]],s()):o.slice()},e.rangeRound=function(t){return o=[+t[0],+t[1]],u=!0,s()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(u=!!t,s()):u},e.padding=function(t){return arguments.length?(a=c=Math.max(0,Math.min(1,t)),s()):a},e.paddingInner=function(t){return arguments.length?(a=Math.max(0,Math.min(1,t)),s()):a},e.paddingOuter=function(t){return arguments.length?(c=Math.max(0,Math.min(1,t)),s()):c},e.align=function(t){return arguments.length?(f=Math.max(0,Math.min(1,t)),s()):f},e.copy=function(){return xp().domain(r()).range(o).round(u).paddingInner(a).paddingOuter(c).align(f)},s()}function wp(){return function t(n){var e=n.copy;return n.padding=n.paddingOuter,delete n.paddingInner,delete n.paddingOuter,n.copy=function(){return t(e())},n}(xp().paddingInner(1))}var Mp=function(t){return function(){return t}},Tp=function(t){return+t},Cp=[0,1];function Sp(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:Mp(n)}function Ap(t,n,e,r){var i=t[0],o=t[1],u=n[0],a=n[1];return o<i?(i=e(o,i),u=r(a,u)):(i=e(i,o),u=r(u,a)),function(t){return u(i(t))}}function kp(t,n,e,r){var i=Math.min(t.length,n.length)-1,o=new Array(i),u=new Array(i),a=-1;for(t[i]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++a<i;)o[a]=e(t[a],t[a+1]),u[a]=r(n[a],n[a+1]);return function(n){var e=c(t,n,1,i)-1;return u[e](o[e](n))}}function Ep(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp())}function Np(t,n){var e,r,i,o=Cp,u=Cp,a=Qe,c=!1;function f(){return e=Math.min(o.length,u.length)>2?kp:Ap,r=i=null,s}function s(n){return(r||(r=e(o,u,c?function(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=n?0:t>=e?1:r(t)}}}(t):t,a)))(+n)}return s.invert=function(t){return(i||(i=e(u,o,Sp,c?function(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=0?n:t>=1?e:r(t)}}}(n):n)))(+t)},s.domain=function(t){return arguments.length?(o=yp.call(t,Tp),f()):o.slice()},s.range=function(t){return arguments.length?(u=mp.call(t),f()):u.slice()},s.rangeRound=function(t){return u=mp.call(t),a=tr,f()},s.clamp=function(t){return arguments.length?(c=!!t,f()):c},s.interpolate=function(t){return arguments.length?(a=t,f()):a},f()}var Dp=function(t,n,e){var r,i=t[0],o=t[t.length-1],u=k(i,o,null==n?10:n);switch((e=$a(null==e?",f":e)).type){case"s":var a=Math.max(Math.abs(i),Math.abs(o));return null!=e.precision||isNaN(r=Za(u,a))||(e.precision=r),Ba(e,a);case"":case"e":case"g":case"p":case"r":null!=e.precision||isNaN(r=Qa(u,Math.max(Math.abs(i),Math.abs(o))))||(e.precision=r-("e"===e.type));break;case"f":case"%":null!=e.precision||isNaN(r=Ga(u))||(e.precision=r-2*("%"===e.type))}return qa(e)};function Op(t){var n=t.domain;return t.ticks=function(t){var e=n();return S(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){return Dp(n(),t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),o=0,u=i.length-1,a=i[o],c=i[u];return c<a&&(r=a,a=c,c=r,r=o,o=u,u=r),(r=A(a,c,e))>0?r=A(a=Math.floor(a/r)*r,c=Math.ceil(c/r)*r,e):r<0&&(r=A(a=Math.ceil(a*r)/r,c=Math.floor(c*r)/r,e)),r>0?(i[o]=Math.floor(a/r)*r,i[u]=Math.ceil(c/r)*r,n(i)):r<0&&(i[o]=Math.ceil(a*r)/r,i[u]=Math.floor(c*r)/r,n(i)),t},t}function Rp(){var t=Np(Sp,Ue);return t.copy=function(){return Ep(t,Rp())},Op(t)}function jp(){var t=[0,1];function n(t){return+t}return n.invert=n,n.domain=n.range=function(e){return arguments.length?(t=yp.call(e,Tp),n):t.slice()},n.copy=function(){return jp().domain(t)},Op(n)}var Pp=function(t,n){var e,r=0,i=(t=t.slice()).length-1,o=t[r],u=t[i];return u<o&&(e=r,r=i,i=e,e=o,o=u,u=e),t[r]=n.floor(o),t[i]=n.ceil(u),t};function $p(t,n){return(n=Math.log(n/t))?function(e){return Math.log(e/t)/n}:Mp(n)}function Ip(t,n){return t<0?function(e){return-Math.pow(-n,e)*Math.pow(-t,1-e)}:function(e){return Math.pow(n,e)*Math.pow(t,1-e)}}function Lp(t){return isFinite(t)?+("1e"+t):t<0?0:t}function zp(t){return 10===t?Lp:t===Math.E?Math.exp:function(n){return Math.pow(t,n)}}function qp(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(n){return Math.log(n)/t})}function Bp(t){return function(n){return-t(-n)}}function Up(){var t=Np($p,Ip).domain([1,10]),n=t.domain,e=10,r=qp(10),i=zp(10);function o(){return r=qp(e),i=zp(e),n()[0]<0&&(r=Bp(r),i=Bp(i)),t}return t.base=function(t){return arguments.length?(e=+t,o()):e},t.domain=function(t){return arguments.length?(n(t),o()):n()},t.ticks=function(t){var o,u=n(),a=u[0],c=u[u.length-1];(o=c<a)&&(h=a,a=c,c=h);var f,s,l,h=r(a),d=r(c),p=null==t?10:+t,v=[];if(!(e%1)&&d-h<p){if(h=Math.round(h)-1,d=Math.round(d)+1,a>0){for(;h<d;++h)for(s=1,f=i(h);s<e;++s)if(!((l=f*s)<a)){if(l>c)break;v.push(l)}}else for(;h<d;++h)for(s=e-1,f=i(h);s>=1;--s)if(!((l=f*s)<a)){if(l>c)break;v.push(l)}}else v=S(h,d,Math.min(d-h,p)).map(i);return o?v.reverse():v},t.tickFormat=function(n,o){if(null==o&&(o=10===e?".0e":","),"function"!=typeof o&&(o=qa(o)),n===1/0)return o;null==n&&(n=10);var u=Math.max(1,e*n/t.ticks().length);return function(t){var n=t/i(Math.round(r(t)));return n*e<e-.5&&(n*=e),n<=u?o(t):""}},t.nice=function(){return n(Pp(n(),{floor:function(t){return i(Math.floor(r(t)))},ceil:function(t){return i(Math.ceil(r(t)))}}))},t.copy=function(){return Ep(t,Up().base(e))},t}function Fp(t,n){return t<0?-Math.pow(-t,n):Math.pow(t,n)}function Hp(){var t=1,n=Np(function(n,e){return(e=Fp(e,t)-(n=Fp(n,t)))?function(r){return(Fp(r,t)-n)/e}:Mp(e)},function(n,e){return e=Fp(e,t)-(n=Fp(n,t)),function(r){return Fp(n+e*r,1/t)}}),e=n.domain;return n.exponent=function(n){return arguments.length?(t=+n,e(e())):t},n.copy=function(){return Ep(n,Hp().exponent(t))},Op(n)}function Wp(){return Hp().exponent(.5)}function Yp(){var t=[],n=[],e=[];function i(){var r=0,i=Math.max(1,n.length);for(e=new Array(i-1);++r<i;)e[r-1]=D(t,r/i);return o}function o(t){if(!isNaN(t=+t))return n[c(e,t)]}return o.invertExtent=function(r){var i=n.indexOf(r);return i<0?[NaN,NaN]:[i>0?e[i-1]:t[0],i<e.length?e[i]:t[t.length-1]]},o.domain=function(n){if(!arguments.length)return t.slice();t=[];for(var e,o=0,u=n.length;o<u;++o)null==(e=n[o])||isNaN(e=+e)||t.push(e);return t.sort(r),i()},o.range=function(t){return arguments.length?(n=mp.call(t),i()):n.slice()},o.quantiles=function(){return e.slice()},o.copy=function(){return Yp().domain(t).range(n)},o}function Vp(){var t=0,n=1,e=1,r=[.5],i=[0,1];function o(t){if(t<=t)return i[c(r,t,0,e)]}function u(){var i=-1;for(r=new Array(e);++i<e;)r[i]=((i+1)*n-(i-e)*t)/(e+1);return o}return o.domain=function(e){return arguments.length?(t=+e[0],n=+e[1],u()):[t,n]},o.range=function(t){return arguments.length?(e=(i=mp.call(t)).length-1,u()):i.slice()},o.invertExtent=function(o){var u=i.indexOf(o);return u<0?[NaN,NaN]:u<1?[t,r[0]]:u>=e?[r[e-1],n]:[r[u-1],r[u]]},o.copy=function(){return Vp().domain([t,n]).range(i)},Op(o)}function Xp(){var t=[.5],n=[0,1],e=1;function r(r){if(r<=r)return n[c(t,r,0,e)]}return r.domain=function(i){return arguments.length?(t=mp.call(i),e=Math.min(t.length,n.length-1),r):t.slice()},r.range=function(i){return arguments.length?(n=mp.call(i),e=Math.min(t.length,n.length-1),r):n.slice()},r.invertExtent=function(e){var r=n.indexOf(e);return[t[r-1],t[r]]},r.copy=function(){return Xp().domain(t).range(n)},r}var Gp=new Date,Zp=new Date;function Qp(t,n,e,r){function i(n){return t(n=new Date(+n)),n}return i.floor=i,i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var u,a=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return a;do{a.push(u=new Date(+e)),n(e,o),t(e)}while(u<e&&e<r);return a},i.filter=function(e){return Qp(function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););})},e&&(i.count=function(n,r){return Gp.setTime(+n),Zp.setTime(+r),t(Gp),t(Zp),Math.floor(e(Gp,Zp))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var Jp=Qp(function(){},function(t,n){t.setTime(+t+n)},function(t,n){return n-t});Jp.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Qp(function(n){n.setTime(Math.floor(n/t)*t)},function(n,e){n.setTime(+n+e*t)},function(n,e){return(e-n)/t}):Jp:null};var Kp=Jp,tv=Jp.range,nv=6e4,ev=6048e5,rv=Qp(function(t){t.setTime(1e3*Math.floor(t/1e3))},function(t,n){t.setTime(+t+1e3*n)},function(t,n){return(n-t)/1e3},function(t){return t.getUTCSeconds()}),iv=rv,ov=rv.range,uv=Qp(function(t){t.setTime(Math.floor(t/nv)*nv)},function(t,n){t.setTime(+t+n*nv)},function(t,n){return(n-t)/nv},function(t){return t.getMinutes()}),av=uv,cv=uv.range,fv=Qp(function(t){var n=t.getTimezoneOffset()*nv%36e5;n<0&&(n+=36e5),t.setTime(36e5*Math.floor((+t-n)/36e5)+n)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getHours()}),sv=fv,lv=fv.range,hv=Qp(function(t){t.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*nv)/864e5},function(t){return t.getDate()-1}),dv=hv,pv=hv.range;function vv(t){return Qp(function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+7*n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*nv)/ev})}var gv=vv(0),yv=vv(1),mv=vv(2),bv=vv(3),_v=vv(4),xv=vv(5),wv=vv(6),Mv=gv.range,Tv=yv.range,Cv=mv.range,Sv=bv.range,Av=_v.range,kv=xv.range,Ev=wv.range,Nv=Qp(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,n){t.setMonth(t.getMonth()+n)},function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())},function(t){return t.getMonth()}),Dv=Nv,Ov=Nv.range,Rv=Qp(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n)},function(t,n){return n.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()});Rv.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Qp(function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)},function(n,e){n.setFullYear(n.getFullYear()+e*t)}):null};var jv=Rv,Pv=Rv.range,$v=Qp(function(t){t.setUTCSeconds(0,0)},function(t,n){t.setTime(+t+n*nv)},function(t,n){return(n-t)/nv},function(t){return t.getUTCMinutes()}),Iv=$v,Lv=$v.range,zv=Qp(function(t){t.setUTCMinutes(0,0,0)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getUTCHours()}),qv=zv,Bv=zv.range,Uv=Qp(function(t){t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+n)},function(t,n){return(n-t)/864e5},function(t){return t.getUTCDate()-1}),Fv=Uv,Hv=Uv.range;function Wv(t){return Qp(function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+7*n)},function(t,n){return(n-t)/ev})}var Yv=Wv(0),Vv=Wv(1),Xv=Wv(2),Gv=Wv(3),Zv=Wv(4),Qv=Wv(5),Jv=Wv(6),Kv=Yv.range,tg=Vv.range,ng=Xv.range,eg=Gv.range,rg=Zv.range,ig=Qv.range,og=Jv.range,ug=Qp(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCMonth(t.getUTCMonth()+n)},function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}),ag=ug,cg=ug.range,fg=Qp(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)},function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()});fg.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Qp(function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)},function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)}):null};var sg=fg,lg=fg.range;function hg(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function dg(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function pg(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}function vg(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,u=t.shortDays,a=t.months,c=t.shortMonths,f=Ag(i),s=kg(i),l=Ag(o),h=kg(o),d=Ag(u),p=kg(u),v=Ag(a),g=kg(a),y=Ag(c),m=kg(c),b={a:function(t){return u[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return a[t.getMonth()]},c:null,d:Xg,e:Xg,f:Kg,H:Gg,I:Zg,j:Qg,L:Jg,m:ty,M:ny,p:function(t){return i[+(t.getHours()>=12)]},Q:Ey,s:Ny,S:ey,u:ry,U:iy,V:oy,w:uy,W:ay,x:null,X:null,y:cy,Y:fy,Z:sy,"%":ky},_={a:function(t){return u[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return a[t.getUTCMonth()]},c:null,d:ly,e:ly,f:gy,H:hy,I:dy,j:py,L:vy,m:yy,M:my,p:function(t){return i[+(t.getUTCHours()>=12)]},Q:Ey,s:Ny,S:by,u:_y,U:xy,V:wy,w:My,W:Ty,x:null,X:null,y:Cy,Y:Sy,Z:Ay,"%":ky},x={a:function(t,n,e){var r=d.exec(n.slice(e));return r?(t.w=p[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=l.exec(n.slice(e));return r?(t.w=h[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=y.exec(n.slice(e));return r?(t.m=m[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=v.exec(n.slice(e));return r?(t.m=g[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return T(t,n,e,r)},d:Lg,e:Lg,f:Hg,H:qg,I:qg,j:zg,L:Fg,m:Ig,M:Bg,p:function(t,n,e){var r=f.exec(n.slice(e));return r?(t.p=s[r[0].toLowerCase()],e+r[0].length):-1},Q:Yg,s:Vg,S:Ug,u:Ng,U:Dg,V:Og,w:Eg,W:Rg,x:function(t,n,r){return T(t,e,n,r)},X:function(t,n,e){return T(t,r,n,e)},y:Pg,Y:jg,Z:$g,"%":Wg};function w(t,n){return function(e){var r,i,o,u=[],a=-1,c=0,f=t.length;for(e instanceof Date||(e=new Date(+e));++a<f;)37===t.charCodeAt(a)&&(u.push(t.slice(c,a)),null!=(i=xg[r=t.charAt(++a)])?r=t.charAt(++a):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),u.push(r),c=a+1);return u.push(t.slice(c,a)),u.join("")}}function M(t,n){return function(e){var r,i,o=pg(1900);if(T(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("p"in o&&(o.H=o.H%12+12*o.p),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=dg(pg(o.y))).getUTCDay(),r=i>4||0===i?Vv.ceil(r):Vv(r),r=Fv.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=n(pg(o.y))).getDay(),r=i>4||0===i?yv.ceil(r):yv(r),r=dv.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?dg(pg(o.y)).getUTCDay():n(pg(o.y)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,dg(o)):n(o)}}function T(t,n,e,r){for(var i,o,u=0,a=n.length,c=e.length;u<a;){if(r>=c)return-1;if(37===(i=n.charCodeAt(u++))){if(i=n.charAt(u++),!(o=x[i in xg?n.charAt(u++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return b.x=w(e,b),b.X=w(r,b),b.c=w(n,b),_.x=w(e,_),_.X=w(r,_),_.c=w(n,_),{format:function(t){var n=w(t+="",b);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",hg);return n.toString=function(){return t},n},utcFormat:function(t){var n=w(t+="",_);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t,dg);return n.toString=function(){return t},n}}}var gg,yg,mg,bg,_g,xg={"-":"",_:" ",0:"0"},wg=/^\s*\d+/,Mg=/^%/,Tg=/[\\^$*+?|[\]().{}]/g;function Cg(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function Sg(t){return t.replace(Tg,"\\$&")}function Ag(t){return new RegExp("^(?:"+t.map(Sg).join("|")+")","i")}function kg(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function Eg(t,n,e){var r=wg.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function Ng(t,n,e){var r=wg.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function Dg(t,n,e){var r=wg.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function Og(t,n,e){var r=wg.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function Rg(t,n,e){var r=wg.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function jg(t,n,e){var r=wg.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function Pg(t,n,e){var r=wg.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function $g(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function Ig(t,n,e){var r=wg.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function Lg(t,n,e){var r=wg.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function zg(t,n,e){var r=wg.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function qg(t,n,e){var r=wg.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function Bg(t,n,e){var r=wg.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function Ug(t,n,e){var r=wg.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function Fg(t,n,e){var r=wg.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function Hg(t,n,e){var r=wg.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function Wg(t,n,e){var r=Mg.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function Yg(t,n,e){var r=wg.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function Vg(t,n,e){var r=wg.exec(n.slice(e));return r?(t.Q=1e3*+r[0],e+r[0].length):-1}function Xg(t,n){return Cg(t.getDate(),n,2)}function Gg(t,n){return Cg(t.getHours(),n,2)}function Zg(t,n){return Cg(t.getHours()%12||12,n,2)}function Qg(t,n){return Cg(1+dv.count(jv(t),t),n,3)}function Jg(t,n){return Cg(t.getMilliseconds(),n,3)}function Kg(t,n){return Jg(t,n)+"000"}function ty(t,n){return Cg(t.getMonth()+1,n,2)}function ny(t,n){return Cg(t.getMinutes(),n,2)}function ey(t,n){return Cg(t.getSeconds(),n,2)}function ry(t){var n=t.getDay();return 0===n?7:n}function iy(t,n){return Cg(gv.count(jv(t),t),n,2)}function oy(t,n){var e=t.getDay();return t=e>=4||0===e?_v(t):_v.ceil(t),Cg(_v.count(jv(t),t)+(4===jv(t).getDay()),n,2)}function uy(t){return t.getDay()}function ay(t,n){return Cg(yv.count(jv(t),t),n,2)}function cy(t,n){return Cg(t.getFullYear()%100,n,2)}function fy(t,n){return Cg(t.getFullYear()%1e4,n,4)}function sy(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+Cg(n/60|0,"0",2)+Cg(n%60,"0",2)}function ly(t,n){return Cg(t.getUTCDate(),n,2)}function hy(t,n){return Cg(t.getUTCHours(),n,2)}function dy(t,n){return Cg(t.getUTCHours()%12||12,n,2)}function py(t,n){return Cg(1+Fv.count(sg(t),t),n,3)}function vy(t,n){return Cg(t.getUTCMilliseconds(),n,3)}function gy(t,n){return vy(t,n)+"000"}function yy(t,n){return Cg(t.getUTCMonth()+1,n,2)}function my(t,n){return Cg(t.getUTCMinutes(),n,2)}function by(t,n){return Cg(t.getUTCSeconds(),n,2)}function _y(t){var n=t.getUTCDay();return 0===n?7:n}function xy(t,n){return Cg(Yv.count(sg(t),t),n,2)}function wy(t,n){var e=t.getUTCDay();return t=e>=4||0===e?Zv(t):Zv.ceil(t),Cg(Zv.count(sg(t),t)+(4===sg(t).getUTCDay()),n,2)}function My(t){return t.getUTCDay()}function Ty(t,n){return Cg(Vv.count(sg(t),t),n,2)}function Cy(t,n){return Cg(t.getUTCFullYear()%100,n,2)}function Sy(t,n){return Cg(t.getUTCFullYear()%1e4,n,4)}function Ay(){return"+0000"}function ky(){return"%"}function Ey(t){return+t}function Ny(t){return Math.floor(+t/1e3)}function Dy(t){return gg=vg(t),yg=gg.format,mg=gg.parse,bg=gg.utcFormat,_g=gg.utcParse,gg}Dy({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var Oy=Date.prototype.toISOString?function(t){return t.toISOString()}:bg("%Y-%m-%dT%H:%M:%S.%LZ");var Ry=+new Date("2000-01-01T00:00:00.000Z")?function(t){var n=new Date(t);return isNaN(n)?null:n}:_g("%Y-%m-%dT%H:%M:%S.%LZ"),jy=1e3,Py=60*jy,$y=60*Py,Iy=24*$y,Ly=7*Iy,zy=30*Iy,qy=365*Iy;function By(t){return new Date(t)}function Uy(t){return t instanceof Date?+t:+new Date(+t)}function Fy(t,n,e,r,o,u,a,c,f){var s=Np(Sp,Ue),l=s.invert,h=s.domain,d=f(".%L"),p=f(":%S"),v=f("%I:%M"),g=f("%I %p"),y=f("%a %d"),m=f("%b %d"),b=f("%B"),_=f("%Y"),x=[[a,1,jy],[a,5,5*jy],[a,15,15*jy],[a,30,30*jy],[u,1,Py],[u,5,5*Py],[u,15,15*Py],[u,30,30*Py],[o,1,$y],[o,3,3*$y],[o,6,6*$y],[o,12,12*$y],[r,1,Iy],[r,2,2*Iy],[e,1,Ly],[n,1,zy],[n,3,3*zy],[t,1,qy]];function w(i){return(a(i)<i?d:u(i)<i?p:o(i)<i?v:r(i)<i?g:n(i)<i?e(i)<i?y:m:t(i)<i?b:_)(i)}function M(n,e,r,o){if(null==n&&(n=10),"number"==typeof n){var u=Math.abs(r-e)/n,a=i(function(t){return t[2]}).right(x,u);a===x.length?(o=k(e/qy,r/qy,n),n=t):a?(o=(a=x[u/x[a-1][2]<x[a][2]/u?a-1:a])[1],n=a[0]):(o=Math.max(k(e,r,n),1),n=c)}return null==o?n:n.every(o)}return s.invert=function(t){return new Date(l(t))},s.domain=function(t){return arguments.length?h(yp.call(t,Uy)):h().map(By)},s.ticks=function(t,n){var e,r=h(),i=r[0],o=r[r.length-1],u=o<i;return u&&(e=i,i=o,o=e),e=(e=M(t,i,o,n))?e.range(i,o+1):[],u?e.reverse():e},s.tickFormat=function(t,n){return null==n?w:f(n)},s.nice=function(t,n){var e=h();return(t=M(t,e[0],e[e.length-1],n))?h(Pp(e,t)):s},s.copy=function(){return Ep(s,Fy(t,n,e,r,o,u,a,c,f))},s}var Hy=function(){return Fy(jv,Dv,gv,dv,sv,av,iv,Kp,yg).domain([new Date(2e3,0,1),new Date(2e3,0,2)])},Wy=function(){return Fy(sg,ag,Yv,Fv,qv,Iv,iv,Kp,bg).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)])};function Yy(t){var n=0,e=1,r=1,i=!1;function o(e){var o=(e-n)*r;return t(i?Math.max(0,Math.min(1,o)):o)}return o.domain=function(t){return arguments.length?(n=+t[0],e=+t[1],r=n===e?0:1/(e-n),o):[n,e]},o.clamp=function(t){return arguments.length?(i=!!t,o):i},o.interpolator=function(n){return arguments.length?(t=n,o):t},o.copy=function(){return Yy(t).domain([n,e]).clamp(i)},Op(o)}function Vy(t){var n=0,e=.5,r=1,i=1,o=1,u=!1;function a(n){var r=.5+((n=+n)-e)*(n<e?i:o);return t(u?Math.max(0,Math.min(1,r)):r)}return a.domain=function(t){return arguments.length?(n=+t[0],e=+t[1],r=+t[2],i=n===e?0:.5/(e-n),o=e===r?0:.5/(r-e),a):[n,e,r]},a.clamp=function(t){return arguments.length?(u=!!t,a):u},a.interpolator=function(n){return arguments.length?(t=n,a):t},a.copy=function(){return Vy(t).domain([n,e,r]).clamp(u)},Op(a)}var Xy=function(t){for(var n=t.length/6|0,e=new Array(n),r=0;r<n;)e[r]="#"+t.slice(6*r,6*++r);return e},Gy=Xy("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),Zy=Xy("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),Qy=Xy("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),Jy=Xy("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),Ky=Xy("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),tm=Xy("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),nm=Xy("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),em=Xy("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),rm=Xy("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),im=function(t){return Le(t[t.length-1])},om=new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(Xy),um=im(om),am=new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(Xy),cm=im(am),fm=new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(Xy),sm=im(fm),lm=new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(Xy),hm=im(lm),dm=new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(Xy),pm=im(dm),vm=new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(Xy),gm=im(vm),ym=new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(Xy),mm=im(ym),bm=new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(Xy),_m=im(bm),xm=new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(Xy),wm=im(xm),Mm=new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(Xy),Tm=im(Mm),Cm=new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(Xy),Sm=im(Cm),Am=new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(Xy),km=im(Am),Em=new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(Xy),Nm=im(Em),Dm=new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(Xy),Om=im(Dm),Rm=new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(Xy),jm=im(Rm),Pm=new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(Xy),$m=im(Pm),Im=new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(Xy),Lm=im(Im),zm=new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(Xy),qm=im(zm),Bm=new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(Xy),Um=im(Bm),Fm=new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(Xy),Hm=im(Fm),Wm=new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(Xy),Ym=im(Wm),Vm=new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(Xy),Xm=im(Vm),Gm=new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(Xy),Zm=im(Gm),Qm=new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(Xy),Jm=im(Qm),Km=new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(Xy),tb=im(Km),nb=new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(Xy),eb=im(nb),rb=new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(Xy),ib=im(rb),ob=br(Se(300,.5,0),Se(-240,.5,1)),ub=br(Se(-100,.75,.35),Se(80,1.5,.8)),ab=br(Se(260,.75,.35),Se(80,1.5,.8)),cb=Se(),fb=function(t){(t<0||t>1)&&(t-=Math.floor(t));var n=Math.abs(t-.5);return cb.h=360*t-100,cb.s=1.5-1.5*n,cb.l=.8-.9*n,cb+""},sb=Yn(),lb=Math.PI/3,hb=2*Math.PI/3,db=function(t){var n;return t=(.5-t)*Math.PI,sb.r=255*(n=Math.sin(t))*n,sb.g=255*(n=Math.sin(t+lb))*n,sb.b=255*(n=Math.sin(t+hb))*n,sb+""};function pb(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}var vb=pb(Xy("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),gb=pb(Xy("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),yb=pb(Xy("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),mb=pb(Xy("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921")),bb=function(t){return function(){return t}},_b=Math.abs,xb=Math.atan2,wb=Math.cos,Mb=Math.max,Tb=Math.min,Cb=Math.sin,Sb=Math.sqrt,Ab=1e-12,kb=Math.PI,Eb=kb/2,Nb=2*kb;function Db(t){return t>=1?Eb:t<=-1?-Eb:Math.asin(t)}function Ob(t){return t.innerRadius}function Rb(t){return t.outerRadius}function jb(t){return t.startAngle}function Pb(t){return t.endAngle}function $b(t){return t&&t.padAngle}function Ib(t,n,e,r,i,o,u){var a=t-e,c=n-r,f=(u?o:-o)/Sb(a*a+c*c),s=f*c,l=-f*a,h=t+s,d=n+l,p=e+s,v=r+l,g=(h+p)/2,y=(d+v)/2,m=p-h,b=v-d,_=m*m+b*b,x=i-o,w=h*v-p*d,M=(b<0?-1:1)*Sb(Mb(0,x*x*_-w*w)),T=(w*b-m*M)/_,C=(-w*m-b*M)/_,S=(w*b+m*M)/_,A=(-w*m+b*M)/_,k=T-g,E=C-y,N=S-g,D=A-y;return k*k+E*E>N*N+D*D&&(T=S,C=A),{cx:T,cy:C,x01:-s,y01:-l,x11:T*(i/x-1),y11:C*(i/x-1)}}var Lb=function(){var t=Ob,n=Rb,e=bb(0),r=null,i=jb,o=Pb,u=$b,a=null;function c(){var c,f,s,l=+t.apply(this,arguments),h=+n.apply(this,arguments),d=i.apply(this,arguments)-Eb,p=o.apply(this,arguments)-Eb,v=_b(p-d),g=p>d;if(a||(a=c=Fo()),h<l&&(f=h,h=l,l=f),h>Ab)if(v>Nb-Ab)a.moveTo(h*wb(d),h*Cb(d)),a.arc(0,0,h,d,p,!g),l>Ab&&(a.moveTo(l*wb(p),l*Cb(p)),a.arc(0,0,l,p,d,g));else{var y,m,b=d,_=p,x=d,w=p,M=v,T=v,C=u.apply(this,arguments)/2,S=C>Ab&&(r?+r.apply(this,arguments):Sb(l*l+h*h)),A=Tb(_b(h-l)/2,+e.apply(this,arguments)),k=A,E=A;if(S>Ab){var N=Db(S/l*Cb(C)),D=Db(S/h*Cb(C));(M-=2*N)>Ab?(x+=N*=g?1:-1,w-=N):(M=0,x=w=(d+p)/2),(T-=2*D)>Ab?(b+=D*=g?1:-1,_-=D):(T=0,b=_=(d+p)/2)}var O=h*wb(b),R=h*Cb(b),j=l*wb(w),P=l*Cb(w);if(A>Ab){var $=h*wb(_),I=h*Cb(_),L=l*wb(x),z=l*Cb(x);if(v<kb){var q=M>Ab?function(t,n,e,r,i,o,u,a){var c=e-t,f=r-n,s=u-i,l=a-o,h=(s*(n-o)-l*(t-i))/(l*c-s*f);return[t+h*c,n+h*f]}(O,R,L,z,$,I,j,P):[j,P],B=O-q[0],U=R-q[1],F=$-q[0],H=I-q[1],W=1/Cb(((s=(B*F+U*H)/(Sb(B*B+U*U)*Sb(F*F+H*H)))>1?0:s<-1?kb:Math.acos(s))/2),Y=Sb(q[0]*q[0]+q[1]*q[1]);k=Tb(A,(l-Y)/(W-1)),E=Tb(A,(h-Y)/(W+1))}}T>Ab?E>Ab?(y=Ib(L,z,O,R,h,E,g),m=Ib($,I,j,P,h,E,g),a.moveTo(y.cx+y.x01,y.cy+y.y01),E<A?a.arc(y.cx,y.cy,E,xb(y.y01,y.x01),xb(m.y01,m.x01),!g):(a.arc(y.cx,y.cy,E,xb(y.y01,y.x01),xb(y.y11,y.x11),!g),a.arc(0,0,h,xb(y.cy+y.y11,y.cx+y.x11),xb(m.cy+m.y11,m.cx+m.x11),!g),a.arc(m.cx,m.cy,E,xb(m.y11,m.x11),xb(m.y01,m.x01),!g))):(a.moveTo(O,R),a.arc(0,0,h,b,_,!g)):a.moveTo(O,R),l>Ab&&M>Ab?k>Ab?(y=Ib(j,P,$,I,l,-k,g),m=Ib(O,R,L,z,l,-k,g),a.lineTo(y.cx+y.x01,y.cy+y.y01),k<A?a.arc(y.cx,y.cy,k,xb(y.y01,y.x01),xb(m.y01,m.x01),!g):(a.arc(y.cx,y.cy,k,xb(y.y01,y.x01),xb(y.y11,y.x11),!g),a.arc(0,0,l,xb(y.cy+y.y11,y.cx+y.x11),xb(m.cy+m.y11,m.cx+m.x11),g),a.arc(m.cx,m.cy,k,xb(m.y11,m.x11),xb(m.y01,m.x01),!g))):a.arc(0,0,l,w,x,g):a.lineTo(j,P)}else a.moveTo(0,0);if(a.closePath(),c)return a=null,c+""||null}return c.centroid=function(){var e=(+t.apply(this,arguments)+ +n.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-kb/2;return[wb(r)*e,Cb(r)*e]},c.innerRadius=function(n){return arguments.length?(t="function"==typeof n?n:bb(+n),c):t},c.outerRadius=function(t){return arguments.length?(n="function"==typeof t?t:bb(+t),c):n},c.cornerRadius=function(t){return arguments.length?(e="function"==typeof t?t:bb(+t),c):e},c.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:bb(+t),c):r},c.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:bb(+t),c):i},c.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:bb(+t),c):o},c.padAngle=function(t){return arguments.length?(u="function"==typeof t?t:bb(+t),c):u},c.context=function(t){return arguments.length?(a=null==t?null:t,c):a},c};function zb(t){this._context=t}zb.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var qb=function(t){return new zb(t)};function Bb(t){return t[0]}function Ub(t){return t[1]}var Fb=function(){var t=Bb,n=Ub,e=bb(!0),r=null,i=qb,o=null;function u(u){var a,c,f,s=u.length,l=!1;for(null==r&&(o=i(f=Fo())),a=0;a<=s;++a)!(a<s&&e(c=u[a],a,u))===l&&((l=!l)?o.lineStart():o.lineEnd()),l&&o.point(+t(c,a,u),+n(c,a,u));if(f)return o=null,f+""||null}return u.x=function(n){return arguments.length?(t="function"==typeof n?n:bb(+n),u):t},u.y=function(t){return arguments.length?(n="function"==typeof t?t:bb(+t),u):n},u.defined=function(t){return arguments.length?(e="function"==typeof t?t:bb(!!t),u):e},u.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),u):i},u.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),u):r},u},Hb=function(){var t=Bb,n=null,e=bb(0),r=Ub,i=bb(!0),o=null,u=qb,a=null;function c(c){var f,s,l,h,d,p=c.length,v=!1,g=new Array(p),y=new Array(p);for(null==o&&(a=u(d=Fo())),f=0;f<=p;++f){if(!(f<p&&i(h=c[f],f,c))===v)if(v=!v)s=f,a.areaStart(),a.lineStart();else{for(a.lineEnd(),a.lineStart(),l=f-1;l>=s;--l)a.point(g[l],y[l]);a.lineEnd(),a.areaEnd()}v&&(g[f]=+t(h,f,c),y[f]=+e(h,f,c),a.point(n?+n(h,f,c):g[f],r?+r(h,f,c):y[f]))}if(d)return a=null,d+""||null}function f(){return Fb().defined(i).curve(u).context(o)}return c.x=function(e){return arguments.length?(t="function"==typeof e?e:bb(+e),n=null,c):t},c.x0=function(n){return arguments.length?(t="function"==typeof n?n:bb(+n),c):t},c.x1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:bb(+t),c):n},c.y=function(t){return arguments.length?(e="function"==typeof t?t:bb(+t),r=null,c):e},c.y0=function(t){return arguments.length?(e="function"==typeof t?t:bb(+t),c):e},c.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:bb(+t),c):r},c.lineX0=c.lineY0=function(){return f().x(t).y(e)},c.lineY1=function(){return f().x(t).y(r)},c.lineX1=function(){return f().x(n).y(e)},c.defined=function(t){return arguments.length?(i="function"==typeof t?t:bb(!!t),c):i},c.curve=function(t){return arguments.length?(u=t,null!=o&&(a=u(o)),c):u},c.context=function(t){return arguments.length?(null==t?o=a=null:a=u(o=t),c):o},c},Wb=function(t,n){return n<t?-1:n>t?1:n>=t?0:NaN},Yb=function(t){return t},Vb=function(){var t=Yb,n=Wb,e=null,r=bb(0),i=bb(Nb),o=bb(0);function u(u){var a,c,f,s,l,h=u.length,d=0,p=new Array(h),v=new Array(h),g=+r.apply(this,arguments),y=Math.min(Nb,Math.max(-Nb,i.apply(this,arguments)-g)),m=Math.min(Math.abs(y)/h,o.apply(this,arguments)),b=m*(y<0?-1:1);for(a=0;a<h;++a)(l=v[p[a]=a]=+t(u[a],a,u))>0&&(d+=l);for(null!=n?p.sort(function(t,e){return n(v[t],v[e])}):null!=e&&p.sort(function(t,n){return e(u[t],u[n])}),a=0,f=d?(y-h*b)/d:0;a<h;++a,g=s)c=p[a],s=g+((l=v[c])>0?l*f:0)+b,v[c]={data:u[c],index:a,value:l,startAngle:g,endAngle:s,padAngle:m};return v}return u.value=function(n){return arguments.length?(t="function"==typeof n?n:bb(+n),u):t},u.sortValues=function(t){return arguments.length?(n=t,e=null,u):n},u.sort=function(t){return arguments.length?(e=t,n=null,u):e},u.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:bb(+t),u):r},u.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:bb(+t),u):i},u.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:bb(+t),u):o},u},Xb=Zb(qb);function Gb(t){this._curve=t}function Zb(t){function n(n){return new Gb(t(n))}return n._curve=t,n}function Qb(t){var n=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?n(Zb(t)):n()._curve},t}Gb.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};var Jb=function(){return Qb(Fb().curve(Xb))},Kb=function(){var t=Hb().curve(Xb),n=t.curve,e=t.lineX0,r=t.lineX1,i=t.lineY0,o=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return Qb(e())},delete t.lineX0,t.lineEndAngle=function(){return Qb(r())},delete t.lineX1,t.lineInnerRadius=function(){return Qb(i())},delete t.lineY0,t.lineOuterRadius=function(){return Qb(o())},delete t.lineY1,t.curve=function(t){return arguments.length?n(Zb(t)):n()._curve},t},t_=function(t,n){return[(n=+n)*Math.cos(t-=Math.PI/2),n*Math.sin(t)]},n_=Array.prototype.slice;function e_(t){return t.source}function r_(t){return t.target}function i_(t){var n=e_,e=r_,r=Bb,i=Ub,o=null;function u(){var u,a=n_.call(arguments),c=n.apply(this,a),f=e.apply(this,a);if(o||(o=u=Fo()),t(o,+r.apply(this,(a[0]=c,a)),+i.apply(this,a),+r.apply(this,(a[0]=f,a)),+i.apply(this,a)),u)return o=null,u+""||null}return u.source=function(t){return arguments.length?(n=t,u):n},u.target=function(t){return arguments.length?(e=t,u):e},u.x=function(t){return arguments.length?(r="function"==typeof t?t:bb(+t),u):r},u.y=function(t){return arguments.length?(i="function"==typeof t?t:bb(+t),u):i},u.context=function(t){return arguments.length?(o=null==t?null:t,u):o},u}function o_(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n=(n+r)/2,e,n,i,r,i)}function u_(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n,e=(e+i)/2,r,e,r,i)}function a_(t,n,e,r,i){var o=t_(n,e),u=t_(n,e=(e+i)/2),a=t_(r,e),c=t_(r,i);t.moveTo(o[0],o[1]),t.bezierCurveTo(u[0],u[1],a[0],a[1],c[0],c[1])}function c_(){return i_(o_)}function f_(){return i_(u_)}function s_(){var t=i_(a_);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t}var l_={draw:function(t,n){var e=Math.sqrt(n/kb);t.moveTo(e,0),t.arc(0,0,e,0,Nb)}},h_={draw:function(t,n){var e=Math.sqrt(n/5)/2;t.moveTo(-3*e,-e),t.lineTo(-e,-e),t.lineTo(-e,-3*e),t.lineTo(e,-3*e),t.lineTo(e,-e),t.lineTo(3*e,-e),t.lineTo(3*e,e),t.lineTo(e,e),t.lineTo(e,3*e),t.lineTo(-e,3*e),t.lineTo(-e,e),t.lineTo(-3*e,e),t.closePath()}},d_=Math.sqrt(1/3),p_=2*d_,v_={draw:function(t,n){var e=Math.sqrt(n/p_),r=e*d_;t.moveTo(0,-e),t.lineTo(r,0),t.lineTo(0,e),t.lineTo(-r,0),t.closePath()}},g_=Math.sin(kb/10)/Math.sin(7*kb/10),y_=Math.sin(Nb/10)*g_,m_=-Math.cos(Nb/10)*g_,b_={draw:function(t,n){var e=Math.sqrt(.8908130915292852*n),r=y_*e,i=m_*e;t.moveTo(0,-e),t.lineTo(r,i);for(var o=1;o<5;++o){var u=Nb*o/5,a=Math.cos(u),c=Math.sin(u);t.lineTo(c*e,-a*e),t.lineTo(a*r-c*i,c*r+a*i)}t.closePath()}},__={draw:function(t,n){var e=Math.sqrt(n),r=-e/2;t.rect(r,r,e,e)}},x_=Math.sqrt(3),w_={draw:function(t,n){var e=-Math.sqrt(n/(3*x_));t.moveTo(0,2*e),t.lineTo(-x_*e,-e),t.lineTo(x_*e,-e),t.closePath()}},M_=Math.sqrt(3)/2,T_=1/Math.sqrt(12),C_=3*(T_/2+1),S_={draw:function(t,n){var e=Math.sqrt(n/C_),r=e/2,i=e*T_,o=r,u=e*T_+e,a=-o,c=u;t.moveTo(r,i),t.lineTo(o,u),t.lineTo(a,c),t.lineTo(-.5*r-M_*i,M_*r+-.5*i),t.lineTo(-.5*o-M_*u,M_*o+-.5*u),t.lineTo(-.5*a-M_*c,M_*a+-.5*c),t.lineTo(-.5*r+M_*i,-.5*i-M_*r),t.lineTo(-.5*o+M_*u,-.5*u-M_*o),t.lineTo(-.5*a+M_*c,-.5*c-M_*a),t.closePath()}},A_=[l_,h_,v_,__,b_,w_,S_],k_=function(){var t=bb(l_),n=bb(64),e=null;function r(){var r;if(e||(e=r=Fo()),t.apply(this,arguments).draw(e,+n.apply(this,arguments)),r)return e=null,r+""||null}return r.type=function(n){return arguments.length?(t="function"==typeof n?n:bb(n),r):t},r.size=function(t){return arguments.length?(n="function"==typeof t?t:bb(+t),r):n},r.context=function(t){return arguments.length?(e=null==t?null:t,r):e},r},E_=function(){};function N_(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function D_(t){this._context=t}D_.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:N_(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:N_(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};var O_=function(t){return new D_(t)};function R_(t){this._context=t}R_.prototype={areaStart:E_,areaEnd:E_,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:N_(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};var j_=function(t){return new R_(t)};function P_(t){this._context=t}P_.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,r):this._context.moveTo(e,r);break;case 3:this._point=4;default:N_(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};var $_=function(t){return new P_(t)};function I_(t,n){this._basis=new D_(t),this._beta=n}I_.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var r,i=t[0],o=n[0],u=t[e]-i,a=n[e]-o,c=-1;++c<=e;)r=c/e,this._basis.point(this._beta*t[c]+(1-this._beta)*(i+r*u),this._beta*n[c]+(1-this._beta)*(o+r*a));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};var L_=function t(n){function e(t){return 1===n?new D_(t):new I_(t,n)}return e.beta=function(n){return t(+n)},e}(.85);function z_(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function q_(t,n){this._context=t,this._k=(1-n)/6}q_.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:z_(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:z_(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var B_=function t(n){function e(t){return new q_(t,n)}return e.tension=function(n){return t(+n)},e}(0);function U_(t,n){this._context=t,this._k=(1-n)/6}U_.prototype={areaStart:E_,areaEnd:E_,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:z_(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var F_=function t(n){function e(t){return new U_(t,n)}return e.tension=function(n){return t(+n)},e}(0);function H_(t,n){this._context=t,this._k=(1-n)/6}H_.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:z_(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var W_=function t(n){function e(t){return new H_(t,n)}return e.tension=function(n){return t(+n)},e}(0);function Y_(t,n,e){var r=t._x1,i=t._y1,o=t._x2,u=t._y2;if(t._l01_a>Ab){var a=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,c=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*a-t._x0*t._l12_2a+t._x2*t._l01_2a)/c,i=(i*a-t._y0*t._l12_2a+t._y2*t._l01_2a)/c}if(t._l23_a>Ab){var f=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,s=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*f+t._x1*t._l23_2a-n*t._l12_2a)/s,u=(u*f+t._y1*t._l23_2a-e*t._l12_2a)/s}t._context.bezierCurveTo(r,i,o,u,t._x2,t._y2)}function V_(t,n){this._context=t,this._alpha=n}V_.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:Y_(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var X_=function t(n){function e(t){return n?new V_(t,n):new q_(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function G_(t,n){this._context=t,this._alpha=n}G_.prototype={areaStart:E_,areaEnd:E_,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Y_(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Z_=function t(n){function e(t){return n?new G_(t,n):new U_(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function Q_(t,n){this._context=t,this._alpha=n}Q_.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Y_(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var J_=function t(n){function e(t){return n?new Q_(t,n):new H_(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function K_(t){this._context=t}K_.prototype={areaStart:E_,areaEnd:E_,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}};var tx=function(t){return new K_(t)};function nx(t){return t<0?-1:1}function ex(t,n,e){var r=t._x1-t._x0,i=n-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),u=(e-t._y1)/(i||r<0&&-0),a=(o*i+u*r)/(r+i);return(nx(o)+nx(u))*Math.min(Math.abs(o),Math.abs(u),.5*Math.abs(a))||0}function rx(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function ix(t,n,e){var r=t._x0,i=t._y0,o=t._x1,u=t._y1,a=(o-r)/3;t._context.bezierCurveTo(r+a,i+a*n,o-a,u-a*e,o,u)}function ox(t){this._context=t}function ux(t){this._context=new ax(t)}function ax(t){this._context=t}function cx(t){return new ox(t)}function fx(t){return new ux(t)}function sx(t){this._context=t}function lx(t){var n,e,r=t.length-1,i=new Array(r),o=new Array(r),u=new Array(r);for(i[0]=0,o[0]=2,u[0]=t[0]+2*t[1],n=1;n<r-1;++n)i[n]=1,o[n]=4,u[n]=4*t[n]+2*t[n+1];for(i[r-1]=2,o[r-1]=7,u[r-1]=8*t[r-1]+t[r],n=1;n<r;++n)e=i[n]/o[n-1],o[n]-=e,u[n]-=e*u[n-1];for(i[r-1]=u[r-1]/o[r-1],n=r-2;n>=0;--n)i[n]=(u[n]-i[n+1])/o[n];for(o[r-1]=(t[r]+i[r-1])/2,n=0;n<r-1;++n)o[n]=2*t[n+1]-i[n+1];return[i,o]}ox.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:ix(this,this._t0,rx(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,ix(this,rx(this,e=ex(this,t,n)),e);break;default:ix(this,this._t0,e=ex(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(ux.prototype=Object.create(ox.prototype)).point=function(t,n){ox.prototype.point.call(this,n,t)},ax.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,o){this._context.bezierCurveTo(n,t,r,e,o,i)}},sx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var r=lx(t),i=lx(n),o=0,u=1;u<e;++o,++u)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],t[u],n[u]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}};var hx=function(t){return new sx(t)};function dx(t,n){this._context=t,this._t=n}dx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}};var px=function(t){return new dx(t,.5)};function vx(t){return new dx(t,0)}function gx(t){return new dx(t,1)}var yx=function(t,n){if((i=t.length)>1)for(var e,r,i,o=1,u=t[n[0]],a=u.length;o<i;++o)for(r=u,u=t[n[o]],e=0;e<a;++e)u[e][1]+=u[e][0]=isNaN(r[e][1])?r[e][0]:r[e][1]},mx=function(t){for(var n=t.length,e=new Array(n);--n>=0;)e[n]=n;return e};function bx(t,n){return t[n]}var _x=function(){var t=bb([]),n=mx,e=yx,r=bx;function i(i){var o,u,a=t.apply(this,arguments),c=i.length,f=a.length,s=new Array(f);for(o=0;o<f;++o){for(var l,h=a[o],d=s[o]=new Array(c),p=0;p<c;++p)d[p]=l=[0,+r(i[p],h,p,i)],l.data=i[p];d.key=h}for(o=0,u=n(s);o<f;++o)s[u[o]].index=o;return e(s,u),s}return i.keys=function(n){return arguments.length?(t="function"==typeof n?n:bb(n_.call(n)),i):t},i.value=function(t){return arguments.length?(r="function"==typeof t?t:bb(+t),i):r},i.order=function(t){return arguments.length?(n=null==t?mx:"function"==typeof t?t:bb(n_.call(t)),i):n},i.offset=function(t){return arguments.length?(e=null==t?yx:t,i):e},i},xx=function(t,n){if((r=t.length)>0){for(var e,r,i,o=0,u=t[0].length;o<u;++o){for(i=e=0;e<r;++e)i+=t[e][o][1]||0;if(i)for(e=0;e<r;++e)t[e][o][1]/=i}yx(t,n)}},wx=function(t,n){if((a=t.length)>1)for(var e,r,i,o,u,a,c=0,f=t[n[0]].length;c<f;++c)for(o=u=0,e=0;e<a;++e)(i=(r=t[n[e]][c])[1]-r[0])>=0?(r[0]=o,r[1]=o+=i):i<0?(r[1]=u,r[0]=u+=i):r[0]=o},Mx=function(t,n){if((e=t.length)>0){for(var e,r=0,i=t[n[0]],o=i.length;r<o;++r){for(var u=0,a=0;u<e;++u)a+=t[u][r][1]||0;i[r][1]+=i[r][0]=-a/2}yx(t,n)}},Tx=function(t,n){if((i=t.length)>0&&(r=(e=t[n[0]]).length)>0){for(var e,r,i,o=0,u=1;u<r;++u){for(var a=0,c=0,f=0;a<i;++a){for(var s=t[n[a]],l=s[u][1]||0,h=(l-(s[u-1][1]||0))/2,d=0;d<a;++d){var p=t[n[d]];h+=(p[u][1]||0)-(p[u-1][1]||0)}c+=l,f+=h*l}e[u-1][1]+=e[u-1][0]=o,c&&(o-=f/c)}e[u-1][1]+=e[u-1][0]=o,yx(t,n)}},Cx=function(t){var n=t.map(Sx);return mx(t).sort(function(t,e){return n[t]-n[e]})};function Sx(t){for(var n,e=0,r=-1,i=t.length;++r<i;)(n=+t[r][1])&&(e+=n);return e}var Ax=function(t){return Cx(t).reverse()},kx=function(t){var n,e,r=t.length,i=t.map(Sx),o=mx(t).sort(function(t,n){return i[n]-i[t]}),u=0,a=0,c=[],f=[];for(n=0;n<r;++n)e=o[n],u<a?(u+=i[e],c.push(e)):(a+=i[e],f.push(e));return f.reverse().concat(c)},Ex=function(t){return mx(t).reverse()},Nx=function(t){return function(){return t}};function Dx(t){return t[0]}function Ox(t){return t[1]}function Rx(){this._=null}function jx(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function Px(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function $x(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function Ix(t){for(;t.L;)t=t.L;return t}Rx.prototype={constructor:Rx,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=Ix(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(i=r.R)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(Px(this,e),e=(t=e).U),e.C=!1,r.C=!0,$x(this,r)):(i=r.L)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&($x(this,e),e=(t=e).U),e.C=!1,r.C=!0,Px(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,o=t.L,u=t.R;if(e=o?u?Ix(u):o:u,i?i.L===t?i.L=e:i.R=e:this._=e,o&&u?(r=e.C,e.C=t.C,e.L=o,o.U=e,e!==u?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=u,u.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((n=i.R).C&&(n.C=!1,i.C=!0,Px(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,$x(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,Px(this,i),t=this._;break}}else if((n=i.L).C&&(n.C=!1,i.C=!0,$x(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,Px(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,$x(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var Lx=Rx;function zx(t,n,e,r){var i=[null,null],o=fw.push(i)-1;return i.left=t,i.right=n,e&&Bx(i,t,n,e),r&&Bx(i,n,t,r),aw[t.index].halfedges.push(o),aw[n.index].halfedges.push(o),i}function qx(t,n,e){var r=[n,e];return r.left=t,r}function Bx(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function Ux(t,n,e,r,i){var o,u=t[0],a=t[1],c=u[0],f=u[1],s=0,l=1,h=a[0]-c,d=a[1]-f;if(o=n-c,h||!(o>0)){if(o/=h,h<0){if(o<s)return;o<l&&(l=o)}else if(h>0){if(o>l)return;o>s&&(s=o)}if(o=r-c,h||!(o<0)){if(o/=h,h<0){if(o>l)return;o>s&&(s=o)}else if(h>0){if(o<s)return;o<l&&(l=o)}if(o=e-f,d||!(o>0)){if(o/=d,d<0){if(o<s)return;o<l&&(l=o)}else if(d>0){if(o>l)return;o>s&&(s=o)}if(o=i-f,d||!(o<0)){if(o/=d,d<0){if(o>l)return;o>s&&(s=o)}else if(d>0){if(o<s)return;o<l&&(l=o)}return!(s>0||l<1)||(s>0&&(t[0]=[c+s*h,f+s*d]),l<1&&(t[1]=[c+l*h,f+l*d]),!0)}}}}}function Fx(t,n,e,r,i){var o=t[1];if(o)return!0;var u,a,c=t[0],f=t.left,s=t.right,l=f[0],h=f[1],d=s[0],p=s[1],v=(l+d)/2,g=(h+p)/2;if(p===h){if(v<n||v>=r)return;if(l>d){if(c){if(c[1]>=i)return}else c=[v,e];o=[v,i]}else{if(c){if(c[1]<e)return}else c=[v,i];o=[v,e]}}else if(a=g-(u=(l-d)/(p-h))*v,u<-1||u>1)if(l>d){if(c){if(c[1]>=i)return}else c=[(e-a)/u,e];o=[(i-a)/u,i]}else{if(c){if(c[1]<e)return}else c=[(i-a)/u,i];o=[(e-a)/u,e]}else if(h<p){if(c){if(c[0]>=r)return}else c=[n,u*n+a];o=[r,u*r+a]}else{if(c){if(c[0]<n)return}else c=[r,u*r+a];o=[n,u*n+a]}return t[0]=c,t[1]=o,!0}function Hx(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function Wx(t,n){return n[+(n.left!==t.site)]}function Yx(t,n){return n[+(n.left===t.site)]}var Vx,Xx=[];function Gx(){jx(this),this.x=this.y=this.arc=this.site=this.cy=null}function Zx(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,o=e.site;if(r!==o){var u=i[0],a=i[1],c=r[0]-u,f=r[1]-a,s=o[0]-u,l=o[1]-a,h=2*(c*l-f*s);if(!(h>=-lw)){var d=c*c+f*f,p=s*s+l*l,v=(l*d-f*p)/h,g=(c*p-s*d)/h,y=Xx.pop()||new Gx;y.arc=t,y.site=i,y.x=v+u,y.y=(y.cy=g+a)+Math.sqrt(v*v+g*g),t.circle=y;for(var m=null,b=cw._;b;)if(y.y<b.y||y.y===b.y&&y.x<=b.x){if(!b.L){m=b.P;break}b=b.L}else{if(!b.R){m=b;break}b=b.R}cw.insert(m,y),m||(Vx=y)}}}}function Qx(t){var n=t.circle;n&&(n.P||(Vx=n.N),cw.remove(n),Xx.push(n),jx(n),t.circle=null)}var Jx=[];function Kx(){jx(this),this.edge=this.site=this.circle=null}function tw(t){var n=Jx.pop()||new Kx;return n.site=t,n}function nw(t){Qx(t),uw.remove(t),Jx.push(t),jx(t)}function ew(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],o=t.P,u=t.N,a=[t];nw(t);for(var c=o;c.circle&&Math.abs(e-c.circle.x)<sw&&Math.abs(r-c.circle.cy)<sw;)o=c.P,a.unshift(c),nw(c),c=o;a.unshift(c),Qx(c);for(var f=u;f.circle&&Math.abs(e-f.circle.x)<sw&&Math.abs(r-f.circle.cy)<sw;)u=f.N,a.push(f),nw(f),f=u;a.push(f),Qx(f);var s,l=a.length;for(s=1;s<l;++s)f=a[s],c=a[s-1],Bx(f.edge,c.site,f.site,i);c=a[0],(f=a[l-1]).edge=zx(c.site,f.site,null,i),Zx(c),Zx(f)}function rw(t){for(var n,e,r,i,o=t[0],u=t[1],a=uw._;a;)if((r=iw(a,u)-o)>sw)a=a.L;else{if(!((i=o-ow(a,u))>sw)){r>-sw?(n=a.P,e=a):i>-sw?(n=a,e=a.N):n=e=a;break}if(!a.R){n=a;break}a=a.R}!function(t){aw[t.index]={site:t,halfedges:[]}}(t);var c=tw(t);if(uw.insert(n,c),n||e){if(n===e)return Qx(n),e=tw(n.site),uw.insert(c,e),c.edge=e.edge=zx(n.site,c.site),Zx(n),void Zx(e);if(e){Qx(n),Qx(e);var f=n.site,s=f[0],l=f[1],h=t[0]-s,d=t[1]-l,p=e.site,v=p[0]-s,g=p[1]-l,y=2*(h*g-d*v),m=h*h+d*d,b=v*v+g*g,_=[(g*m-d*b)/y+s,(h*b-v*m)/y+l];Bx(e.edge,f,p,_),c.edge=zx(f,t,null,_),e.edge=zx(t,p,null,_),Zx(n),Zx(e)}else c.edge=zx(n.site,c.site)}}function iw(t,n){var e=t.site,r=e[0],i=e[1],o=i-n;if(!o)return r;var u=t.P;if(!u)return-1/0;var a=(e=u.site)[0],c=e[1],f=c-n;if(!f)return a;var s=a-r,l=1/o-1/f,h=s/f;return l?(-h+Math.sqrt(h*h-2*l*(s*s/(-2*f)-c+f/2+i-o/2)))/l+r:(r+a)/2}function ow(t,n){var e=t.N;if(e)return iw(e,n);var r=t.site;return r[1]===n?r[0]:1/0}var uw,aw,cw,fw,sw=1e-6,lw=1e-12;function hw(t,n){return n[1]-t[1]||n[0]-t[0]}function dw(t,n){var e,r,i,o=t.sort(hw).pop();for(fw=[],aw=new Array(t.length),uw=new Lx,cw=new Lx;;)if(i=Vx,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===e&&o[1]===r||(rw(o),e=o[0],r=o[1]),o=t.pop();else{if(!i)break;ew(i.arc)}if(function(){for(var t,n,e,r,i=0,o=aw.length;i<o;++i)if((t=aw[i])&&(r=(n=t.halfedges).length)){var u=new Array(r),a=new Array(r);for(e=0;e<r;++e)u[e]=e,a[e]=Hx(t,fw[n[e]]);for(u.sort(function(t,n){return a[n]-a[t]}),e=0;e<r;++e)a[e]=n[u[e]];for(e=0;e<r;++e)n[e]=a[e]}}(),n){var u=+n[0][0],a=+n[0][1],c=+n[1][0],f=+n[1][1];!function(t,n,e,r){for(var i,o=fw.length;o--;)Fx(i=fw[o],t,n,e,r)&&Ux(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>sw||Math.abs(i[0][1]-i[1][1])>sw)||delete fw[o]}(u,a,c,f),function(t,n,e,r){var i,o,u,a,c,f,s,l,h,d,p,v,g=aw.length,y=!0;for(i=0;i<g;++i)if(o=aw[i]){for(u=o.site,a=(c=o.halfedges).length;a--;)fw[c[a]]||c.splice(a,1);for(a=0,f=c.length;a<f;)p=(d=Yx(o,fw[c[a]]))[0],v=d[1],l=(s=Wx(o,fw[c[++a%f]]))[0],h=s[1],(Math.abs(p-l)>sw||Math.abs(v-h)>sw)&&(c.splice(a,0,fw.push(qx(u,d,Math.abs(p-t)<sw&&r-v>sw?[t,Math.abs(l-t)<sw?h:r]:Math.abs(v-r)<sw&&e-p>sw?[Math.abs(h-r)<sw?l:e,r]:Math.abs(p-e)<sw&&v-n>sw?[e,Math.abs(l-e)<sw?h:n]:Math.abs(v-n)<sw&&p-t>sw?[Math.abs(h-n)<sw?l:t,n]:null))-1),++f);f&&(y=!1)}if(y){var m,b,_,x=1/0;for(i=0,y=null;i<g;++i)(o=aw[i])&&(_=(m=(u=o.site)[0]-t)*m+(b=u[1]-n)*b)<x&&(x=_,y=o);if(y){var w=[t,n],M=[t,r],T=[e,r],C=[e,n];y.halfedges.push(fw.push(qx(u=y.site,w,M))-1,fw.push(qx(u,M,T))-1,fw.push(qx(u,T,C))-1,fw.push(qx(u,C,w))-1)}}for(i=0;i<g;++i)(o=aw[i])&&(o.halfedges.length||delete aw[i])}(u,a,c,f)}this.edges=fw,this.cells=aw,uw=cw=fw=aw=null}dw.prototype={constructor:dw,polygons:function(){var t=this.edges;return this.cells.map(function(n){var e=n.halfedges.map(function(e){return Wx(n,t[e])});return e.data=n.site.data,e})},triangles:function(){var t=[],n=this.edges;return this.cells.forEach(function(e,r){if(o=(i=e.halfedges).length)for(var i,o,u,a,c,f,s=e.site,l=-1,h=n[i[o-1]],d=h.left===s?h.right:h.left;++l<o;)u=d,d=(h=n[i[l]]).left===s?h.right:h.left,u&&d&&r<u.index&&r<d.index&&(c=u,f=d,((a=s)[0]-f[0])*(c[1]-a[1])-(a[0]-c[0])*(f[1]-a[1])<0)&&t.push([s.data,u.data,d.data])}),t},links:function(){return this.edges.filter(function(t){return t.right}).map(function(t){return{source:t.left.data,target:t.right.data}})},find:function(t,n,e){for(var r,i,o=this,u=o._found||0,a=o.cells.length;!(i=o.cells[u]);)if(++u>=a)return null;var c=t-i.site[0],f=n-i.site[1],s=c*c+f*f;do{i=o.cells[r=u],u=null,i.halfedges.forEach(function(e){var r=o.edges[e],a=r.left;if(a!==i.site&&a||(a=r.right)){var c=t-a[0],f=n-a[1],l=c*c+f*f;l<s&&(s=l,u=a.index)}})}while(null!==u);return o._found=r,null==e||s<=e*e?i.site:null}};var pw=function(){var t=Dx,n=Ox,e=null;function r(r){return new dw(r.map(function(e,i){var o=[Math.round(t(e,i,r)/sw)*sw,Math.round(n(e,i,r)/sw)*sw];return o.index=i,o.data=e,o}),e)}return r.polygons=function(t){return r(t).polygons()},r.links=function(t){return r(t).links()},r.triangles=function(t){return r(t).triangles()},r.x=function(n){return arguments.length?(t="function"==typeof n?n:Nx(+n),r):t},r.y=function(t){return arguments.length?(n="function"==typeof t?t:Nx(+t),r):n},r.extent=function(t){return arguments.length?(e=null==t?null:[[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]],r):e&&[[e[0][0],e[0][1]],[e[1][0],e[1][1]]]},r.size=function(t){return arguments.length?(e=null==t?null:[[0,0],[+t[0],+t[1]]],r):e&&[e[1][0]-e[0][0],e[1][1]-e[0][1]]},r},vw=function(t){return function(){return t}};function gw(t,n,e){this.target=t,this.type=n,this.transform=e}function yw(t,n,e){this.k=t,this.x=n,this.y=e}yw.prototype={constructor:yw,scale:function(t){return 1===t?this:new yw(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new yw(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var mw=new yw(1,0,0);function bw(t){return t.__zoom||mw}function _w(){Vt.stopImmediatePropagation()}bw.prototype=yw.prototype;var xw=function(){Vt.preventDefault(),Vt.stopImmediatePropagation()};function ww(){return!Vt.button}function Mw(){var t,n,e=this;return e instanceof SVGElement?(t=(e=e.ownerSVGElement||e).width.baseVal.value,n=e.height.baseVal.value):(t=e.clientWidth,n=e.clientHeight),[[0,0],[t,n]]}function Tw(){return this.__zoom||mw}function Cw(){return-Vt.deltaY*(Vt.deltaMode?120:1)/500}function Sw(){return"ontouchstart"in this}function Aw(t,n,e){var r=t.invertX(n[0][0])-e[0][0],i=t.invertX(n[1][0])-e[1][0],o=t.invertY(n[0][1])-e[0][1],u=t.invertY(n[1][1])-e[1][1];return t.translate(i>r?(r+i)/2:Math.min(0,r)||Math.max(0,i),u>o?(o+u)/2:Math.min(0,o)||Math.max(0,u))}var kw=function(){var t,n,e=ww,r=Mw,i=Aw,o=Cw,u=Sw,a=[0,1/0],c=[[-1/0,-1/0],[1/0,1/0]],f=250,s=fr,l=[],h=ht("start","zoom","end"),d=500,p=150,v=0;function g(t){t.property("__zoom",Tw).on("wheel.zoom",M).on("mousedown.zoom",T).on("dblclick.zoom",C).filter(u).on("touchstart.zoom",S).on("touchmove.zoom",A).on("touchend.zoom touchcancel.zoom",k).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function y(t,n){return(n=Math.max(a[0],Math.min(a[1],n)))===t.k?t:new yw(n,t.x,t.y)}function m(t,n,e){var r=n[0]-e[0]*t.k,i=n[1]-e[1]*t.k;return r===t.x&&i===t.y?t:new yw(t.k,r,i)}function b(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function _(t,n,e){t.on("start.zoom",function(){x(this,arguments).start()}).on("interrupt.zoom end.zoom",function(){x(this,arguments).end()}).tween("zoom",function(){var t=arguments,i=x(this,t),o=r.apply(this,t),u=e||b(o),a=Math.max(o[1][0]-o[0][0],o[1][1]-o[0][1]),c=this.__zoom,f="function"==typeof n?n.apply(this,t):n,l=s(c.invert(u).concat(a/c.k),f.invert(u).concat(a/f.k));return function(t){if(1===t)t=f;else{var n=l(t),e=a/n[2];t=new yw(e,u[0]-n[0]*e,u[1]-n[1]*e)}i.zoom(null,t)}})}function x(t,n){for(var e,r=0,i=l.length;r<i;++r)if((e=l[r]).that===t)return e;return new w(t,n)}function w(t,n){this.that=t,this.args=n,this.index=-1,this.active=0,this.extent=r.apply(t,n)}function M(){if(e.apply(this,arguments)){var t=x(this,arguments),n=this.__zoom,r=Math.max(a[0],Math.min(a[1],n.k*Math.pow(2,o.apply(this,arguments)))),u=hn(this);if(t.wheel)t.mouse[0][0]===u[0]&&t.mouse[0][1]===u[1]||(t.mouse[1]=n.invert(t.mouse[0]=u)),clearTimeout(t.wheel);else{if(n.k===r)return;t.mouse=[u,n.invert(u)],ei(this),t.start()}xw(),t.wheel=setTimeout(function(){t.wheel=null,t.end()},p),t.zoom("mouse",i(m(y(n,r),t.mouse[0],t.mouse[1]),t.extent,c))}}function T(){if(!n&&e.apply(this,arguments)){var t=x(this,arguments),r=on(Vt.view).on("mousemove.zoom",function(){if(xw(),!t.moved){var n=Vt.clientX-u,e=Vt.clientY-a;t.moved=n*n+e*e>v}t.zoom("mouse",i(m(t.that.__zoom,t.mouse[0]=hn(t.that),t.mouse[1]),t.extent,c))},!0).on("mouseup.zoom",function(){r.on("mousemove.zoom mouseup.zoom",null),bn(Vt.view,t.moved),xw(),t.end()},!0),o=hn(this),u=Vt.clientX,a=Vt.clientY;mn(Vt.view),_w(),t.mouse=[o,this.__zoom.invert(o)],ei(this),t.start()}}function C(){if(e.apply(this,arguments)){var t=this.__zoom,n=hn(this),o=t.invert(n),u=t.k*(Vt.shiftKey?.5:2),a=i(m(y(t,u),n,o),r.apply(this,arguments),c);xw(),f>0?on(this).transition().duration(f).call(_,a,n):on(this).call(g.transform,a)}}function S(){if(e.apply(this,arguments)){var n,r,i,o,u=x(this,arguments),a=Vt.changedTouches,c=a.length;for(_w(),r=0;r<c;++r)i=a[r],o=[o=pn(this,a,i.identifier),this.__zoom.invert(o),i.identifier],u.touch0?u.touch1||(u.touch1=o):(u.touch0=o,n=!0);if(t&&(t=clearTimeout(t),!u.touch1))return u.end(),void((o=on(this).on("dblclick.zoom"))&&o.apply(this,arguments));n&&(t=setTimeout(function(){t=null},d),ei(this),u.start())}}function A(){var n,e,r,o,u=x(this,arguments),a=Vt.changedTouches,f=a.length;for(xw(),t&&(t=clearTimeout(t)),n=0;n<f;++n)e=a[n],r=pn(this,a,e.identifier),u.touch0&&u.touch0[2]===e.identifier?u.touch0[0]=r:u.touch1&&u.touch1[2]===e.identifier&&(u.touch1[0]=r);if(e=u.that.__zoom,u.touch1){var s=u.touch0[0],l=u.touch0[1],h=u.touch1[0],d=u.touch1[1],p=(p=h[0]-s[0])*p+(p=h[1]-s[1])*p,v=(v=d[0]-l[0])*v+(v=d[1]-l[1])*v;e=y(e,Math.sqrt(p/v)),r=[(s[0]+h[0])/2,(s[1]+h[1])/2],o=[(l[0]+d[0])/2,(l[1]+d[1])/2]}else{if(!u.touch0)return;r=u.touch0[0],o=u.touch0[1]}u.zoom("touch",i(m(e,r,o),u.extent,c))}function k(){var t,e,r=x(this,arguments),i=Vt.changedTouches,o=i.length;for(_w(),n&&clearTimeout(n),n=setTimeout(function(){n=null},d),t=0;t<o;++t)e=i[t],r.touch0&&r.touch0[2]===e.identifier?delete r.touch0:r.touch1&&r.touch1[2]===e.identifier&&delete r.touch1;r.touch1&&!r.touch0&&(r.touch0=r.touch1,delete r.touch1),r.touch0?r.touch0[1]=this.__zoom.invert(r.touch0[0]):r.end()}return g.transform=function(t,n){var e=t.selection?t.selection():t;e.property("__zoom",Tw),t!==e?_(t,n):e.interrupt().each(function(){x(this,arguments).start().zoom(null,"function"==typeof n?n.apply(this,arguments):n).end()})},g.scaleBy=function(t,n){g.scaleTo(t,function(){return this.__zoom.k*("function"==typeof n?n.apply(this,arguments):n)})},g.scaleTo=function(t,n){g.transform(t,function(){var t=r.apply(this,arguments),e=this.__zoom,o=b(t),u=e.invert(o),a="function"==typeof n?n.apply(this,arguments):n;return i(m(y(e,a),o,u),t,c)})},g.translateBy=function(t,n,e){g.transform(t,function(){return i(this.__zoom.translate("function"==typeof n?n.apply(this,arguments):n,"function"==typeof e?e.apply(this,arguments):e),r.apply(this,arguments),c)})},g.translateTo=function(t,n,e){g.transform(t,function(){var t=r.apply(this,arguments),o=this.__zoom,u=b(t);return i(mw.translate(u[0],u[1]).scale(o.k).translate("function"==typeof n?-n.apply(this,arguments):-n,"function"==typeof e?-e.apply(this,arguments):-e),t,c)})},w.prototype={start:function(){return 1==++this.active&&(this.index=l.push(this)-1,this.emit("start")),this},zoom:function(t,n){return this.mouse&&"mouse"!==t&&(this.mouse[1]=n.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=n.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=n.invert(this.touch1[0])),this.that.__zoom=n,this.emit("zoom"),this},end:function(){return 0==--this.active&&(l.splice(this.index,1),this.index=-1,this.emit("end")),this},emit:function(t){Jt(new gw(g,t,this.that.__zoom),h.apply,h,[t,this.that,this.args])}},g.wheelDelta=function(t){return arguments.length?(o="function"==typeof t?t:vw(+t),g):o},g.filter=function(t){return arguments.length?(e="function"==typeof t?t:vw(!!t),g):e},g.touchable=function(t){return arguments.length?(u="function"==typeof t?t:vw(!!t),g):u},g.extent=function(t){return arguments.length?(r="function"==typeof t?t:vw([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),g):r},g.scaleExtent=function(t){return arguments.length?(a[0]=+t[0],a[1]=+t[1],g):[a[0],a[1]]},g.translateExtent=function(t){return arguments.length?(c[0][0]=+t[0][0],c[1][0]=+t[1][0],c[0][1]=+t[0][1],c[1][1]=+t[1][1],g):[[c[0][0],c[0][1]],[c[1][0],c[1][1]]]},g.constrain=function(t){return arguments.length?(i=t,g):i},g.duration=function(t){return arguments.length?(f=+t,g):f},g.interpolate=function(t){return arguments.length?(s=t,g):s},g.on=function(){var t=h.on.apply(h,arguments);return t===h?g:t},g.clickDistance=function(t){return arguments.length?(v=(t=+t)*t,g):Math.sqrt(v)},g};e.d(n,"version",function(){return"5.7.0"}),e.d(n,"bisect",function(){return c}),e.d(n,"bisectRight",function(){return u}),e.d(n,"bisectLeft",function(){return a}),e.d(n,"ascending",function(){return r}),e.d(n,"bisector",function(){return i}),e.d(n,"cross",function(){return l}),e.d(n,"descending",function(){return h}),e.d(n,"deviation",function(){return v}),e.d(n,"extent",function(){return g}),e.d(n,"histogram",function(){return N}),e.d(n,"thresholdFreedmanDiaconis",function(){return O}),e.d(n,"thresholdScott",function(){return R}),e.d(n,"thresholdSturges",function(){return E}),e.d(n,"max",function(){return j}),e.d(n,"mean",function(){return P}),e.d(n,"median",function(){return $}),e.d(n,"merge",function(){return I}),e.d(n,"min",function(){return L}),e.d(n,"pairs",function(){return f}),e.d(n,"permute",function(){return z}),e.d(n,"quantile",function(){return D}),e.d(n,"range",function(){return w}),e.d(n,"scan",function(){return q}),e.d(n,"shuffle",function(){return B}),e.d(n,"sum",function(){return U}),e.d(n,"ticks",function(){return S}),e.d(n,"tickIncrement",function(){return A}),e.d(n,"tickStep",function(){return k}),e.d(n,"transpose",function(){return F}),e.d(n,"variance",function(){return p}),e.d(n,"zip",function(){return W}),e.d(n,"axisTop",function(){return rt}),e.d(n,"axisRight",function(){return it}),e.d(n,"axisBottom",function(){return ot}),e.d(n,"axisLeft",function(){return ut}),e.d(n,"brush",function(){return Ao}),e.d(n,"brushX",function(){return Co}),e.d(n,"brushY",function(){return So}),e.d(n,"brushSelection",function(){return To}),e.d(n,"chord",function(){return Po}),e.d(n,"ribbon",function(){return Go}),e.d(n,"nest",function(){return Ko}),e.d(n,"set",function(){return au}),e.d(n,"map",function(){return Jo}),e.d(n,"keys",function(){return cu}),e.d(n,"values",function(){return fu}),e.d(n,"entries",function(){return su}),e.d(n,"color",function(){return Un}),e.d(n,"rgb",function(){return Yn}),e.d(n,"hsl",function(){return Zn}),e.d(n,"lab",function(){return se}),e.d(n,"hcl",function(){return me}),e.d(n,"lch",function(){return ye}),e.d(n,"gray",function(){return fe}),e.d(n,"cubehelix",function(){return Se}),e.d(n,"contours",function(){return _u}),e.d(n,"contourDensity",function(){return Su}),e.d(n,"dispatch",function(){return ht}),e.d(n,"drag",function(){return Sn}),e.d(n,"dragDisable",function(){return mn}),e.d(n,"dragEnable",function(){return bn}),e.d(n,"dsvFormat",function(){return Ru}),e.d(n,"csvParse",function(){return Pu}),e.d(n,"csvParseRows",function(){return $u}),e.d(n,"csvFormat",function(){return Iu}),e.d(n,"csvFormatRows",function(){return Lu}),e.d(n,"tsvParse",function(){return qu}),e.d(n,"tsvParseRows",function(){return Bu}),e.d(n,"tsvFormat",function(){return Uu}),e.d(n,"tsvFormatRows",function(){return Fu}),e.d(n,"easeLinear",function(){return li}),e.d(n,"easeQuad",function(){return pi}),e.d(n,"easeQuadIn",function(){return hi}),e.d(n,"easeQuadOut",function(){return di}),e.d(n,"easeQuadInOut",function(){return pi}),e.d(n,"easeCubic",function(){return yi}),e.d(n,"easeCubicIn",function(){return vi}),e.d(n,"easeCubicOut",function(){return gi}),e.d(n,"easeCubicInOut",function(){return yi}),e.d(n,"easePoly",function(){return _i}),e.d(n,"easePolyIn",function(){return mi}),e.d(n,"easePolyOut",function(){return bi}),e.d(n,"easePolyInOut",function(){return _i}),e.d(n,"easeSin",function(){return Ci}),e.d(n,"easeSinIn",function(){return Mi}),e.d(n,"easeSinOut",function(){return Ti}),e.d(n,"easeSinInOut",function(){return Ci}),e.d(n,"easeExp",function(){return ki}),e.d(n,"easeExpIn",function(){return Si}),e.d(n,"easeExpOut",function(){return Ai}),e.d(n,"easeExpInOut",function(){return ki}),e.d(n,"easeCircle",function(){return Di}),e.d(n,"easeCircleIn",function(){return Ei}),e.d(n,"easeCircleOut",function(){return Ni}),e.d(n,"easeCircleInOut",function(){return Di}),e.d(n,"easeBounce",function(){return Fi}),e.d(n,"easeBounceIn",function(){return Ui}),e.d(n,"easeBounceOut",function(){return Fi}),e.d(n,"easeBounceInOut",function(){return Hi}),e.d(n,"easeBack",function(){return Vi}),e.d(n,"easeBackIn",function(){return Wi}),e.d(n,"easeBackOut",function(){return Yi}),e.d(n,"easeBackInOut",function(){return Vi}),e.d(n,"easeElastic",function(){return Zi}),e.d(n,"easeElasticIn",function(){return Gi}),e.d(n,"easeElasticOut",function(){return Zi}),e.d(n,"easeElasticInOut",function(){return Qi}),e.d(n,"blob",function(){return Wu}),e.d(n,"buffer",function(){return Vu}),e.d(n,"dsv",function(){return Qu}),e.d(n,"csv",function(){return Ju}),e.d(n,"tsv",function(){return Ku}),e.d(n,"image",function(){return ta}),e.d(n,"json",function(){return ea}),e.d(n,"text",function(){return Gu}),e.d(n,"xml",function(){return ia}),e.d(n,"html",function(){return oa}),e.d(n,"svg",function(){return ua}),e.d(n,"forceCenter",function(){return aa}),e.d(n,"forceCollide",function(){return _a}),e.d(n,"forceLink",function(){return Ma}),e.d(n,"forceManyBody",function(){return Ea}),e.d(n,"forceRadial",function(){return Na}),e.d(n,"forceSimulation",function(){return ka}),e.d(n,"forceX",function(){return Da}),e.d(n,"forceY",function(){return Oa}),e.d(n,"formatDefaultLocale",function(){return Xa}),e.d(n,"format",function(){return qa}),e.d(n,"formatPrefix",function(){return Ba}),e.d(n,"formatLocale",function(){return Va}),e.d(n,"formatSpecifier",function(){return $a}),e.d(n,"precisionFixed",function(){return Ga}),e.d(n,"precisionPrefix",function(){return Za}),e.d(n,"precisionRound",function(){return Qa}),e.d(n,"geoArea",function(){return Fc}),e.d(n,"geoBounds",function(){return $f}),e.d(n,"geoCentroid",function(){return Xf}),e.d(n,"geoCircle",function(){return os}),e.d(n,"geoClipAntimeridian",function(){return gs}),e.d(n,"geoClipCircle",function(){return ys}),e.d(n,"geoClipExtent",function(){return Cs}),e.d(n,"geoClipRectangle",function(){return xs}),e.d(n,"geoContains",function(){return Fs}),e.d(n,"geoDistance",function(){return js}),e.d(n,"geoGraticule",function(){return Ys}),e.d(n,"geoGraticule10",function(){return Vs}),e.d(n,"geoInterpolate",function(){return Js}),e.d(n,"geoLength",function(){return Ds}),e.d(n,"geoPath",function(){return Zl}),e.d(n,"geoAlbers",function(){return vh}),e.d(n,"geoAlbersUsa",function(){return gh}),e.d(n,"geoAzimuthalEqualArea",function(){return _h}),e.d(n,"geoAzimuthalEqualAreaRaw",function(){return bh}),e.d(n,"geoAzimuthalEquidistant",function(){return wh}),e.d(n,"geoAzimuthalEquidistantRaw",function(){return xh}),e.d(n,"geoConicConformal",function(){return kh}),e.d(n,"geoConicConformalRaw",function(){return Ah}),e.d(n,"geoConicEqualArea",function(){return ph}),e.d(n,"geoConicEqualAreaRaw",function(){return dh}),e.d(n,"geoConicEquidistant",function(){return Oh}),e.d(n,"geoConicEquidistantRaw",function(){return Dh}),e.d(n,"geoEqualEarth",function(){return zh}),e.d(n,"geoEqualEarthRaw",function(){return Lh}),e.d(n,"geoEquirectangular",function(){return Nh}),e.d(n,"geoEquirectangularRaw",function(){return Eh}),e.d(n,"geoGnomonic",function(){return Bh}),e.d(n,"geoGnomonicRaw",function(){return qh}),e.d(n,"geoIdentity",function(){return Fh}),e.d(n,"geoProjection",function(){return sh}),e.d(n,"geoProjectionMutator",function(){return lh}),e.d(n,"geoMercator",function(){return Th}),e.d(n,"geoMercatorRaw",function(){return Mh}),e.d(n,"geoNaturalEarth1",function(){return Wh}),e.d(n,"geoNaturalEarth1Raw",function(){return Hh}),e.d(n,"geoOrthographic",function(){return Vh}),e.d(n,"geoOrthographicRaw",function(){return Yh}),e.d(n,"geoStereographic",function(){return Gh}),e.d(n,"geoStereographicRaw",function(){return Xh}),e.d(n,"geoTransverseMercator",function(){return Qh}),e.d(n,"geoTransverseMercatorRaw",function(){return Zh}),e.d(n,"geoRotation",function(){return es}),e.d(n,"geoStream",function(){return Pc}),e.d(n,"geoTransform",function(){return Ql}),e.d(n,"cluster",function(){return nd}),e.d(n,"hierarchy",function(){return rd}),e.d(n,"pack",function(){return Ad}),e.d(n,"packSiblings",function(){return wd}),e.d(n,"packEnclose",function(){return fd}),e.d(n,"partition",function(){return Rd}),e.d(n,"stratify",function(){return zd}),e.d(n,"tree",function(){return Yd}),e.d(n,"treemap",function(){return Qd}),e.d(n,"treemapBinary",function(){return Jd}),e.d(n,"treemapDice",function(){return Od}),e.d(n,"treemapSlice",function(){return Vd}),e.d(n,"treemapSliceDice",function(){return Kd}),e.d(n,"treemapSquarify",function(){return Zd}),e.d(n,"treemapResquarify",function(){return tp}),e.d(n,"interpolate",function(){return Qe}),e.d(n,"interpolateArray",function(){return qe}),e.d(n,"interpolateBasis",function(){return Ee}),e.d(n,"interpolateBasisClosed",function(){return Ne}),e.d(n,"interpolateDate",function(){return Be}),e.d(n,"interpolateDiscrete",function(){return Je}),e.d(n,"interpolateHue",function(){return Ke}),e.d(n,"interpolateNumber",function(){return Ue}),e.d(n,"interpolateObject",function(){return Fe}),e.d(n,"interpolateRound",function(){return tr}),e.d(n,"interpolateString",function(){return Ze}),e.d(n,"interpolateTransformCss",function(){return or}),e.d(n,"interpolateTransformSvg",function(){return ur}),e.d(n,"interpolateZoom",function(){return fr}),e.d(n,"interpolateRgb",function(){return $e}),e.d(n,"interpolateRgbBasis",function(){return Le}),e.d(n,"interpolateRgbBasisClosed",function(){return ze}),e.d(n,"interpolateHsl",function(){return lr}),e.d(n,"interpolateHslLong",function(){return hr}),e.d(n,"interpolateLab",function(){return dr}),e.d(n,"interpolateHcl",function(){return vr}),e.d(n,"interpolateHclLong",function(){return gr}),e.d(n,"interpolateCubehelix",function(){return mr}),e.d(n,"interpolateCubehelixLong",function(){return br}),e.d(n,"piecewise",function(){return _r}),e.d(n,"quantize",function(){return Mr}),e.d(n,"path",function(){return Fo}),e.d(n,"polygonArea",function(){return np}),e.d(n,"polygonCentroid",function(){return ep}),e.d(n,"polygonHull",function(){return up}),e.d(n,"polygonContains",function(){return ap}),e.d(n,"polygonLength",function(){return cp}),e.d(n,"quadtree",function(){return pa}),e.d(n,"randomUniform",function(){return sp}),e.d(n,"randomNormal",function(){return lp}),e.d(n,"randomLogNormal",function(){return hp}),e.d(n,"randomBates",function(){return pp}),e.d(n,"randomIrwinHall",function(){return dp}),e.d(n,"randomExponential",function(){return vp}),e.d(n,"scaleBand",function(){return xp}),e.d(n,"scalePoint",function(){return wp}),e.d(n,"scaleIdentity",function(){return jp}),e.d(n,"scaleLinear",function(){return Rp}),e.d(n,"scaleLog",function(){return Up}),e.d(n,"scaleOrdinal",function(){return _p}),e.d(n,"scaleImplicit",function(){return bp}),e.d(n,"scalePow",function(){return Hp}),e.d(n,"scaleSqrt",function(){return Wp}),e.d(n,"scaleQuantile",function(){return Yp}),e.d(n,"scaleQuantize",function(){return Vp}),e.d(n,"scaleThreshold",function(){return Xp}),e.d(n,"scaleTime",function(){return Hy}),e.d(n,"scaleUtc",function(){return Wy}),e.d(n,"scaleSequential",function(){return Yy}),e.d(n,"scaleDiverging",function(){return Vy}),e.d(n,"schemeCategory10",function(){return Gy}),e.d(n,"schemeAccent",function(){return Zy}),e.d(n,"schemeDark2",function(){return Qy}),e.d(n,"schemePaired",function(){return Jy}),e.d(n,"schemePastel1",function(){return Ky}),e.d(n,"schemePastel2",function(){return tm}),e.d(n,"schemeSet1",function(){return nm}),e.d(n,"schemeSet2",function(){return em}),e.d(n,"schemeSet3",function(){return rm}),e.d(n,"interpolateBrBG",function(){return um}),e.d(n,"schemeBrBG",function(){return om}),e.d(n,"interpolatePRGn",function(){return cm}),e.d(n,"schemePRGn",function(){return am}),e.d(n,"interpolatePiYG",function(){return sm}),e.d(n,"schemePiYG",function(){return fm}),e.d(n,"interpolatePuOr",function(){return hm}),e.d(n,"schemePuOr",function(){return lm}),e.d(n,"interpolateRdBu",function(){return pm}),e.d(n,"schemeRdBu",function(){return dm}),e.d(n,"interpolateRdGy",function(){return gm}),e.d(n,"schemeRdGy",function(){return vm}),e.d(n,"interpolateRdYlBu",function(){return mm}),e.d(n,"schemeRdYlBu",function(){return ym}),e.d(n,"interpolateRdYlGn",function(){return _m}),e.d(n,"schemeRdYlGn",function(){return bm}),e.d(n,"interpolateSpectral",function(){return wm}),e.d(n,"schemeSpectral",function(){return xm}),e.d(n,"interpolateBuGn",function(){return Tm}),e.d(n,"schemeBuGn",function(){return Mm}),e.d(n,"interpolateBuPu",function(){return Sm}),e.d(n,"schemeBuPu",function(){return Cm}),e.d(n,"interpolateGnBu",function(){return km}),e.d(n,"schemeGnBu",function(){return Am}),e.d(n,"interpolateOrRd",function(){return Nm}),e.d(n,"schemeOrRd",function(){return Em}),e.d(n,"interpolatePuBuGn",function(){return Om}),e.d(n,"schemePuBuGn",function(){return Dm}),e.d(n,"interpolatePuBu",function(){return jm}),e.d(n,"schemePuBu",function(){return Rm}),e.d(n,"interpolatePuRd",function(){return $m}),e.d(n,"schemePuRd",function(){return Pm}),e.d(n,"interpolateRdPu",function(){return Lm}),e.d(n,"schemeRdPu",function(){return Im}),e.d(n,"interpolateYlGnBu",function(){return qm}),e.d(n,"schemeYlGnBu",function(){return zm}),e.d(n,"interpolateYlGn",function(){return Um}),e.d(n,"schemeYlGn",function(){return Bm}),e.d(n,"interpolateYlOrBr",function(){return Hm}),e.d(n,"schemeYlOrBr",function(){return Fm}),e.d(n,"interpolateYlOrRd",function(){return Ym}),e.d(n,"schemeYlOrRd",function(){return Wm}),e.d(n,"interpolateBlues",function(){return Xm}),e.d(n,"schemeBlues",function(){return Vm}),e.d(n,"interpolateGreens",function(){return Zm}),e.d(n,"schemeGreens",function(){return Gm}),e.d(n,"interpolateGreys",function(){return Jm}),e.d(n,"schemeGreys",function(){return Qm}),e.d(n,"interpolatePurples",function(){return tb}),e.d(n,"schemePurples",function(){return Km}),e.d(n,"interpolateReds",function(){return eb}),e.d(n,"schemeReds",function(){return nb}),e.d(n,"interpolateOranges",function(){return ib}),e.d(n,"schemeOranges",function(){return rb}),e.d(n,"interpolateCubehelixDefault",function(){return ob}),e.d(n,"interpolateRainbow",function(){return fb}),e.d(n,"interpolateWarm",function(){return ub}),e.d(n,"interpolateCool",function(){return ab}),e.d(n,"interpolateSinebow",function(){return db}),e.d(n,"interpolateViridis",function(){return vb}),e.d(n,"interpolateMagma",function(){return gb}),e.d(n,"interpolateInferno",function(){return yb}),e.d(n,"interpolatePlasma",function(){return mb}),e.d(n,"create",function(){return un}),e.d(n,"creator",function(){return gt}),e.d(n,"local",function(){return cn}),e.d(n,"matcher",function(){return Tt}),e.d(n,"mouse",function(){return hn}),e.d(n,"namespace",function(){return vt}),e.d(n,"namespaces",function(){return pt}),e.d(n,"clientPoint",function(){return ln}),e.d(n,"select",function(){return on}),e.d(n,"selectAll",function(){return dn}),e.d(n,"selection",function(){return rn}),e.d(n,"selector",function(){return mt}),e.d(n,"selectorAll",function(){return _t}),e.d(n,"style",function(){return Ot}),e.d(n,"touch",function(){return pn}),e.d(n,"touches",function(){return vn}),e.d(n,"window",function(){return Dt}),e.d(n,"event",function(){return Vt}),e.d(n,"customEvent",function(){return Jt}),e.d(n,"arc",function(){return Lb}),e.d(n,"area",function(){return Hb}),e.d(n,"line",function(){return Fb}),e.d(n,"pie",function(){return Vb}),e.d(n,"areaRadial",function(){return Kb}),e.d(n,"radialArea",function(){return Kb}),e.d(n,"lineRadial",function(){return Jb}),e.d(n,"radialLine",function(){return Jb}),e.d(n,"pointRadial",function(){return t_}),e.d(n,"linkHorizontal",function(){return c_}),e.d(n,"linkVertical",function(){return f_}),e.d(n,"linkRadial",function(){return s_}),e.d(n,"symbol",function(){return k_}),e.d(n,"symbols",function(){return A_}),e.d(n,"symbolCircle",function(){return l_}),e.d(n,"symbolCross",function(){return h_}),e.d(n,"symbolDiamond",function(){return v_}),e.d(n,"symbolSquare",function(){return __}),e.d(n,"symbolStar",function(){return b_}),e.d(n,"symbolTriangle",function(){return w_}),e.d(n,"symbolWye",function(){return S_}),e.d(n,"curveBasisClosed",function(){return j_}),e.d(n,"curveBasisOpen",function(){return $_}),e.d(n,"curveBasis",function(){return O_}),e.d(n,"curveBundle",function(){return L_}),e.d(n,"curveCardinalClosed",function(){return F_}),e.d(n,"curveCardinalOpen",function(){return W_}),e.d(n,"curveCardinal",function(){return B_}),e.d(n,"curveCatmullRomClosed",function(){return Z_}),e.d(n,"curveCatmullRomOpen",function(){return J_}),e.d(n,"curveCatmullRom",function(){return X_}),e.d(n,"curveLinearClosed",function(){return tx}),e.d(n,"curveLinear",function(){return qb}),e.d(n,"curveMonotoneX",function(){return cx}),e.d(n,"curveMonotoneY",function(){return fx}),e.d(n,"curveNatural",function(){return hx}),e.d(n,"curveStep",function(){return px}),e.d(n,"curveStepAfter",function(){return gx}),e.d(n,"curveStepBefore",function(){return vx}),e.d(n,"stack",function(){return _x}),e.d(n,"stackOffsetExpand",function(){return xx}),e.d(n,"stackOffsetDiverging",function(){return wx}),e.d(n,"stackOffsetNone",function(){return yx}),e.d(n,"stackOffsetSilhouette",function(){return Mx}),e.d(n,"stackOffsetWiggle",function(){return Tx}),e.d(n,"stackOrderAscending",function(){return Cx}),e.d(n,"stackOrderDescending",function(){return Ax}),e.d(n,"stackOrderInsideOut",function(){return kx}),e.d(n,"stackOrderNone",function(){return mx}),e.d(n,"stackOrderReverse",function(){return Ex}),e.d(n,"timeInterval",function(){return Qp}),e.d(n,"timeMillisecond",function(){return Kp}),e.d(n,"timeMilliseconds",function(){return tv}),e.d(n,"utcMillisecond",function(){return Kp}),e.d(n,"utcMilliseconds",function(){return tv}),e.d(n,"timeSecond",function(){return iv}),e.d(n,"timeSeconds",function(){return ov}),e.d(n,"utcSecond",function(){return iv}),e.d(n,"utcSeconds",function(){return ov}),e.d(n,"timeMinute",function(){return av}),e.d(n,"timeMinutes",function(){return cv}),e.d(n,"timeHour",function(){return sv}),e.d(n,"timeHours",function(){return lv}),e.d(n,"timeDay",function(){return dv}),e.d(n,"timeDays",function(){return pv}),e.d(n,"timeWeek",function(){return gv}),e.d(n,"timeWeeks",function(){return Mv}),e.d(n,"timeSunday",function(){return gv}),e.d(n,"timeSundays",function(){return Mv}),e.d(n,"timeMonday",function(){return yv}),e.d(n,"timeMondays",function(){return Tv}),e.d(n,"timeTuesday",function(){return mv}),e.d(n,"timeTuesdays",function(){return Cv}),e.d(n,"timeWednesday",function(){return bv}),e.d(n,"timeWednesdays",function(){return Sv}),e.d(n,"timeThursday",function(){return _v}),e.d(n,"timeThursdays",function(){return Av}),e.d(n,"timeFriday",function(){return xv}),e.d(n,"timeFridays",function(){return kv}),e.d(n,"timeSaturday",function(){return wv}),e.d(n,"timeSaturdays",function(){return Ev}),e.d(n,"timeMonth",function(){return Dv}),e.d(n,"timeMonths",function(){return Ov}),e.d(n,"timeYear",function(){return jv}),e.d(n,"timeYears",function(){return Pv}),e.d(n,"utcMinute",function(){return Iv}),e.d(n,"utcMinutes",function(){return Lv}),e.d(n,"utcHour",function(){return qv}),e.d(n,"utcHours",function(){return Bv}),e.d(n,"utcDay",function(){return Fv}),e.d(n,"utcDays",function(){return Hv}),e.d(n,"utcWeek",function(){return Yv}),e.d(n,"utcWeeks",function(){return Kv}),e.d(n,"utcSunday",function(){return Yv}),e.d(n,"utcSundays",function(){return Kv}),e.d(n,"utcMonday",function(){return Vv}),e.d(n,"utcMondays",function(){return tg}),e.d(n,"utcTuesday",function(){return Xv}),e.d(n,"utcTuesdays",function(){return ng}),e.d(n,"utcWednesday",function(){return Gv}),e.d(n,"utcWednesdays",function(){return eg}),e.d(n,"utcThursday",function(){return Zv}),e.d(n,"utcThursdays",function(){return rg}),e.d(n,"utcFriday",function(){return Qv}),e.d(n,"utcFridays",function(){return ig}),e.d(n,"utcSaturday",function(){return Jv}),e.d(n,"utcSaturdays",function(){return og}),e.d(n,"utcMonth",function(){return ag}),e.d(n,"utcMonths",function(){return cg}),e.d(n,"utcYear",function(){return sg}),e.d(n,"utcYears",function(){return lg}),e.d(n,"timeFormatDefaultLocale",function(){return Dy}),e.d(n,"timeFormat",function(){return yg}),e.d(n,"timeParse",function(){return mg}),e.d(n,"utcFormat",function(){return bg}),e.d(n,"utcParse",function(){return _g}),e.d(n,"timeFormatLocale",function(){return vg}),e.d(n,"isoFormat",function(){return Oy}),e.d(n,"isoParse",function(){return Ry}),e.d(n,"now",function(){return Rr}),e.d(n,"timer",function(){return $r}),e.d(n,"timerFlush",function(){return Ir}),e.d(n,"timeout",function(){return Br}),e.d(n,"interval",function(){return Ur}),e.d(n,"transition",function(){return ci}),e.d(n,"active",function(){return no}),e.d(n,"interrupt",function(){return ei}),e.d(n,"voronoi",function(){return pw}),e.d(n,"zoom",function(){return kw}),e.d(n,"zoomTransform",function(){return bw}),e.d(n,"zoomIdentity",function(){return mw})},function(t,n,e){var r;
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
!function(n,e){"use strict";"object"==typeof t.exports?t.exports=n.document?e(n,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(n)}("undefined"!=typeof window?window:this,function(e,i){"use strict";var o=[],u=e.document,a=Object.getPrototypeOf,c=o.slice,f=o.concat,s=o.push,l=o.indexOf,h={},d=h.toString,p=h.hasOwnProperty,v=p.toString,g=v.call(Object),y={},m=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},b=function(t){return null!=t&&t===t.window},_={type:!0,src:!0,noModule:!0};function x(t,n,e){var r,i=(n=n||u).createElement("script");if(i.text=t,e)for(r in _)e[r]&&(i[r]=e[r]);n.head.appendChild(i).parentNode.removeChild(i)}function w(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?h[d.call(t)]||"object":typeof t}var M=function(t,n){return new M.fn.init(t,n)},T=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function C(t){var n=!!t&&"length"in t&&t.length,e=w(t);return!m(t)&&!b(t)&&("array"===e||0===n||"number"==typeof n&&n>0&&n-1 in t)}M.fn=M.prototype={jquery:"3.3.1",constructor:M,length:0,toArray:function(){return c.call(this)},get:function(t){return null==t?c.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var n=M.merge(this.constructor(),t);return n.prevObject=this,n},each:function(t){return M.each(this,t)},map:function(t){return this.pushStack(M.map(this,function(n,e){return t.call(n,e,n)}))},slice:function(){return this.pushStack(c.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var n=this.length,e=+t+(t<0?n:0);return this.pushStack(e>=0&&e<n?[this[e]]:[])},end:function(){return this.prevObject||this.constructor()},push:s,sort:o.sort,splice:o.splice},M.extend=M.fn.extend=function(){var t,n,e,r,i,o,u=arguments[0]||{},a=1,c=arguments.length,f=!1;for("boolean"==typeof u&&(f=u,u=arguments[a]||{},a++),"object"==typeof u||m(u)||(u={}),a===c&&(u=this,a--);a<c;a++)if(null!=(t=arguments[a]))for(n in t)e=u[n],u!==(r=t[n])&&(f&&r&&(M.isPlainObject(r)||(i=Array.isArray(r)))?(i?(i=!1,o=e&&Array.isArray(e)?e:[]):o=e&&M.isPlainObject(e)?e:{},u[n]=M.extend(f,o,r)):void 0!==r&&(u[n]=r));return u},M.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var n,e;return!(!t||"[object Object]"!==d.call(t))&&(!(n=a(t))||"function"==typeof(e=p.call(n,"constructor")&&n.constructor)&&v.call(e)===g)},isEmptyObject:function(t){var n;for(n in t)return!1;return!0},globalEval:function(t){x(t)},each:function(t,n){var e,r=0;if(C(t))for(e=t.length;r<e&&!1!==n.call(t[r],r,t[r]);r++);else for(r in t)if(!1===n.call(t[r],r,t[r]))break;return t},trim:function(t){return null==t?"":(t+"").replace(T,"")},makeArray:function(t,n){var e=n||[];return null!=t&&(C(Object(t))?M.merge(e,"string"==typeof t?[t]:t):s.call(e,t)),e},inArray:function(t,n,e){return null==n?-1:l.call(n,t,e)},merge:function(t,n){for(var e=+n.length,r=0,i=t.length;r<e;r++)t[i++]=n[r];return t.length=i,t},grep:function(t,n,e){for(var r=[],i=0,o=t.length,u=!e;i<o;i++)!n(t[i],i)!==u&&r.push(t[i]);return r},map:function(t,n,e){var r,i,o=0,u=[];if(C(t))for(r=t.length;o<r;o++)null!=(i=n(t[o],o,e))&&u.push(i);else for(o in t)null!=(i=n(t[o],o,e))&&u.push(i);return f.apply([],u)},guid:1,support:y}),"function"==typeof Symbol&&(M.fn[Symbol.iterator]=o[Symbol.iterator]),M.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,n){h["[object "+n+"]"]=n.toLowerCase()});var S=
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
function(t){var n,e,r,i,o,u,a,c,f,s,l,h,d,p,v,g,y,m,b,_="sizzle"+1*new Date,x=t.document,w=0,M=0,T=ut(),C=ut(),S=ut(),A=function(t,n){return t===n&&(l=!0),0},k={}.hasOwnProperty,E=[],N=E.pop,D=E.push,O=E.push,R=E.slice,j=function(t,n){for(var e=0,r=t.length;e<r;e++)if(t[e]===n)return e;return-1},P="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",$="[\\x20\\t\\r\\n\\f]",I="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",L="\\["+$+"*("+I+")(?:"+$+"*([*^$|!~]?=)"+$+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+I+"))|)"+$+"*\\]",z=":("+I+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+L+")*)|.*)\\)|)",q=new RegExp($+"+","g"),B=new RegExp("^"+$+"+|((?:^|[^\\\\])(?:\\\\.)*)"+$+"+$","g"),U=new RegExp("^"+$+"*,"+$+"*"),F=new RegExp("^"+$+"*([>+~]|"+$+")"+$+"*"),H=new RegExp("="+$+"*([^\\]'\"]*?)"+$+"*\\]","g"),W=new RegExp(z),Y=new RegExp("^"+I+"$"),V={ID:new RegExp("^#("+I+")"),CLASS:new RegExp("^\\.("+I+")"),TAG:new RegExp("^("+I+"|[*])"),ATTR:new RegExp("^"+L),PSEUDO:new RegExp("^"+z),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+$+"*(even|odd|(([+-]|)(\\d*)n|)"+$+"*(?:([+-]|)"+$+"*(\\d+)|))"+$+"*\\)|)","i"),bool:new RegExp("^(?:"+P+")$","i"),needsContext:new RegExp("^"+$+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+$+"*((?:-\\d)?\\d*)"+$+"*\\)|)(?=[^-]|$)","i")},X=/^(?:input|select|textarea|button)$/i,G=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,Q=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,J=/[+~]/,K=new RegExp("\\\\([\\da-f]{1,6}"+$+"?|("+$+")|.)","ig"),tt=function(t,n,e){var r="0x"+n-65536;return r!=r||e?n:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},nt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,et=function(t,n){return n?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},rt=function(){h()},it=mt(function(t){return!0===t.disabled&&("form"in t||"label"in t)},{dir:"parentNode",next:"legend"});try{O.apply(E=R.call(x.childNodes),x.childNodes),E[x.childNodes.length].nodeType}catch(t){O={apply:E.length?function(t,n){D.apply(t,R.call(n))}:function(t,n){for(var e=t.length,r=0;t[e++]=n[r++];);t.length=e-1}}}function ot(t,n,r,i){var o,a,f,s,l,p,y,m=n&&n.ownerDocument,w=n?n.nodeType:9;if(r=r||[],"string"!=typeof t||!t||1!==w&&9!==w&&11!==w)return r;if(!i&&((n?n.ownerDocument||n:x)!==d&&h(n),n=n||d,v)){if(11!==w&&(l=Q.exec(t)))if(o=l[1]){if(9===w){if(!(f=n.getElementById(o)))return r;if(f.id===o)return r.push(f),r}else if(m&&(f=m.getElementById(o))&&b(n,f)&&f.id===o)return r.push(f),r}else{if(l[2])return O.apply(r,n.getElementsByTagName(t)),r;if((o=l[3])&&e.getElementsByClassName&&n.getElementsByClassName)return O.apply(r,n.getElementsByClassName(o)),r}if(e.qsa&&!S[t+" "]&&(!g||!g.test(t))){if(1!==w)m=n,y=t;else if("object"!==n.nodeName.toLowerCase()){for((s=n.getAttribute("id"))?s=s.replace(nt,et):n.setAttribute("id",s=_),a=(p=u(t)).length;a--;)p[a]="#"+s+" "+yt(p[a]);y=p.join(","),m=J.test(t)&&vt(n.parentNode)||n}if(y)try{return O.apply(r,m.querySelectorAll(y)),r}catch(t){}finally{s===_&&n.removeAttribute("id")}}}return c(t.replace(B,"$1"),n,r,i)}function ut(){var t=[];return function n(e,i){return t.push(e+" ")>r.cacheLength&&delete n[t.shift()],n[e+" "]=i}}function at(t){return t[_]=!0,t}function ct(t){var n=d.createElement("fieldset");try{return!!t(n)}catch(t){return!1}finally{n.parentNode&&n.parentNode.removeChild(n),n=null}}function ft(t,n){for(var e=t.split("|"),i=e.length;i--;)r.attrHandle[e[i]]=n}function st(t,n){var e=n&&t,r=e&&1===t.nodeType&&1===n.nodeType&&t.sourceIndex-n.sourceIndex;if(r)return r;if(e)for(;e=e.nextSibling;)if(e===n)return-1;return t?1:-1}function lt(t){return function(n){return"input"===n.nodeName.toLowerCase()&&n.type===t}}function ht(t){return function(n){var e=n.nodeName.toLowerCase();return("input"===e||"button"===e)&&n.type===t}}function dt(t){return function(n){return"form"in n?n.parentNode&&!1===n.disabled?"label"in n?"label"in n.parentNode?n.parentNode.disabled===t:n.disabled===t:n.isDisabled===t||n.isDisabled!==!t&&it(n)===t:n.disabled===t:"label"in n&&n.disabled===t}}function pt(t){return at(function(n){return n=+n,at(function(e,r){for(var i,o=t([],e.length,n),u=o.length;u--;)e[i=o[u]]&&(e[i]=!(r[i]=e[i]))})})}function vt(t){return t&&void 0!==t.getElementsByTagName&&t}for(n in e=ot.support={},o=ot.isXML=function(t){var n=t&&(t.ownerDocument||t).documentElement;return!!n&&"HTML"!==n.nodeName},h=ot.setDocument=function(t){var n,i,u=t?t.ownerDocument||t:x;return u!==d&&9===u.nodeType&&u.documentElement?(p=(d=u).documentElement,v=!o(d),x!==d&&(i=d.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",rt,!1):i.attachEvent&&i.attachEvent("onunload",rt)),e.attributes=ct(function(t){return t.className="i",!t.getAttribute("className")}),e.getElementsByTagName=ct(function(t){return t.appendChild(d.createComment("")),!t.getElementsByTagName("*").length}),e.getElementsByClassName=Z.test(d.getElementsByClassName),e.getById=ct(function(t){return p.appendChild(t).id=_,!d.getElementsByName||!d.getElementsByName(_).length}),e.getById?(r.filter.ID=function(t){var n=t.replace(K,tt);return function(t){return t.getAttribute("id")===n}},r.find.ID=function(t,n){if(void 0!==n.getElementById&&v){var e=n.getElementById(t);return e?[e]:[]}}):(r.filter.ID=function(t){var n=t.replace(K,tt);return function(t){var e=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return e&&e.value===n}},r.find.ID=function(t,n){if(void 0!==n.getElementById&&v){var e,r,i,o=n.getElementById(t);if(o){if((e=o.getAttributeNode("id"))&&e.value===t)return[o];for(i=n.getElementsByName(t),r=0;o=i[r++];)if((e=o.getAttributeNode("id"))&&e.value===t)return[o]}return[]}}),r.find.TAG=e.getElementsByTagName?function(t,n){return void 0!==n.getElementsByTagName?n.getElementsByTagName(t):e.qsa?n.querySelectorAll(t):void 0}:function(t,n){var e,r=[],i=0,o=n.getElementsByTagName(t);if("*"===t){for(;e=o[i++];)1===e.nodeType&&r.push(e);return r}return o},r.find.CLASS=e.getElementsByClassName&&function(t,n){if(void 0!==n.getElementsByClassName&&v)return n.getElementsByClassName(t)},y=[],g=[],(e.qsa=Z.test(d.querySelectorAll))&&(ct(function(t){p.appendChild(t).innerHTML="<a id='"+_+"'></a><select id='"+_+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+$+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||g.push("\\["+$+"*(?:value|"+P+")"),t.querySelectorAll("[id~="+_+"-]").length||g.push("~="),t.querySelectorAll(":checked").length||g.push(":checked"),t.querySelectorAll("a#"+_+"+*").length||g.push(".#.+[+~]")}),ct(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var n=d.createElement("input");n.setAttribute("type","hidden"),t.appendChild(n).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&g.push("name"+$+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),p.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),g.push(",.*:")})),(e.matchesSelector=Z.test(m=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.oMatchesSelector||p.msMatchesSelector))&&ct(function(t){e.disconnectedMatch=m.call(t,"*"),m.call(t,"[s!='']:x"),y.push("!=",z)}),g=g.length&&new RegExp(g.join("|")),y=y.length&&new RegExp(y.join("|")),n=Z.test(p.compareDocumentPosition),b=n||Z.test(p.contains)?function(t,n){var e=9===t.nodeType?t.documentElement:t,r=n&&n.parentNode;return t===r||!(!r||1!==r.nodeType||!(e.contains?e.contains(r):t.compareDocumentPosition&&16&t.compareDocumentPosition(r)))}:function(t,n){if(n)for(;n=n.parentNode;)if(n===t)return!0;return!1},A=n?function(t,n){if(t===n)return l=!0,0;var r=!t.compareDocumentPosition-!n.compareDocumentPosition;return r||(1&(r=(t.ownerDocument||t)===(n.ownerDocument||n)?t.compareDocumentPosition(n):1)||!e.sortDetached&&n.compareDocumentPosition(t)===r?t===d||t.ownerDocument===x&&b(x,t)?-1:n===d||n.ownerDocument===x&&b(x,n)?1:s?j(s,t)-j(s,n):0:4&r?-1:1)}:function(t,n){if(t===n)return l=!0,0;var e,r=0,i=t.parentNode,o=n.parentNode,u=[t],a=[n];if(!i||!o)return t===d?-1:n===d?1:i?-1:o?1:s?j(s,t)-j(s,n):0;if(i===o)return st(t,n);for(e=t;e=e.parentNode;)u.unshift(e);for(e=n;e=e.parentNode;)a.unshift(e);for(;u[r]===a[r];)r++;return r?st(u[r],a[r]):u[r]===x?-1:a[r]===x?1:0},d):d},ot.matches=function(t,n){return ot(t,null,null,n)},ot.matchesSelector=function(t,n){if((t.ownerDocument||t)!==d&&h(t),n=n.replace(H,"='$1']"),e.matchesSelector&&v&&!S[n+" "]&&(!y||!y.test(n))&&(!g||!g.test(n)))try{var r=m.call(t,n);if(r||e.disconnectedMatch||t.document&&11!==t.document.nodeType)return r}catch(t){}return ot(n,d,null,[t]).length>0},ot.contains=function(t,n){return(t.ownerDocument||t)!==d&&h(t),b(t,n)},ot.attr=function(t,n){(t.ownerDocument||t)!==d&&h(t);var i=r.attrHandle[n.toLowerCase()],o=i&&k.call(r.attrHandle,n.toLowerCase())?i(t,n,!v):void 0;return void 0!==o?o:e.attributes||!v?t.getAttribute(n):(o=t.getAttributeNode(n))&&o.specified?o.value:null},ot.escape=function(t){return(t+"").replace(nt,et)},ot.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},ot.uniqueSort=function(t){var n,r=[],i=0,o=0;if(l=!e.detectDuplicates,s=!e.sortStable&&t.slice(0),t.sort(A),l){for(;n=t[o++];)n===t[o]&&(i=r.push(o));for(;i--;)t.splice(r[i],1)}return s=null,t},i=ot.getText=function(t){var n,e="",r=0,o=t.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)e+=i(t)}else if(3===o||4===o)return t.nodeValue}else for(;n=t[r++];)e+=i(n);return e},(r=ot.selectors={cacheLength:50,createPseudo:at,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(K,tt),t[3]=(t[3]||t[4]||t[5]||"").replace(K,tt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||ot.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&ot.error(t[0]),t},PSEUDO:function(t){var n,e=!t[6]&&t[2];return V.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":e&&W.test(e)&&(n=u(e,!0))&&(n=e.indexOf(")",e.length-n)-e.length)&&(t[0]=t[0].slice(0,n),t[2]=e.slice(0,n)),t.slice(0,3))}},filter:{TAG:function(t){var n=t.replace(K,tt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===n}},CLASS:function(t){var n=T[t+" "];return n||(n=new RegExp("(^|"+$+")"+t+"("+$+"|$)"))&&T(t,function(t){return n.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,n,e){return function(r){var i=ot.attr(r,t);return null==i?"!="===n:!n||(i+="","="===n?i===e:"!="===n?i!==e:"^="===n?e&&0===i.indexOf(e):"*="===n?e&&i.indexOf(e)>-1:"$="===n?e&&i.slice(-e.length)===e:"~="===n?(" "+i.replace(q," ")+" ").indexOf(e)>-1:"|="===n&&(i===e||i.slice(0,e.length+1)===e+"-"))}},CHILD:function(t,n,e,r,i){var o="nth"!==t.slice(0,3),u="last"!==t.slice(-4),a="of-type"===n;return 1===r&&0===i?function(t){return!!t.parentNode}:function(n,e,c){var f,s,l,h,d,p,v=o!==u?"nextSibling":"previousSibling",g=n.parentNode,y=a&&n.nodeName.toLowerCase(),m=!c&&!a,b=!1;if(g){if(o){for(;v;){for(h=n;h=h[v];)if(a?h.nodeName.toLowerCase()===y:1===h.nodeType)return!1;p=v="only"===t&&!p&&"nextSibling"}return!0}if(p=[u?g.firstChild:g.lastChild],u&&m){for(b=(d=(f=(s=(l=(h=g)[_]||(h[_]={}))[h.uniqueID]||(l[h.uniqueID]={}))[t]||[])[0]===w&&f[1])&&f[2],h=d&&g.childNodes[d];h=++d&&h&&h[v]||(b=d=0)||p.pop();)if(1===h.nodeType&&++b&&h===n){s[t]=[w,d,b];break}}else if(m&&(b=d=(f=(s=(l=(h=n)[_]||(h[_]={}))[h.uniqueID]||(l[h.uniqueID]={}))[t]||[])[0]===w&&f[1]),!1===b)for(;(h=++d&&h&&h[v]||(b=d=0)||p.pop())&&((a?h.nodeName.toLowerCase()!==y:1!==h.nodeType)||!++b||(m&&((s=(l=h[_]||(h[_]={}))[h.uniqueID]||(l[h.uniqueID]={}))[t]=[w,b]),h!==n)););return(b-=i)===r||b%r==0&&b/r>=0}}},PSEUDO:function(t,n){var e,i=r.pseudos[t]||r.setFilters[t.toLowerCase()]||ot.error("unsupported pseudo: "+t);return i[_]?i(n):i.length>1?(e=[t,t,"",n],r.setFilters.hasOwnProperty(t.toLowerCase())?at(function(t,e){for(var r,o=i(t,n),u=o.length;u--;)t[r=j(t,o[u])]=!(e[r]=o[u])}):function(t){return i(t,0,e)}):i}},pseudos:{not:at(function(t){var n=[],e=[],r=a(t.replace(B,"$1"));return r[_]?at(function(t,n,e,i){for(var o,u=r(t,null,i,[]),a=t.length;a--;)(o=u[a])&&(t[a]=!(n[a]=o))}):function(t,i,o){return n[0]=t,r(n,null,o,e),n[0]=null,!e.pop()}}),has:at(function(t){return function(n){return ot(t,n).length>0}}),contains:at(function(t){return t=t.replace(K,tt),function(n){return(n.textContent||n.innerText||i(n)).indexOf(t)>-1}}),lang:at(function(t){return Y.test(t||"")||ot.error("unsupported lang: "+t),t=t.replace(K,tt).toLowerCase(),function(n){var e;do{if(e=v?n.lang:n.getAttribute("xml:lang")||n.getAttribute("lang"))return(e=e.toLowerCase())===t||0===e.indexOf(t+"-")}while((n=n.parentNode)&&1===n.nodeType);return!1}}),target:function(n){var e=t.location&&t.location.hash;return e&&e.slice(1)===n.id},root:function(t){return t===p},focus:function(t){return t===d.activeElement&&(!d.hasFocus||d.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:dt(!1),disabled:dt(!0),checked:function(t){var n=t.nodeName.toLowerCase();return"input"===n&&!!t.checked||"option"===n&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!r.pseudos.empty(t)},header:function(t){return G.test(t.nodeName)},input:function(t){return X.test(t.nodeName)},button:function(t){var n=t.nodeName.toLowerCase();return"input"===n&&"button"===t.type||"button"===n},text:function(t){var n;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(n=t.getAttribute("type"))||"text"===n.toLowerCase())},first:pt(function(){return[0]}),last:pt(function(t,n){return[n-1]}),eq:pt(function(t,n,e){return[e<0?e+n:e]}),even:pt(function(t,n){for(var e=0;e<n;e+=2)t.push(e);return t}),odd:pt(function(t,n){for(var e=1;e<n;e+=2)t.push(e);return t}),lt:pt(function(t,n,e){for(var r=e<0?e+n:e;--r>=0;)t.push(r);return t}),gt:pt(function(t,n,e){for(var r=e<0?e+n:e;++r<n;)t.push(r);return t})}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[n]=lt(n);for(n in{submit:!0,reset:!0})r.pseudos[n]=ht(n);function gt(){}function yt(t){for(var n=0,e=t.length,r="";n<e;n++)r+=t[n].value;return r}function mt(t,n,e){var r=n.dir,i=n.next,o=i||r,u=e&&"parentNode"===o,a=M++;return n.first?function(n,e,i){for(;n=n[r];)if(1===n.nodeType||u)return t(n,e,i);return!1}:function(n,e,c){var f,s,l,h=[w,a];if(c){for(;n=n[r];)if((1===n.nodeType||u)&&t(n,e,c))return!0}else for(;n=n[r];)if(1===n.nodeType||u)if(s=(l=n[_]||(n[_]={}))[n.uniqueID]||(l[n.uniqueID]={}),i&&i===n.nodeName.toLowerCase())n=n[r]||n;else{if((f=s[o])&&f[0]===w&&f[1]===a)return h[2]=f[2];if(s[o]=h,h[2]=t(n,e,c))return!0}return!1}}function bt(t){return t.length>1?function(n,e,r){for(var i=t.length;i--;)if(!t[i](n,e,r))return!1;return!0}:t[0]}function _t(t,n,e,r,i){for(var o,u=[],a=0,c=t.length,f=null!=n;a<c;a++)(o=t[a])&&(e&&!e(o,r,i)||(u.push(o),f&&n.push(a)));return u}function xt(t,n,e,r,i,o){return r&&!r[_]&&(r=xt(r)),i&&!i[_]&&(i=xt(i,o)),at(function(o,u,a,c){var f,s,l,h=[],d=[],p=u.length,v=o||function(t,n,e){for(var r=0,i=n.length;r<i;r++)ot(t,n[r],e);return e}(n||"*",a.nodeType?[a]:a,[]),g=!t||!o&&n?v:_t(v,h,t,a,c),y=e?i||(o?t:p||r)?[]:u:g;if(e&&e(g,y,a,c),r)for(f=_t(y,d),r(f,[],a,c),s=f.length;s--;)(l=f[s])&&(y[d[s]]=!(g[d[s]]=l));if(o){if(i||t){if(i){for(f=[],s=y.length;s--;)(l=y[s])&&f.push(g[s]=l);i(null,y=[],f,c)}for(s=y.length;s--;)(l=y[s])&&(f=i?j(o,l):h[s])>-1&&(o[f]=!(u[f]=l))}}else y=_t(y===u?y.splice(p,y.length):y),i?i(null,u,y,c):O.apply(u,y)})}function wt(t){for(var n,e,i,o=t.length,u=r.relative[t[0].type],a=u||r.relative[" "],c=u?1:0,s=mt(function(t){return t===n},a,!0),l=mt(function(t){return j(n,t)>-1},a,!0),h=[function(t,e,r){var i=!u&&(r||e!==f)||((n=e).nodeType?s(t,e,r):l(t,e,r));return n=null,i}];c<o;c++)if(e=r.relative[t[c].type])h=[mt(bt(h),e)];else{if((e=r.filter[t[c].type].apply(null,t[c].matches))[_]){for(i=++c;i<o&&!r.relative[t[i].type];i++);return xt(c>1&&bt(h),c>1&&yt(t.slice(0,c-1).concat({value:" "===t[c-2].type?"*":""})).replace(B,"$1"),e,c<i&&wt(t.slice(c,i)),i<o&&wt(t=t.slice(i)),i<o&&yt(t))}h.push(e)}return bt(h)}return gt.prototype=r.filters=r.pseudos,r.setFilters=new gt,u=ot.tokenize=function(t,n){var e,i,o,u,a,c,f,s=C[t+" "];if(s)return n?0:s.slice(0);for(a=t,c=[],f=r.preFilter;a;){for(u in e&&!(i=U.exec(a))||(i&&(a=a.slice(i[0].length)||a),c.push(o=[])),e=!1,(i=F.exec(a))&&(e=i.shift(),o.push({value:e,type:i[0].replace(B," ")}),a=a.slice(e.length)),r.filter)!(i=V[u].exec(a))||f[u]&&!(i=f[u](i))||(e=i.shift(),o.push({value:e,type:u,matches:i}),a=a.slice(e.length));if(!e)break}return n?a.length:a?ot.error(t):C(t,c).slice(0)},a=ot.compile=function(t,n){var e,i=[],o=[],a=S[t+" "];if(!a){for(n||(n=u(t)),e=n.length;e--;)(a=wt(n[e]))[_]?i.push(a):o.push(a);(a=S(t,function(t,n){var e=n.length>0,i=t.length>0,o=function(o,u,a,c,s){var l,p,g,y=0,m="0",b=o&&[],_=[],x=f,M=o||i&&r.find.TAG("*",s),T=w+=null==x?1:Math.random()||.1,C=M.length;for(s&&(f=u===d||u||s);m!==C&&null!=(l=M[m]);m++){if(i&&l){for(p=0,u||l.ownerDocument===d||(h(l),a=!v);g=t[p++];)if(g(l,u||d,a)){c.push(l);break}s&&(w=T)}e&&((l=!g&&l)&&y--,o&&b.push(l))}if(y+=m,e&&m!==y){for(p=0;g=n[p++];)g(b,_,u,a);if(o){if(y>0)for(;m--;)b[m]||_[m]||(_[m]=N.call(c));_=_t(_)}O.apply(c,_),s&&!o&&_.length>0&&y+n.length>1&&ot.uniqueSort(c)}return s&&(w=T,f=x),b};return e?at(o):o}(o,i))).selector=t}return a},c=ot.select=function(t,n,e,i){var o,c,f,s,l,h="function"==typeof t&&t,d=!i&&u(t=h.selector||t);if(e=e||[],1===d.length){if((c=d[0]=d[0].slice(0)).length>2&&"ID"===(f=c[0]).type&&9===n.nodeType&&v&&r.relative[c[1].type]){if(!(n=(r.find.ID(f.matches[0].replace(K,tt),n)||[])[0]))return e;h&&(n=n.parentNode),t=t.slice(c.shift().value.length)}for(o=V.needsContext.test(t)?0:c.length;o--&&(f=c[o],!r.relative[s=f.type]);)if((l=r.find[s])&&(i=l(f.matches[0].replace(K,tt),J.test(c[0].type)&&vt(n.parentNode)||n))){if(c.splice(o,1),!(t=i.length&&yt(c)))return O.apply(e,i),e;break}}return(h||a(t,d))(i,n,!v,e,!n||J.test(t)&&vt(n.parentNode)||n),e},e.sortStable=_.split("").sort(A).join("")===_,e.detectDuplicates=!!l,h(),e.sortDetached=ct(function(t){return 1&t.compareDocumentPosition(d.createElement("fieldset"))}),ct(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||ft("type|href|height|width",function(t,n,e){if(!e)return t.getAttribute(n,"type"===n.toLowerCase()?1:2)}),e.attributes&&ct(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||ft("value",function(t,n,e){if(!e&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),ct(function(t){return null==t.getAttribute("disabled")})||ft(P,function(t,n,e){var r;if(!e)return!0===t[n]?n.toLowerCase():(r=t.getAttributeNode(n))&&r.specified?r.value:null}),ot}(e);M.find=S,M.expr=S.selectors,M.expr[":"]=M.expr.pseudos,M.uniqueSort=M.unique=S.uniqueSort,M.text=S.getText,M.isXMLDoc=S.isXML,M.contains=S.contains,M.escapeSelector=S.escape;var A=function(t,n,e){for(var r=[],i=void 0!==e;(t=t[n])&&9!==t.nodeType;)if(1===t.nodeType){if(i&&M(t).is(e))break;r.push(t)}return r},k=function(t,n){for(var e=[];t;t=t.nextSibling)1===t.nodeType&&t!==n&&e.push(t);return e},E=M.expr.match.needsContext;function N(t,n){return t.nodeName&&t.nodeName.toLowerCase()===n.toLowerCase()}var D=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function O(t,n,e){return m(n)?M.grep(t,function(t,r){return!!n.call(t,r,t)!==e}):n.nodeType?M.grep(t,function(t){return t===n!==e}):"string"!=typeof n?M.grep(t,function(t){return l.call(n,t)>-1!==e}):M.filter(n,t,e)}M.filter=function(t,n,e){var r=n[0];return e&&(t=":not("+t+")"),1===n.length&&1===r.nodeType?M.find.matchesSelector(r,t)?[r]:[]:M.find.matches(t,M.grep(n,function(t){return 1===t.nodeType}))},M.fn.extend({find:function(t){var n,e,r=this.length,i=this;if("string"!=typeof t)return this.pushStack(M(t).filter(function(){for(n=0;n<r;n++)if(M.contains(i[n],this))return!0}));for(e=this.pushStack([]),n=0;n<r;n++)M.find(t,i[n],e);return r>1?M.uniqueSort(e):e},filter:function(t){return this.pushStack(O(this,t||[],!1))},not:function(t){return this.pushStack(O(this,t||[],!0))},is:function(t){return!!O(this,"string"==typeof t&&E.test(t)?M(t):t||[],!1).length}});var R,j=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(M.fn.init=function(t,n,e){var r,i;if(!t)return this;if(e=e||R,"string"==typeof t){if(!(r="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:j.exec(t))||!r[1]&&n)return!n||n.jquery?(n||e).find(t):this.constructor(n).find(t);if(r[1]){if(n=n instanceof M?n[0]:n,M.merge(this,M.parseHTML(r[1],n&&n.nodeType?n.ownerDocument||n:u,!0)),D.test(r[1])&&M.isPlainObject(n))for(r in n)m(this[r])?this[r](n[r]):this.attr(r,n[r]);return this}return(i=u.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):m(t)?void 0!==e.ready?e.ready(t):t(M):M.makeArray(t,this)}).prototype=M.fn,R=M(u);var P=/^(?:parents|prev(?:Until|All))/,$={children:!0,contents:!0,next:!0,prev:!0};function I(t,n){for(;(t=t[n])&&1!==t.nodeType;);return t}M.fn.extend({has:function(t){var n=M(t,this),e=n.length;return this.filter(function(){for(var t=0;t<e;t++)if(M.contains(this,n[t]))return!0})},closest:function(t,n){var e,r=0,i=this.length,o=[],u="string"!=typeof t&&M(t);if(!E.test(t))for(;r<i;r++)for(e=this[r];e&&e!==n;e=e.parentNode)if(e.nodeType<11&&(u?u.index(e)>-1:1===e.nodeType&&M.find.matchesSelector(e,t))){o.push(e);break}return this.pushStack(o.length>1?M.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?l.call(M(t),this[0]):l.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,n){return this.pushStack(M.uniqueSort(M.merge(this.get(),M(t,n))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),M.each({parent:function(t){var n=t.parentNode;return n&&11!==n.nodeType?n:null},parents:function(t){return A(t,"parentNode")},parentsUntil:function(t,n,e){return A(t,"parentNode",e)},next:function(t){return I(t,"nextSibling")},prev:function(t){return I(t,"previousSibling")},nextAll:function(t){return A(t,"nextSibling")},prevAll:function(t){return A(t,"previousSibling")},nextUntil:function(t,n,e){return A(t,"nextSibling",e)},prevUntil:function(t,n,e){return A(t,"previousSibling",e)},siblings:function(t){return k((t.parentNode||{}).firstChild,t)},children:function(t){return k(t.firstChild)},contents:function(t){return N(t,"iframe")?t.contentDocument:(N(t,"template")&&(t=t.content||t),M.merge([],t.childNodes))}},function(t,n){M.fn[t]=function(e,r){var i=M.map(this,n,e);return"Until"!==t.slice(-5)&&(r=e),r&&"string"==typeof r&&(i=M.filter(r,i)),this.length>1&&($[t]||M.uniqueSort(i),P.test(t)&&i.reverse()),this.pushStack(i)}});var L=/[^\x20\t\r\n\f]+/g;function z(t){return t}function q(t){throw t}function B(t,n,e,r){var i;try{t&&m(i=t.promise)?i.call(t).done(n).fail(e):t&&m(i=t.then)?i.call(t,n,e):n.apply(void 0,[t].slice(r))}catch(t){e.apply(void 0,[t])}}M.Callbacks=function(t){t="string"==typeof t?function(t){var n={};return M.each(t.match(L)||[],function(t,e){n[e]=!0}),n}(t):M.extend({},t);var n,e,r,i,o=[],u=[],a=-1,c=function(){for(i=i||t.once,r=n=!0;u.length;a=-1)for(e=u.shift();++a<o.length;)!1===o[a].apply(e[0],e[1])&&t.stopOnFalse&&(a=o.length,e=!1);t.memory||(e=!1),n=!1,i&&(o=e?[]:"")},f={add:function(){return o&&(e&&!n&&(a=o.length-1,u.push(e)),function n(e){M.each(e,function(e,r){m(r)?t.unique&&f.has(r)||o.push(r):r&&r.length&&"string"!==w(r)&&n(r)})}(arguments),e&&!n&&c()),this},remove:function(){return M.each(arguments,function(t,n){for(var e;(e=M.inArray(n,o,e))>-1;)o.splice(e,1),e<=a&&a--}),this},has:function(t){return t?M.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=u=[],o=e="",this},disabled:function(){return!o},lock:function(){return i=u=[],e||n||(o=e=""),this},locked:function(){return!!i},fireWith:function(t,e){return i||(e=[t,(e=e||[]).slice?e.slice():e],u.push(e),n||c()),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!r}};return f},M.extend({Deferred:function(t){var n=[["notify","progress",M.Callbacks("memory"),M.Callbacks("memory"),2],["resolve","done",M.Callbacks("once memory"),M.Callbacks("once memory"),0,"resolved"],["reject","fail",M.Callbacks("once memory"),M.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(t){return i.then(null,t)},pipe:function(){var t=arguments;return M.Deferred(function(e){M.each(n,function(n,r){var i=m(t[r[4]])&&t[r[4]];o[r[1]](function(){var t=i&&i.apply(this,arguments);t&&m(t.promise)?t.promise().progress(e.notify).done(e.resolve).fail(e.reject):e[r[0]+"With"](this,i?[t]:arguments)})}),t=null}).promise()},then:function(t,r,i){var o=0;function u(t,n,r,i){return function(){var a=this,c=arguments,f=function(){var e,f;if(!(t<o)){if((e=r.apply(a,c))===n.promise())throw new TypeError("Thenable self-resolution");f=e&&("object"==typeof e||"function"==typeof e)&&e.then,m(f)?i?f.call(e,u(o,n,z,i),u(o,n,q,i)):(o++,f.call(e,u(o,n,z,i),u(o,n,q,i),u(o,n,z,n.notifyWith))):(r!==z&&(a=void 0,c=[e]),(i||n.resolveWith)(a,c))}},s=i?f:function(){try{f()}catch(e){M.Deferred.exceptionHook&&M.Deferred.exceptionHook(e,s.stackTrace),t+1>=o&&(r!==q&&(a=void 0,c=[e]),n.rejectWith(a,c))}};t?s():(M.Deferred.getStackHook&&(s.stackTrace=M.Deferred.getStackHook()),e.setTimeout(s))}}return M.Deferred(function(e){n[0][3].add(u(0,e,m(i)?i:z,e.notifyWith)),n[1][3].add(u(0,e,m(t)?t:z)),n[2][3].add(u(0,e,m(r)?r:q))}).promise()},promise:function(t){return null!=t?M.extend(t,i):i}},o={};return M.each(n,function(t,e){var u=e[2],a=e[5];i[e[1]]=u.add,a&&u.add(function(){r=a},n[3-t][2].disable,n[3-t][3].disable,n[0][2].lock,n[0][3].lock),u.add(e[3].fire),o[e[0]]=function(){return o[e[0]+"With"](this===o?void 0:this,arguments),this},o[e[0]+"With"]=u.fireWith}),i.promise(o),t&&t.call(o,o),o},when:function(t){var n=arguments.length,e=n,r=Array(e),i=c.call(arguments),o=M.Deferred(),u=function(t){return function(e){r[t]=this,i[t]=arguments.length>1?c.call(arguments):e,--n||o.resolveWith(r,i)}};if(n<=1&&(B(t,o.done(u(e)).resolve,o.reject,!n),"pending"===o.state()||m(i[e]&&i[e].then)))return o.then();for(;e--;)B(i[e],u(e),o.reject);return o.promise()}});var U=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;M.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&U.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},M.readyException=function(t){e.setTimeout(function(){throw t})};var F=M.Deferred();function H(){u.removeEventListener("DOMContentLoaded",H),e.removeEventListener("load",H),M.ready()}M.fn.ready=function(t){return F.then(t).catch(function(t){M.readyException(t)}),this},M.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--M.readyWait:M.isReady)||(M.isReady=!0,!0!==t&&--M.readyWait>0||F.resolveWith(u,[M]))}}),M.ready.then=F.then,"complete"===u.readyState||"loading"!==u.readyState&&!u.documentElement.doScroll?e.setTimeout(M.ready):(u.addEventListener("DOMContentLoaded",H),e.addEventListener("load",H));var W=function(t,n,e,r,i,o,u){var a=0,c=t.length,f=null==e;if("object"===w(e))for(a in i=!0,e)W(t,n,a,e[a],!0,o,u);else if(void 0!==r&&(i=!0,m(r)||(u=!0),f&&(u?(n.call(t,r),n=null):(f=n,n=function(t,n,e){return f.call(M(t),e)})),n))for(;a<c;a++)n(t[a],e,u?r:r.call(t[a],a,n(t[a],e)));return i?t:f?n.call(t):c?n(t[0],e):o},Y=/^-ms-/,V=/-([a-z])/g;function X(t,n){return n.toUpperCase()}function G(t){return t.replace(Y,"ms-").replace(V,X)}var Z=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function Q(){this.expando=M.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(t){var n=t[this.expando];return n||(n={},Z(t)&&(t.nodeType?t[this.expando]=n:Object.defineProperty(t,this.expando,{value:n,configurable:!0}))),n},set:function(t,n,e){var r,i=this.cache(t);if("string"==typeof n)i[G(n)]=e;else for(r in n)i[G(r)]=n[r];return i},get:function(t,n){return void 0===n?this.cache(t):t[this.expando]&&t[this.expando][G(n)]},access:function(t,n,e){return void 0===n||n&&"string"==typeof n&&void 0===e?this.get(t,n):(this.set(t,n,e),void 0!==e?e:n)},remove:function(t,n){var e,r=t[this.expando];if(void 0!==r){if(void 0!==n){e=(n=Array.isArray(n)?n.map(G):(n=G(n))in r?[n]:n.match(L)||[]).length;for(;e--;)delete r[n[e]]}(void 0===n||M.isEmptyObject(r))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var n=t[this.expando];return void 0!==n&&!M.isEmptyObject(n)}};var J=new Q,K=new Q,tt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,nt=/[A-Z]/g;function et(t,n,e){var r;if(void 0===e&&1===t.nodeType)if(r="data-"+n.replace(nt,"-$&").toLowerCase(),"string"==typeof(e=t.getAttribute(r))){try{e=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:tt.test(t)?JSON.parse(t):t)}(e)}catch(t){}K.set(t,n,e)}else e=void 0;return e}M.extend({hasData:function(t){return K.hasData(t)||J.hasData(t)},data:function(t,n,e){return K.access(t,n,e)},removeData:function(t,n){K.remove(t,n)},_data:function(t,n,e){return J.access(t,n,e)},_removeData:function(t,n){J.remove(t,n)}}),M.fn.extend({data:function(t,n){var e,r,i,o=this[0],u=o&&o.attributes;if(void 0===t){if(this.length&&(i=K.get(o),1===o.nodeType&&!J.get(o,"hasDataAttrs"))){for(e=u.length;e--;)u[e]&&0===(r=u[e].name).indexOf("data-")&&(r=G(r.slice(5)),et(o,r,i[r]));J.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof t?this.each(function(){K.set(this,t)}):W(this,function(n){var e;if(o&&void 0===n)return void 0!==(e=K.get(o,t))?e:void 0!==(e=et(o,t))?e:void 0;this.each(function(){K.set(this,t,n)})},null,n,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){K.remove(this,t)})}}),M.extend({queue:function(t,n,e){var r;if(t)return n=(n||"fx")+"queue",r=J.get(t,n),e&&(!r||Array.isArray(e)?r=J.access(t,n,M.makeArray(e)):r.push(e)),r||[]},dequeue:function(t,n){n=n||"fx";var e=M.queue(t,n),r=e.length,i=e.shift(),o=M._queueHooks(t,n);"inprogress"===i&&(i=e.shift(),r--),i&&("fx"===n&&e.unshift("inprogress"),delete o.stop,i.call(t,function(){M.dequeue(t,n)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(t,n){var e=n+"queueHooks";return J.get(t,e)||J.access(t,e,{empty:M.Callbacks("once memory").add(function(){J.remove(t,[n+"queue",e])})})}}),M.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?M.queue(this[0],t):void 0===n?this:this.each(function(){var e=M.queue(this,t,n);M._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&M.dequeue(this,t)})},dequeue:function(t){return this.each(function(){M.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,n){var e,r=1,i=M.Deferred(),o=this,u=this.length,a=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof t&&(n=t,t=void 0),t=t||"fx";u--;)(e=J.get(o[u],t+"queueHooks"))&&e.empty&&(r++,e.empty.add(a));return a(),i.promise(n)}});var rt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,it=new RegExp("^(?:([+-])=|)("+rt+")([a-z%]*)$","i"),ot=["Top","Right","Bottom","Left"],ut=function(t,n){return"none"===(t=n||t).style.display||""===t.style.display&&M.contains(t.ownerDocument,t)&&"none"===M.css(t,"display")},at=function(t,n,e,r){var i,o,u={};for(o in n)u[o]=t.style[o],t.style[o]=n[o];for(o in i=e.apply(t,r||[]),n)t.style[o]=u[o];return i};function ct(t,n,e,r){var i,o,u=20,a=r?function(){return r.cur()}:function(){return M.css(t,n,"")},c=a(),f=e&&e[3]||(M.cssNumber[n]?"":"px"),s=(M.cssNumber[n]||"px"!==f&&+c)&&it.exec(M.css(t,n));if(s&&s[3]!==f){for(c/=2,f=f||s[3],s=+c||1;u--;)M.style(t,n,s+f),(1-o)*(1-(o=a()/c||.5))<=0&&(u=0),s/=o;s*=2,M.style(t,n,s+f),e=e||[]}return e&&(s=+s||+c||0,i=e[1]?s+(e[1]+1)*e[2]:+e[2],r&&(r.unit=f,r.start=s,r.end=i)),i}var ft={};function st(t){var n,e=t.ownerDocument,r=t.nodeName,i=ft[r];return i||(n=e.body.appendChild(e.createElement(r)),i=M.css(n,"display"),n.parentNode.removeChild(n),"none"===i&&(i="block"),ft[r]=i,i)}function lt(t,n){for(var e,r,i=[],o=0,u=t.length;o<u;o++)(r=t[o]).style&&(e=r.style.display,n?("none"===e&&(i[o]=J.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&ut(r)&&(i[o]=st(r))):"none"!==e&&(i[o]="none",J.set(r,"display",e)));for(o=0;o<u;o++)null!=i[o]&&(t[o].style.display=i[o]);return t}M.fn.extend({show:function(){return lt(this,!0)},hide:function(){return lt(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){ut(this)?M(this).show():M(this).hide()})}});var ht=/^(?:checkbox|radio)$/i,dt=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,pt=/^$|^module$|\/(?:java|ecma)script/i,vt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function gt(t,n){var e;return e=void 0!==t.getElementsByTagName?t.getElementsByTagName(n||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(n||"*"):[],void 0===n||n&&N(t,n)?M.merge([t],e):e}function yt(t,n){for(var e=0,r=t.length;e<r;e++)J.set(t[e],"globalEval",!n||J.get(n[e],"globalEval"))}vt.optgroup=vt.option,vt.tbody=vt.tfoot=vt.colgroup=vt.caption=vt.thead,vt.th=vt.td;var mt,bt,_t=/<|&#?\w+;/;function xt(t,n,e,r,i){for(var o,u,a,c,f,s,l=n.createDocumentFragment(),h=[],d=0,p=t.length;d<p;d++)if((o=t[d])||0===o)if("object"===w(o))M.merge(h,o.nodeType?[o]:o);else if(_t.test(o)){for(u=u||l.appendChild(n.createElement("div")),a=(dt.exec(o)||["",""])[1].toLowerCase(),c=vt[a]||vt._default,u.innerHTML=c[1]+M.htmlPrefilter(o)+c[2],s=c[0];s--;)u=u.lastChild;M.merge(h,u.childNodes),(u=l.firstChild).textContent=""}else h.push(n.createTextNode(o));for(l.textContent="",d=0;o=h[d++];)if(r&&M.inArray(o,r)>-1)i&&i.push(o);else if(f=M.contains(o.ownerDocument,o),u=gt(l.appendChild(o),"script"),f&&yt(u),e)for(s=0;o=u[s++];)pt.test(o.type||"")&&e.push(o);return l}mt=u.createDocumentFragment().appendChild(u.createElement("div")),(bt=u.createElement("input")).setAttribute("type","radio"),bt.setAttribute("checked","checked"),bt.setAttribute("name","t"),mt.appendChild(bt),y.checkClone=mt.cloneNode(!0).cloneNode(!0).lastChild.checked,mt.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!mt.cloneNode(!0).lastChild.defaultValue;var wt=u.documentElement,Mt=/^key/,Tt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ct=/^([^.]*)(?:\.(.+)|)/;function St(){return!0}function At(){return!1}function kt(){try{return u.activeElement}catch(t){}}function Et(t,n,e,r,i,o){var u,a;if("object"==typeof n){for(a in"string"!=typeof e&&(r=r||e,e=void 0),n)Et(t,a,e,r,n[a],o);return t}if(null==r&&null==i?(i=e,r=e=void 0):null==i&&("string"==typeof e?(i=r,r=void 0):(i=r,r=e,e=void 0)),!1===i)i=At;else if(!i)return t;return 1===o&&(u=i,(i=function(t){return M().off(t),u.apply(this,arguments)}).guid=u.guid||(u.guid=M.guid++)),t.each(function(){M.event.add(this,n,i,r,e)})}M.event={global:{},add:function(t,n,e,r,i){var o,u,a,c,f,s,l,h,d,p,v,g=J.get(t);if(g)for(e.handler&&(e=(o=e).handler,i=o.selector),i&&M.find.matchesSelector(wt,i),e.guid||(e.guid=M.guid++),(c=g.events)||(c=g.events={}),(u=g.handle)||(u=g.handle=function(n){return void 0!==M&&M.event.triggered!==n.type?M.event.dispatch.apply(t,arguments):void 0}),f=(n=(n||"").match(L)||[""]).length;f--;)d=v=(a=Ct.exec(n[f])||[])[1],p=(a[2]||"").split(".").sort(),d&&(l=M.event.special[d]||{},d=(i?l.delegateType:l.bindType)||d,l=M.event.special[d]||{},s=M.extend({type:d,origType:v,data:r,handler:e,guid:e.guid,selector:i,needsContext:i&&M.expr.match.needsContext.test(i),namespace:p.join(".")},o),(h=c[d])||((h=c[d]=[]).delegateCount=0,l.setup&&!1!==l.setup.call(t,r,p,u)||t.addEventListener&&t.addEventListener(d,u)),l.add&&(l.add.call(t,s),s.handler.guid||(s.handler.guid=e.guid)),i?h.splice(h.delegateCount++,0,s):h.push(s),M.event.global[d]=!0)},remove:function(t,n,e,r,i){var o,u,a,c,f,s,l,h,d,p,v,g=J.hasData(t)&&J.get(t);if(g&&(c=g.events)){for(f=(n=(n||"").match(L)||[""]).length;f--;)if(d=v=(a=Ct.exec(n[f])||[])[1],p=(a[2]||"").split(".").sort(),d){for(l=M.event.special[d]||{},h=c[d=(r?l.delegateType:l.bindType)||d]||[],a=a[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),u=o=h.length;o--;)s=h[o],!i&&v!==s.origType||e&&e.guid!==s.guid||a&&!a.test(s.namespace)||r&&r!==s.selector&&("**"!==r||!s.selector)||(h.splice(o,1),s.selector&&h.delegateCount--,l.remove&&l.remove.call(t,s));u&&!h.length&&(l.teardown&&!1!==l.teardown.call(t,p,g.handle)||M.removeEvent(t,d,g.handle),delete c[d])}else for(d in c)M.event.remove(t,d+n[f],e,r,!0);M.isEmptyObject(c)&&J.remove(t,"handle events")}},dispatch:function(t){var n,e,r,i,o,u,a=M.event.fix(t),c=new Array(arguments.length),f=(J.get(this,"events")||{})[a.type]||[],s=M.event.special[a.type]||{};for(c[0]=a,n=1;n<arguments.length;n++)c[n]=arguments[n];if(a.delegateTarget=this,!s.preDispatch||!1!==s.preDispatch.call(this,a)){for(u=M.event.handlers.call(this,a,f),n=0;(i=u[n++])&&!a.isPropagationStopped();)for(a.currentTarget=i.elem,e=0;(o=i.handlers[e++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(r=((M.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,c))&&!1===(a.result=r)&&(a.preventDefault(),a.stopPropagation()));return s.postDispatch&&s.postDispatch.call(this,a),a.result}},handlers:function(t,n){var e,r,i,o,u,a=[],c=n.delegateCount,f=t.target;if(c&&f.nodeType&&!("click"===t.type&&t.button>=1))for(;f!==this;f=f.parentNode||this)if(1===f.nodeType&&("click"!==t.type||!0!==f.disabled)){for(o=[],u={},e=0;e<c;e++)void 0===u[i=(r=n[e]).selector+" "]&&(u[i]=r.needsContext?M(i,this).index(f)>-1:M.find(i,this,null,[f]).length),u[i]&&o.push(r);o.length&&a.push({elem:f,handlers:o})}return f=this,c<n.length&&a.push({elem:f,handlers:n.slice(c)}),a},addProp:function(t,n){Object.defineProperty(M.Event.prototype,t,{enumerable:!0,configurable:!0,get:m(n)?function(){if(this.originalEvent)return n(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(n){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:n})}})},fix:function(t){return t[M.expando]?t:new M.Event(t)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==kt()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===kt()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&N(this,"input"))return this.click(),!1},_default:function(t){return N(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},M.removeEvent=function(t,n,e){t.removeEventListener&&t.removeEventListener(n,e)},M.Event=function(t,n){if(!(this instanceof M.Event))return new M.Event(t,n);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?St:At,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,n&&M.extend(this,n),this.timeStamp=t&&t.timeStamp||Date.now(),this[M.expando]=!0},M.Event.prototype={constructor:M.Event,isDefaultPrevented:At,isPropagationStopped:At,isImmediatePropagationStopped:At,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=St,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=St,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=St,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},M.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var n=t.button;return null==t.which&&Mt.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==n&&Tt.test(t.type)?1&n?1:2&n?3:4&n?2:0:t.which}},M.event.addProp),M.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,n){M.event.special[t]={delegateType:n,bindType:n,handle:function(t){var e,r=t.relatedTarget,i=t.handleObj;return r&&(r===this||M.contains(this,r))||(t.type=i.origType,e=i.handler.apply(this,arguments),t.type=n),e}}}),M.fn.extend({on:function(t,n,e,r){return Et(this,t,n,e,r)},one:function(t,n,e,r){return Et(this,t,n,e,r,1)},off:function(t,n,e){var r,i;if(t&&t.preventDefault&&t.handleObj)return r=t.handleObj,M(t.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof t){for(i in t)this.off(i,n,t[i]);return this}return!1!==n&&"function"!=typeof n||(e=n,n=void 0),!1===e&&(e=At),this.each(function(){M.event.remove(this,t,e,n)})}});var Nt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Dt=/<script|<style|<link/i,Ot=/checked\s*(?:[^=]|=\s*.checked.)/i,Rt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function jt(t,n){return N(t,"table")&&N(11!==n.nodeType?n:n.firstChild,"tr")&&M(t).children("tbody")[0]||t}function Pt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function $t(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function It(t,n){var e,r,i,o,u,a,c,f;if(1===n.nodeType){if(J.hasData(t)&&(o=J.access(t),u=J.set(n,o),f=o.events))for(i in delete u.handle,u.events={},f)for(e=0,r=f[i].length;e<r;e++)M.event.add(n,i,f[i][e]);K.hasData(t)&&(a=K.access(t),c=M.extend({},a),K.set(n,c))}}function Lt(t,n,e,r){n=f.apply([],n);var i,o,u,a,c,s,l=0,h=t.length,d=h-1,p=n[0],v=m(p);if(v||h>1&&"string"==typeof p&&!y.checkClone&&Ot.test(p))return t.each(function(i){var o=t.eq(i);v&&(n[0]=p.call(this,i,o.html())),Lt(o,n,e,r)});if(h&&(o=(i=xt(n,t[0].ownerDocument,!1,t,r)).firstChild,1===i.childNodes.length&&(i=o),o||r)){for(a=(u=M.map(gt(i,"script"),Pt)).length;l<h;l++)c=i,l!==d&&(c=M.clone(c,!0,!0),a&&M.merge(u,gt(c,"script"))),e.call(t[l],c,l);if(a)for(s=u[u.length-1].ownerDocument,M.map(u,$t),l=0;l<a;l++)c=u[l],pt.test(c.type||"")&&!J.access(c,"globalEval")&&M.contains(s,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?M._evalUrl&&M._evalUrl(c.src):x(c.textContent.replace(Rt,""),s,c))}return t}function zt(t,n,e){for(var r,i=n?M.filter(n,t):t,o=0;null!=(r=i[o]);o++)e||1!==r.nodeType||M.cleanData(gt(r)),r.parentNode&&(e&&M.contains(r.ownerDocument,r)&&yt(gt(r,"script")),r.parentNode.removeChild(r));return t}M.extend({htmlPrefilter:function(t){return t.replace(Nt,"<$1></$2>")},clone:function(t,n,e){var r,i,o,u,a,c,f,s=t.cloneNode(!0),l=M.contains(t.ownerDocument,t);if(!(y.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||M.isXMLDoc(t)))for(u=gt(s),r=0,i=(o=gt(t)).length;r<i;r++)a=o[r],c=u[r],f=void 0,"input"===(f=c.nodeName.toLowerCase())&&ht.test(a.type)?c.checked=a.checked:"input"!==f&&"textarea"!==f||(c.defaultValue=a.defaultValue);if(n)if(e)for(o=o||gt(t),u=u||gt(s),r=0,i=o.length;r<i;r++)It(o[r],u[r]);else It(t,s);return(u=gt(s,"script")).length>0&&yt(u,!l&&gt(t,"script")),s},cleanData:function(t){for(var n,e,r,i=M.event.special,o=0;void 0!==(e=t[o]);o++)if(Z(e)){if(n=e[J.expando]){if(n.events)for(r in n.events)i[r]?M.event.remove(e,r):M.removeEvent(e,r,n.handle);e[J.expando]=void 0}e[K.expando]&&(e[K.expando]=void 0)}}}),M.fn.extend({detach:function(t){return zt(this,t,!0)},remove:function(t){return zt(this,t)},text:function(t){return W(this,function(t){return void 0===t?M.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return Lt(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||jt(this,t).appendChild(t)})},prepend:function(){return Lt(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var n=jt(this,t);n.insertBefore(t,n.firstChild)}})},before:function(){return Lt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return Lt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,n=0;null!=(t=this[n]);n++)1===t.nodeType&&(M.cleanData(gt(t,!1)),t.textContent="");return this},clone:function(t,n){return t=null!=t&&t,n=null==n?t:n,this.map(function(){return M.clone(this,t,n)})},html:function(t){return W(this,function(t){var n=this[0]||{},e=0,r=this.length;if(void 0===t&&1===n.nodeType)return n.innerHTML;if("string"==typeof t&&!Dt.test(t)&&!vt[(dt.exec(t)||["",""])[1].toLowerCase()]){t=M.htmlPrefilter(t);try{for(;e<r;e++)1===(n=this[e]||{}).nodeType&&(M.cleanData(gt(n,!1)),n.innerHTML=t);n=0}catch(t){}}n&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return Lt(this,arguments,function(n){var e=this.parentNode;M.inArray(this,t)<0&&(M.cleanData(gt(this)),e&&e.replaceChild(n,this))},t)}}),M.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,n){M.fn[t]=function(t){for(var e,r=[],i=M(t),o=i.length-1,u=0;u<=o;u++)e=u===o?this:this.clone(!0),M(i[u])[n](e),s.apply(r,e.get());return this.pushStack(r)}});var qt=new RegExp("^("+rt+")(?!px)[a-z%]+$","i"),Bt=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)},Ut=new RegExp(ot.join("|"),"i");function Ft(t,n,e){var r,i,o,u,a=t.style;return(e=e||Bt(t))&&(""!==(u=e.getPropertyValue(n)||e[n])||M.contains(t.ownerDocument,t)||(u=M.style(t,n)),!y.pixelBoxStyles()&&qt.test(u)&&Ut.test(n)&&(r=a.width,i=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=u,u=e.width,a.width=r,a.minWidth=i,a.maxWidth=o)),void 0!==u?u+"":u}function Ht(t,n){return{get:function(){if(!t())return(this.get=n).apply(this,arguments);delete this.get}}}!function(){function t(){if(s){f.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",s.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",wt.appendChild(f).appendChild(s);var t=e.getComputedStyle(s);r="1%"!==t.top,c=12===n(t.marginLeft),s.style.right="60%",a=36===n(t.right),i=36===n(t.width),s.style.position="absolute",o=36===s.offsetWidth||"absolute",wt.removeChild(f),s=null}}function n(t){return Math.round(parseFloat(t))}var r,i,o,a,c,f=u.createElement("div"),s=u.createElement("div");s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===s.style.backgroundClip,M.extend(y,{boxSizingReliable:function(){return t(),i},pixelBoxStyles:function(){return t(),a},pixelPosition:function(){return t(),r},reliableMarginLeft:function(){return t(),c},scrollboxSize:function(){return t(),o}}))}();var Wt=/^(none|table(?!-c[ea]).+)/,Yt=/^--/,Vt={position:"absolute",visibility:"hidden",display:"block"},Xt={letterSpacing:"0",fontWeight:"400"},Gt=["Webkit","Moz","ms"],Zt=u.createElement("div").style;function Qt(t){var n=M.cssProps[t];return n||(n=M.cssProps[t]=function(t){if(t in Zt)return t;for(var n=t[0].toUpperCase()+t.slice(1),e=Gt.length;e--;)if((t=Gt[e]+n)in Zt)return t}(t)||t),n}function Jt(t,n,e){var r=it.exec(n);return r?Math.max(0,r[2]-(e||0))+(r[3]||"px"):n}function Kt(t,n,e,r,i,o){var u="width"===n?1:0,a=0,c=0;if(e===(r?"border":"content"))return 0;for(;u<4;u+=2)"margin"===e&&(c+=M.css(t,e+ot[u],!0,i)),r?("content"===e&&(c-=M.css(t,"padding"+ot[u],!0,i)),"margin"!==e&&(c-=M.css(t,"border"+ot[u]+"Width",!0,i))):(c+=M.css(t,"padding"+ot[u],!0,i),"padding"!==e?c+=M.css(t,"border"+ot[u]+"Width",!0,i):a+=M.css(t,"border"+ot[u]+"Width",!0,i));return!r&&o>=0&&(c+=Math.max(0,Math.ceil(t["offset"+n[0].toUpperCase()+n.slice(1)]-o-c-a-.5))),c}function tn(t,n,e){var r=Bt(t),i=Ft(t,n,r),o="border-box"===M.css(t,"boxSizing",!1,r),u=o;if(qt.test(i)){if(!e)return i;i="auto"}return u=u&&(y.boxSizingReliable()||i===t.style[n]),("auto"===i||!parseFloat(i)&&"inline"===M.css(t,"display",!1,r))&&(i=t["offset"+n[0].toUpperCase()+n.slice(1)],u=!0),(i=parseFloat(i)||0)+Kt(t,n,e||(o?"border":"content"),u,r,i)+"px"}function nn(t,n,e,r,i){return new nn.prototype.init(t,n,e,r,i)}M.extend({cssHooks:{opacity:{get:function(t,n){if(n){var e=Ft(t,"opacity");return""===e?"1":e}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,n,e,r){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var i,o,u,a=G(n),c=Yt.test(n),f=t.style;if(c||(n=Qt(a)),u=M.cssHooks[n]||M.cssHooks[a],void 0===e)return u&&"get"in u&&void 0!==(i=u.get(t,!1,r))?i:f[n];"string"===(o=typeof e)&&(i=it.exec(e))&&i[1]&&(e=ct(t,n,i),o="number"),null!=e&&e==e&&("number"===o&&(e+=i&&i[3]||(M.cssNumber[a]?"":"px")),y.clearCloneStyle||""!==e||0!==n.indexOf("background")||(f[n]="inherit"),u&&"set"in u&&void 0===(e=u.set(t,e,r))||(c?f.setProperty(n,e):f[n]=e))}},css:function(t,n,e,r){var i,o,u,a=G(n);return Yt.test(n)||(n=Qt(a)),(u=M.cssHooks[n]||M.cssHooks[a])&&"get"in u&&(i=u.get(t,!0,e)),void 0===i&&(i=Ft(t,n,r)),"normal"===i&&n in Xt&&(i=Xt[n]),""===e||e?(o=parseFloat(i),!0===e||isFinite(o)?o||0:i):i}}),M.each(["height","width"],function(t,n){M.cssHooks[n]={get:function(t,e,r){if(e)return!Wt.test(M.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?tn(t,n,r):at(t,Vt,function(){return tn(t,n,r)})},set:function(t,e,r){var i,o=Bt(t),u="border-box"===M.css(t,"boxSizing",!1,o),a=r&&Kt(t,n,r,u,o);return u&&y.scrollboxSize()===o.position&&(a-=Math.ceil(t["offset"+n[0].toUpperCase()+n.slice(1)]-parseFloat(o[n])-Kt(t,n,"border",!1,o)-.5)),a&&(i=it.exec(e))&&"px"!==(i[3]||"px")&&(t.style[n]=e,e=M.css(t,n)),Jt(0,e,a)}}}),M.cssHooks.marginLeft=Ht(y.reliableMarginLeft,function(t,n){if(n)return(parseFloat(Ft(t,"marginLeft"))||t.getBoundingClientRect().left-at(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),M.each({margin:"",padding:"",border:"Width"},function(t,n){M.cssHooks[t+n]={expand:function(e){for(var r=0,i={},o="string"==typeof e?e.split(" "):[e];r<4;r++)i[t+ot[r]+n]=o[r]||o[r-2]||o[0];return i}},"margin"!==t&&(M.cssHooks[t+n].set=Jt)}),M.fn.extend({css:function(t,n){return W(this,function(t,n,e){var r,i,o={},u=0;if(Array.isArray(n)){for(r=Bt(t),i=n.length;u<i;u++)o[n[u]]=M.css(t,n[u],!1,r);return o}return void 0!==e?M.style(t,n,e):M.css(t,n)},t,n,arguments.length>1)}}),M.Tween=nn,nn.prototype={constructor:nn,init:function(t,n,e,r,i,o){this.elem=t,this.prop=e,this.easing=i||M.easing._default,this.options=n,this.start=this.now=this.cur(),this.end=r,this.unit=o||(M.cssNumber[e]?"":"px")},cur:function(){var t=nn.propHooks[this.prop];return t&&t.get?t.get(this):nn.propHooks._default.get(this)},run:function(t){var n,e=nn.propHooks[this.prop];return this.options.duration?this.pos=n=M.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=n=t,this.now=(this.end-this.start)*n+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),e&&e.set?e.set(this):nn.propHooks._default.set(this),this}},nn.prototype.init.prototype=nn.prototype,nn.propHooks={_default:{get:function(t){var n;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(n=M.css(t.elem,t.prop,""))&&"auto"!==n?n:0},set:function(t){M.fx.step[t.prop]?M.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[M.cssProps[t.prop]]&&!M.cssHooks[t.prop]?t.elem[t.prop]=t.now:M.style(t.elem,t.prop,t.now+t.unit)}}},nn.propHooks.scrollTop=nn.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},M.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},M.fx=nn.prototype.init,M.fx.step={};var en,rn,on=/^(?:toggle|show|hide)$/,un=/queueHooks$/;function an(){rn&&(!1===u.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(an):e.setTimeout(an,M.fx.interval),M.fx.tick())}function cn(){return e.setTimeout(function(){en=void 0}),en=Date.now()}function fn(t,n){var e,r=0,i={height:t};for(n=n?1:0;r<4;r+=2-n)i["margin"+(e=ot[r])]=i["padding"+e]=t;return n&&(i.opacity=i.width=t),i}function sn(t,n,e){for(var r,i=(ln.tweeners[n]||[]).concat(ln.tweeners["*"]),o=0,u=i.length;o<u;o++)if(r=i[o].call(e,n,t))return r}function ln(t,n,e){var r,i,o=0,u=ln.prefilters.length,a=M.Deferred().always(function(){delete c.elem}),c=function(){if(i)return!1;for(var n=en||cn(),e=Math.max(0,f.startTime+f.duration-n),r=1-(e/f.duration||0),o=0,u=f.tweens.length;o<u;o++)f.tweens[o].run(r);return a.notifyWith(t,[f,r,e]),r<1&&u?e:(u||a.notifyWith(t,[f,1,0]),a.resolveWith(t,[f]),!1)},f=a.promise({elem:t,props:M.extend({},n),opts:M.extend(!0,{specialEasing:{},easing:M.easing._default},e),originalProperties:n,originalOptions:e,startTime:en||cn(),duration:e.duration,tweens:[],createTween:function(n,e){var r=M.Tween(t,f.opts,n,e,f.opts.specialEasing[n]||f.opts.easing);return f.tweens.push(r),r},stop:function(n){var e=0,r=n?f.tweens.length:0;if(i)return this;for(i=!0;e<r;e++)f.tweens[e].run(1);return n?(a.notifyWith(t,[f,1,0]),a.resolveWith(t,[f,n])):a.rejectWith(t,[f,n]),this}}),s=f.props;for(!function(t,n){var e,r,i,o,u;for(e in t)if(i=n[r=G(e)],o=t[e],Array.isArray(o)&&(i=o[1],o=t[e]=o[0]),e!==r&&(t[r]=o,delete t[e]),(u=M.cssHooks[r])&&"expand"in u)for(e in o=u.expand(o),delete t[r],o)e in t||(t[e]=o[e],n[e]=i);else n[r]=i}(s,f.opts.specialEasing);o<u;o++)if(r=ln.prefilters[o].call(f,t,s,f.opts))return m(r.stop)&&(M._queueHooks(f.elem,f.opts.queue).stop=r.stop.bind(r)),r;return M.map(s,sn,f),m(f.opts.start)&&f.opts.start.call(t,f),f.progress(f.opts.progress).done(f.opts.done,f.opts.complete).fail(f.opts.fail).always(f.opts.always),M.fx.timer(M.extend(c,{elem:t,anim:f,queue:f.opts.queue})),f}M.Animation=M.extend(ln,{tweeners:{"*":[function(t,n){var e=this.createTween(t,n);return ct(e.elem,t,it.exec(n),e),e}]},tweener:function(t,n){m(t)?(n=t,t=["*"]):t=t.match(L);for(var e,r=0,i=t.length;r<i;r++)e=t[r],ln.tweeners[e]=ln.tweeners[e]||[],ln.tweeners[e].unshift(n)},prefilters:[function(t,n,e){var r,i,o,u,a,c,f,s,l="width"in n||"height"in n,h=this,d={},p=t.style,v=t.nodeType&&ut(t),g=J.get(t,"fxshow");for(r in e.queue||(null==(u=M._queueHooks(t,"fx")).unqueued&&(u.unqueued=0,a=u.empty.fire,u.empty.fire=function(){u.unqueued||a()}),u.unqueued++,h.always(function(){h.always(function(){u.unqueued--,M.queue(t,"fx").length||u.empty.fire()})})),n)if(i=n[r],on.test(i)){if(delete n[r],o=o||"toggle"===i,i===(v?"hide":"show")){if("show"!==i||!g||void 0===g[r])continue;v=!0}d[r]=g&&g[r]||M.style(t,r)}if((c=!M.isEmptyObject(n))||!M.isEmptyObject(d))for(r in l&&1===t.nodeType&&(e.overflow=[p.overflow,p.overflowX,p.overflowY],null==(f=g&&g.display)&&(f=J.get(t,"display")),"none"===(s=M.css(t,"display"))&&(f?s=f:(lt([t],!0),f=t.style.display||f,s=M.css(t,"display"),lt([t]))),("inline"===s||"inline-block"===s&&null!=f)&&"none"===M.css(t,"float")&&(c||(h.done(function(){p.display=f}),null==f&&(s=p.display,f="none"===s?"":s)),p.display="inline-block")),e.overflow&&(p.overflow="hidden",h.always(function(){p.overflow=e.overflow[0],p.overflowX=e.overflow[1],p.overflowY=e.overflow[2]})),c=!1,d)c||(g?"hidden"in g&&(v=g.hidden):g=J.access(t,"fxshow",{display:f}),o&&(g.hidden=!v),v&&lt([t],!0),h.done(function(){for(r in v||lt([t]),J.remove(t,"fxshow"),d)M.style(t,r,d[r])})),c=sn(v?g[r]:0,r,h),r in g||(g[r]=c.start,v&&(c.end=c.start,c.start=0))}],prefilter:function(t,n){n?ln.prefilters.unshift(t):ln.prefilters.push(t)}}),M.speed=function(t,n,e){var r=t&&"object"==typeof t?M.extend({},t):{complete:e||!e&&n||m(t)&&t,duration:t,easing:e&&n||n&&!m(n)&&n};return M.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in M.fx.speeds?r.duration=M.fx.speeds[r.duration]:r.duration=M.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){m(r.old)&&r.old.call(this),r.queue&&M.dequeue(this,r.queue)},r},M.fn.extend({fadeTo:function(t,n,e,r){return this.filter(ut).css("opacity",0).show().end().animate({opacity:n},t,e,r)},animate:function(t,n,e,r){var i=M.isEmptyObject(t),o=M.speed(n,e,r),u=function(){var n=ln(this,M.extend({},t),o);(i||J.get(this,"finish"))&&n.stop(!0)};return u.finish=u,i||!1===o.queue?this.each(u):this.queue(o.queue,u)},stop:function(t,n,e){var r=function(t){var n=t.stop;delete t.stop,n(e)};return"string"!=typeof t&&(e=n,n=t,t=void 0),n&&!1!==t&&this.queue(t||"fx",[]),this.each(function(){var n=!0,i=null!=t&&t+"queueHooks",o=M.timers,u=J.get(this);if(i)u[i]&&u[i].stop&&r(u[i]);else for(i in u)u[i]&&u[i].stop&&un.test(i)&&r(u[i]);for(i=o.length;i--;)o[i].elem!==this||null!=t&&o[i].queue!==t||(o[i].anim.stop(e),n=!1,o.splice(i,1));!n&&e||M.dequeue(this,t)})},finish:function(t){return!1!==t&&(t=t||"fx"),this.each(function(){var n,e=J.get(this),r=e[t+"queue"],i=e[t+"queueHooks"],o=M.timers,u=r?r.length:0;for(e.finish=!0,M.queue(this,t,[]),i&&i.stop&&i.stop.call(this,!0),n=o.length;n--;)o[n].elem===this&&o[n].queue===t&&(o[n].anim.stop(!0),o.splice(n,1));for(n=0;n<u;n++)r[n]&&r[n].finish&&r[n].finish.call(this);delete e.finish})}}),M.each(["toggle","show","hide"],function(t,n){var e=M.fn[n];M.fn[n]=function(t,r,i){return null==t||"boolean"==typeof t?e.apply(this,arguments):this.animate(fn(n,!0),t,r,i)}}),M.each({slideDown:fn("show"),slideUp:fn("hide"),slideToggle:fn("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,n){M.fn[t]=function(t,e,r){return this.animate(n,t,e,r)}}),M.timers=[],M.fx.tick=function(){var t,n=0,e=M.timers;for(en=Date.now();n<e.length;n++)(t=e[n])()||e[n]!==t||e.splice(n--,1);e.length||M.fx.stop(),en=void 0},M.fx.timer=function(t){M.timers.push(t),M.fx.start()},M.fx.interval=13,M.fx.start=function(){rn||(rn=!0,an())},M.fx.stop=function(){rn=null},M.fx.speeds={slow:600,fast:200,_default:400},M.fn.delay=function(t,n){return t=M.fx&&M.fx.speeds[t]||t,n=n||"fx",this.queue(n,function(n,r){var i=e.setTimeout(n,t);r.stop=function(){e.clearTimeout(i)}})},function(){var t=u.createElement("input"),n=u.createElement("select").appendChild(u.createElement("option"));t.type="checkbox",y.checkOn=""!==t.value,y.optSelected=n.selected,(t=u.createElement("input")).value="t",t.type="radio",y.radioValue="t"===t.value}();var hn,dn=M.expr.attrHandle;M.fn.extend({attr:function(t,n){return W(this,M.attr,t,n,arguments.length>1)},removeAttr:function(t){return this.each(function(){M.removeAttr(this,t)})}}),M.extend({attr:function(t,n,e){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?M.prop(t,n,e):(1===o&&M.isXMLDoc(t)||(i=M.attrHooks[n.toLowerCase()]||(M.expr.match.bool.test(n)?hn:void 0)),void 0!==e?null===e?void M.removeAttr(t,n):i&&"set"in i&&void 0!==(r=i.set(t,e,n))?r:(t.setAttribute(n,e+""),e):i&&"get"in i&&null!==(r=i.get(t,n))?r:null==(r=M.find.attr(t,n))?void 0:r)},attrHooks:{type:{set:function(t,n){if(!y.radioValue&&"radio"===n&&N(t,"input")){var e=t.value;return t.setAttribute("type",n),e&&(t.value=e),n}}}},removeAttr:function(t,n){var e,r=0,i=n&&n.match(L);if(i&&1===t.nodeType)for(;e=i[r++];)t.removeAttribute(e)}}),hn={set:function(t,n,e){return!1===n?M.removeAttr(t,e):t.setAttribute(e,e),e}},M.each(M.expr.match.bool.source.match(/\w+/g),function(t,n){var e=dn[n]||M.find.attr;dn[n]=function(t,n,r){var i,o,u=n.toLowerCase();return r||(o=dn[u],dn[u]=i,i=null!=e(t,n,r)?u:null,dn[u]=o),i}});var pn=/^(?:input|select|textarea|button)$/i,vn=/^(?:a|area)$/i;function gn(t){return(t.match(L)||[]).join(" ")}function yn(t){return t.getAttribute&&t.getAttribute("class")||""}function mn(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(L)||[]}M.fn.extend({prop:function(t,n){return W(this,M.prop,t,n,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[M.propFix[t]||t]})}}),M.extend({prop:function(t,n,e){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&M.isXMLDoc(t)||(n=M.propFix[n]||n,i=M.propHooks[n]),void 0!==e?i&&"set"in i&&void 0!==(r=i.set(t,e,n))?r:t[n]=e:i&&"get"in i&&null!==(r=i.get(t,n))?r:t[n]},propHooks:{tabIndex:{get:function(t){var n=M.find.attr(t,"tabindex");return n?parseInt(n,10):pn.test(t.nodeName)||vn.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),y.optSelected||(M.propHooks.selected={get:function(t){var n=t.parentNode;return n&&n.parentNode&&n.parentNode.selectedIndex,null},set:function(t){var n=t.parentNode;n&&(n.selectedIndex,n.parentNode&&n.parentNode.selectedIndex)}}),M.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){M.propFix[this.toLowerCase()]=this}),M.fn.extend({addClass:function(t){var n,e,r,i,o,u,a,c=0;if(m(t))return this.each(function(n){M(this).addClass(t.call(this,n,yn(this)))});if((n=mn(t)).length)for(;e=this[c++];)if(i=yn(e),r=1===e.nodeType&&" "+gn(i)+" "){for(u=0;o=n[u++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(a=gn(r))&&e.setAttribute("class",a)}return this},removeClass:function(t){var n,e,r,i,o,u,a,c=0;if(m(t))return this.each(function(n){M(this).removeClass(t.call(this,n,yn(this)))});if(!arguments.length)return this.attr("class","");if((n=mn(t)).length)for(;e=this[c++];)if(i=yn(e),r=1===e.nodeType&&" "+gn(i)+" "){for(u=0;o=n[u++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");i!==(a=gn(r))&&e.setAttribute("class",a)}return this},toggleClass:function(t,n){var e=typeof t,r="string"===e||Array.isArray(t);return"boolean"==typeof n&&r?n?this.addClass(t):this.removeClass(t):m(t)?this.each(function(e){M(this).toggleClass(t.call(this,e,yn(this),n),n)}):this.each(function(){var n,i,o,u;if(r)for(i=0,o=M(this),u=mn(t);n=u[i++];)o.hasClass(n)?o.removeClass(n):o.addClass(n);else void 0!==t&&"boolean"!==e||((n=yn(this))&&J.set(this,"__className__",n),this.setAttribute&&this.setAttribute("class",n||!1===t?"":J.get(this,"__className__")||""))})},hasClass:function(t){var n,e,r=0;for(n=" "+t+" ";e=this[r++];)if(1===e.nodeType&&(" "+gn(yn(e))+" ").indexOf(n)>-1)return!0;return!1}});var bn=/\r/g;M.fn.extend({val:function(t){var n,e,r,i=this[0];return arguments.length?(r=m(t),this.each(function(e){var i;1===this.nodeType&&(null==(i=r?t.call(this,e,M(this).val()):t)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=M.map(i,function(t){return null==t?"":t+""})),(n=M.valHooks[this.type]||M.valHooks[this.nodeName.toLowerCase()])&&"set"in n&&void 0!==n.set(this,i,"value")||(this.value=i))})):i?(n=M.valHooks[i.type]||M.valHooks[i.nodeName.toLowerCase()])&&"get"in n&&void 0!==(e=n.get(i,"value"))?e:"string"==typeof(e=i.value)?e.replace(bn,""):null==e?"":e:void 0}}),M.extend({valHooks:{option:{get:function(t){var n=M.find.attr(t,"value");return null!=n?n:gn(M.text(t))}},select:{get:function(t){var n,e,r,i=t.options,o=t.selectedIndex,u="select-one"===t.type,a=u?null:[],c=u?o+1:i.length;for(r=o<0?c:u?o:0;r<c;r++)if(((e=i[r]).selected||r===o)&&!e.disabled&&(!e.parentNode.disabled||!N(e.parentNode,"optgroup"))){if(n=M(e).val(),u)return n;a.push(n)}return a},set:function(t,n){for(var e,r,i=t.options,o=M.makeArray(n),u=i.length;u--;)((r=i[u]).selected=M.inArray(M.valHooks.option.get(r),o)>-1)&&(e=!0);return e||(t.selectedIndex=-1),o}}}}),M.each(["radio","checkbox"],function(){M.valHooks[this]={set:function(t,n){if(Array.isArray(n))return t.checked=M.inArray(M(t).val(),n)>-1}},y.checkOn||(M.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),y.focusin="onfocusin"in e;var _n=/^(?:focusinfocus|focusoutblur)$/,xn=function(t){t.stopPropagation()};M.extend(M.event,{trigger:function(t,n,r,i){var o,a,c,f,s,l,h,d,v=[r||u],g=p.call(t,"type")?t.type:t,y=p.call(t,"namespace")?t.namespace.split("."):[];if(a=d=c=r=r||u,3!==r.nodeType&&8!==r.nodeType&&!_n.test(g+M.event.triggered)&&(g.indexOf(".")>-1&&(y=g.split("."),g=y.shift(),y.sort()),s=g.indexOf(":")<0&&"on"+g,(t=t[M.expando]?t:new M.Event(g,"object"==typeof t&&t)).isTrigger=i?2:3,t.namespace=y.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+y.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),n=null==n?[t]:M.makeArray(n,[t]),h=M.event.special[g]||{},i||!h.trigger||!1!==h.trigger.apply(r,n))){if(!i&&!h.noBubble&&!b(r)){for(f=h.delegateType||g,_n.test(f+g)||(a=a.parentNode);a;a=a.parentNode)v.push(a),c=a;c===(r.ownerDocument||u)&&v.push(c.defaultView||c.parentWindow||e)}for(o=0;(a=v[o++])&&!t.isPropagationStopped();)d=a,t.type=o>1?f:h.bindType||g,(l=(J.get(a,"events")||{})[t.type]&&J.get(a,"handle"))&&l.apply(a,n),(l=s&&a[s])&&l.apply&&Z(a)&&(t.result=l.apply(a,n),!1===t.result&&t.preventDefault());return t.type=g,i||t.isDefaultPrevented()||h._default&&!1!==h._default.apply(v.pop(),n)||!Z(r)||s&&m(r[g])&&!b(r)&&((c=r[s])&&(r[s]=null),M.event.triggered=g,t.isPropagationStopped()&&d.addEventListener(g,xn),r[g](),t.isPropagationStopped()&&d.removeEventListener(g,xn),M.event.triggered=void 0,c&&(r[s]=c)),t.result}},simulate:function(t,n,e){var r=M.extend(new M.Event,e,{type:t,isSimulated:!0});M.event.trigger(r,null,n)}}),M.fn.extend({trigger:function(t,n){return this.each(function(){M.event.trigger(t,n,this)})},triggerHandler:function(t,n){var e=this[0];if(e)return M.event.trigger(t,n,e,!0)}}),y.focusin||M.each({focus:"focusin",blur:"focusout"},function(t,n){var e=function(t){M.event.simulate(n,t.target,M.event.fix(t))};M.event.special[n]={setup:function(){var r=this.ownerDocument||this,i=J.access(r,n);i||r.addEventListener(t,e,!0),J.access(r,n,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=J.access(r,n)-1;i?J.access(r,n,i):(r.removeEventListener(t,e,!0),J.remove(r,n))}}});var wn=e.location,Mn=Date.now(),Tn=/\?/;M.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(t){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||M.error("Invalid XML: "+t),n};var Cn=/\[\]$/,Sn=/\r?\n/g,An=/^(?:submit|button|image|reset|file)$/i,kn=/^(?:input|select|textarea|keygen)/i;function En(t,n,e,r){var i;if(Array.isArray(n))M.each(n,function(n,i){e||Cn.test(t)?r(t,i):En(t+"["+("object"==typeof i&&null!=i?n:"")+"]",i,e,r)});else if(e||"object"!==w(n))r(t,n);else for(i in n)En(t+"["+i+"]",n[i],e,r)}M.param=function(t,n){var e,r=[],i=function(t,n){var e=m(n)?n():n;r[r.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==e?"":e)};if(Array.isArray(t)||t.jquery&&!M.isPlainObject(t))M.each(t,function(){i(this.name,this.value)});else for(e in t)En(e,t[e],n,i);return r.join("&")},M.fn.extend({serialize:function(){return M.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=M.prop(this,"elements");return t?M.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!M(this).is(":disabled")&&kn.test(this.nodeName)&&!An.test(t)&&(this.checked||!ht.test(t))}).map(function(t,n){var e=M(this).val();return null==e?null:Array.isArray(e)?M.map(e,function(t){return{name:n.name,value:t.replace(Sn,"\r\n")}}):{name:n.name,value:e.replace(Sn,"\r\n")}}).get()}});var Nn=/%20/g,Dn=/#.*$/,On=/([?&])_=[^&]*/,Rn=/^(.*?):[ \t]*([^\r\n]*)$/gm,jn=/^(?:GET|HEAD)$/,Pn=/^\/\//,$n={},In={},Ln="*/".concat("*"),zn=u.createElement("a");function qn(t){return function(n,e){"string"!=typeof n&&(e=n,n="*");var r,i=0,o=n.toLowerCase().match(L)||[];if(m(e))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(t[r]=t[r]||[]).unshift(e)):(t[r]=t[r]||[]).push(e)}}function Bn(t,n,e,r){var i={},o=t===In;function u(a){var c;return i[a]=!0,M.each(t[a]||[],function(t,a){var f=a(n,e,r);return"string"!=typeof f||o||i[f]?o?!(c=f):void 0:(n.dataTypes.unshift(f),u(f),!1)}),c}return u(n.dataTypes[0])||!i["*"]&&u("*")}function Un(t,n){var e,r,i=M.ajaxSettings.flatOptions||{};for(e in n)void 0!==n[e]&&((i[e]?t:r||(r={}))[e]=n[e]);return r&&M.extend(!0,t,r),t}zn.href=wn.href,M.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:wn.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(wn.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ln,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":M.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,n){return n?Un(Un(t,M.ajaxSettings),n):Un(M.ajaxSettings,t)},ajaxPrefilter:qn($n),ajaxTransport:qn(In),ajax:function(t,n){"object"==typeof t&&(n=t,t=void 0),n=n||{};var r,i,o,a,c,f,s,l,h,d,p=M.ajaxSetup({},n),v=p.context||p,g=p.context&&(v.nodeType||v.jquery)?M(v):M.event,y=M.Deferred(),m=M.Callbacks("once memory"),b=p.statusCode||{},_={},x={},w="canceled",T={readyState:0,getResponseHeader:function(t){var n;if(s){if(!a)for(a={};n=Rn.exec(o);)a[n[1].toLowerCase()]=n[2];n=a[t.toLowerCase()]}return null==n?null:n},getAllResponseHeaders:function(){return s?o:null},setRequestHeader:function(t,n){return null==s&&(t=x[t.toLowerCase()]=x[t.toLowerCase()]||t,_[t]=n),this},overrideMimeType:function(t){return null==s&&(p.mimeType=t),this},statusCode:function(t){var n;if(t)if(s)T.always(t[T.status]);else for(n in t)b[n]=[b[n],t[n]];return this},abort:function(t){var n=t||w;return r&&r.abort(n),C(0,n),this}};if(y.promise(T),p.url=((t||p.url||wn.href)+"").replace(Pn,wn.protocol+"//"),p.type=n.method||n.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(L)||[""],null==p.crossDomain){f=u.createElement("a");try{f.href=p.url,f.href=f.href,p.crossDomain=zn.protocol+"//"+zn.host!=f.protocol+"//"+f.host}catch(t){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=M.param(p.data,p.traditional)),Bn($n,p,n,T),s)return T;for(h in(l=M.event&&p.global)&&0==M.active++&&M.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!jn.test(p.type),i=p.url.replace(Dn,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(Nn,"+")):(d=p.url.slice(i.length),p.data&&(p.processData||"string"==typeof p.data)&&(i+=(Tn.test(i)?"&":"?")+p.data,delete p.data),!1===p.cache&&(i=i.replace(On,"$1"),d=(Tn.test(i)?"&":"?")+"_="+Mn+++d),p.url=i+d),p.ifModified&&(M.lastModified[i]&&T.setRequestHeader("If-Modified-Since",M.lastModified[i]),M.etag[i]&&T.setRequestHeader("If-None-Match",M.etag[i])),(p.data&&p.hasContent&&!1!==p.contentType||n.contentType)&&T.setRequestHeader("Content-Type",p.contentType),T.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Ln+"; q=0.01":""):p.accepts["*"]),p.headers)T.setRequestHeader(h,p.headers[h]);if(p.beforeSend&&(!1===p.beforeSend.call(v,T,p)||s))return T.abort();if(w="abort",m.add(p.complete),T.done(p.success),T.fail(p.error),r=Bn(In,p,n,T)){if(T.readyState=1,l&&g.trigger("ajaxSend",[T,p]),s)return T;p.async&&p.timeout>0&&(c=e.setTimeout(function(){T.abort("timeout")},p.timeout));try{s=!1,r.send(_,C)}catch(t){if(s)throw t;C(-1,t)}}else C(-1,"No Transport");function C(t,n,u,a){var f,h,d,_,x,w=n;s||(s=!0,c&&e.clearTimeout(c),r=void 0,o=a||"",T.readyState=t>0?4:0,f=t>=200&&t<300||304===t,u&&(_=function(t,n,e){for(var r,i,o,u,a=t.contents,c=t.dataTypes;"*"===c[0];)c.shift(),void 0===r&&(r=t.mimeType||n.getResponseHeader("Content-Type"));if(r)for(i in a)if(a[i]&&a[i].test(r)){c.unshift(i);break}if(c[0]in e)o=c[0];else{for(i in e){if(!c[0]||t.converters[i+" "+c[0]]){o=i;break}u||(u=i)}o=o||u}if(o)return o!==c[0]&&c.unshift(o),e[o]}(p,T,u)),_=function(t,n,e,r){var i,o,u,a,c,f={},s=t.dataTypes.slice();if(s[1])for(u in t.converters)f[u.toLowerCase()]=t.converters[u];for(o=s.shift();o;)if(t.responseFields[o]&&(e[t.responseFields[o]]=n),!c&&r&&t.dataFilter&&(n=t.dataFilter(n,t.dataType)),c=o,o=s.shift())if("*"===o)o=c;else if("*"!==c&&c!==o){if(!(u=f[c+" "+o]||f["* "+o]))for(i in f)if((a=i.split(" "))[1]===o&&(u=f[c+" "+a[0]]||f["* "+a[0]])){!0===u?u=f[i]:!0!==f[i]&&(o=a[0],s.unshift(a[1]));break}if(!0!==u)if(u&&t.throws)n=u(n);else try{n=u(n)}catch(t){return{state:"parsererror",error:u?t:"No conversion from "+c+" to "+o}}}return{state:"success",data:n}}(p,_,T,f),f?(p.ifModified&&((x=T.getResponseHeader("Last-Modified"))&&(M.lastModified[i]=x),(x=T.getResponseHeader("etag"))&&(M.etag[i]=x)),204===t||"HEAD"===p.type?w="nocontent":304===t?w="notmodified":(w=_.state,h=_.data,f=!(d=_.error))):(d=w,!t&&w||(w="error",t<0&&(t=0))),T.status=t,T.statusText=(n||w)+"",f?y.resolveWith(v,[h,w,T]):y.rejectWith(v,[T,w,d]),T.statusCode(b),b=void 0,l&&g.trigger(f?"ajaxSuccess":"ajaxError",[T,p,f?h:d]),m.fireWith(v,[T,w]),l&&(g.trigger("ajaxComplete",[T,p]),--M.active||M.event.trigger("ajaxStop")))}return T},getJSON:function(t,n,e){return M.get(t,n,e,"json")},getScript:function(t,n){return M.get(t,void 0,n,"script")}}),M.each(["get","post"],function(t,n){M[n]=function(t,e,r,i){return m(e)&&(i=i||r,r=e,e=void 0),M.ajax(M.extend({url:t,type:n,dataType:i,data:e,success:r},M.isPlainObject(t)&&t))}}),M._evalUrl=function(t){return M.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},M.fn.extend({wrapAll:function(t){var n;return this[0]&&(m(t)&&(t=t.call(this[0])),n=M(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&n.insertBefore(this[0]),n.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(t){return m(t)?this.each(function(n){M(this).wrapInner(t.call(this,n))}):this.each(function(){var n=M(this),e=n.contents();e.length?e.wrapAll(t):n.append(t)})},wrap:function(t){var n=m(t);return this.each(function(e){M(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(t){return this.parent(t).not("body").each(function(){M(this).replaceWith(this.childNodes)}),this}}),M.expr.pseudos.hidden=function(t){return!M.expr.pseudos.visible(t)},M.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},M.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(t){}};var Fn={0:200,1223:204},Hn=M.ajaxSettings.xhr();y.cors=!!Hn&&"withCredentials"in Hn,y.ajax=Hn=!!Hn,M.ajaxTransport(function(t){var n,r;if(y.cors||Hn&&!t.crossDomain)return{send:function(i,o){var u,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(u in t.xhrFields)a[u]=t.xhrFields[u];for(u in t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)a.setRequestHeader(u,i[u]);n=function(t){return function(){n&&(n=r=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(Fn[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=n(),r=a.onerror=a.ontimeout=n("error"),void 0!==a.onabort?a.onabort=r:a.onreadystatechange=function(){4===a.readyState&&e.setTimeout(function(){n&&r()})},n=n("abort");try{a.send(t.hasContent&&t.data||null)}catch(t){if(n)throw t}},abort:function(){n&&n()}}}),M.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),M.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return M.globalEval(t),t}}}),M.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),M.ajaxTransport("script",function(t){var n,e;if(t.crossDomain)return{send:function(r,i){n=M("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",e=function(t){n.remove(),e=null,t&&i("error"===t.type?404:200,t.type)}),u.head.appendChild(n[0])},abort:function(){e&&e()}}});var Wn,Yn=[],Vn=/(=)\?(?=&|$)|\?\?/;M.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Yn.pop()||M.expando+"_"+Mn++;return this[t]=!0,t}}),M.ajaxPrefilter("json jsonp",function(t,n,r){var i,o,u,a=!1!==t.jsonp&&(Vn.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Vn.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=m(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Vn,"$1"+i):!1!==t.jsonp&&(t.url+=(Tn.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return u||M.error(i+" was not called"),u[0]},t.dataTypes[0]="json",o=e[i],e[i]=function(){u=arguments},r.always(function(){void 0===o?M(e).removeProp(i):e[i]=o,t[i]&&(t.jsonpCallback=n.jsonpCallback,Yn.push(i)),u&&m(o)&&o(u[0]),u=o=void 0}),"script"}),y.createHTMLDocument=((Wn=u.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Wn.childNodes.length),M.parseHTML=function(t,n,e){return"string"!=typeof t?[]:("boolean"==typeof n&&(e=n,n=!1),n||(y.createHTMLDocument?((r=(n=u.implementation.createHTMLDocument("")).createElement("base")).href=u.location.href,n.head.appendChild(r)):n=u),o=!e&&[],(i=D.exec(t))?[n.createElement(i[1])]:(i=xt([t],n,o),o&&o.length&&M(o).remove(),M.merge([],i.childNodes)));var r,i,o},M.fn.load=function(t,n,e){var r,i,o,u=this,a=t.indexOf(" ");return a>-1&&(r=gn(t.slice(a)),t=t.slice(0,a)),m(n)?(e=n,n=void 0):n&&"object"==typeof n&&(i="POST"),u.length>0&&M.ajax({url:t,type:i||"GET",dataType:"html",data:n}).done(function(t){o=arguments,u.html(r?M("<div>").append(M.parseHTML(t)).find(r):t)}).always(e&&function(t,n){u.each(function(){e.apply(this,o||[t.responseText,n,t])})}),this},M.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,n){M.fn[n]=function(t){return this.on(n,t)}}),M.expr.pseudos.animated=function(t){return M.grep(M.timers,function(n){return t===n.elem}).length},M.offset={setOffset:function(t,n,e){var r,i,o,u,a,c,f=M.css(t,"position"),s=M(t),l={};"static"===f&&(t.style.position="relative"),a=s.offset(),o=M.css(t,"top"),c=M.css(t,"left"),("absolute"===f||"fixed"===f)&&(o+c).indexOf("auto")>-1?(u=(r=s.position()).top,i=r.left):(u=parseFloat(o)||0,i=parseFloat(c)||0),m(n)&&(n=n.call(t,e,M.extend({},a))),null!=n.top&&(l.top=n.top-a.top+u),null!=n.left&&(l.left=n.left-a.left+i),"using"in n?n.using.call(t,l):s.css(l)}},M.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(n){M.offset.setOffset(this,t,n)});var n,e,r=this[0];return r?r.getClientRects().length?(n=r.getBoundingClientRect(),e=r.ownerDocument.defaultView,{top:n.top+e.pageYOffset,left:n.left+e.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,n,e,r=this[0],i={top:0,left:0};if("fixed"===M.css(r,"position"))n=r.getBoundingClientRect();else{for(n=this.offset(),e=r.ownerDocument,t=r.offsetParent||e.documentElement;t&&(t===e.body||t===e.documentElement)&&"static"===M.css(t,"position");)t=t.parentNode;t&&t!==r&&1===t.nodeType&&((i=M(t).offset()).top+=M.css(t,"borderTopWidth",!0),i.left+=M.css(t,"borderLeftWidth",!0))}return{top:n.top-i.top-M.css(r,"marginTop",!0),left:n.left-i.left-M.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===M.css(t,"position");)t=t.offsetParent;return t||wt})}}),M.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,n){var e="pageYOffset"===n;M.fn[t]=function(r){return W(this,function(t,r,i){var o;if(b(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===i)return o?o[n]:t[r];o?o.scrollTo(e?o.pageXOffset:i,e?i:o.pageYOffset):t[r]=i},t,r,arguments.length)}}),M.each(["top","left"],function(t,n){M.cssHooks[n]=Ht(y.pixelPosition,function(t,e){if(e)return e=Ft(t,n),qt.test(e)?M(t).position()[n]+"px":e})}),M.each({Height:"height",Width:"width"},function(t,n){M.each({padding:"inner"+t,content:n,"":"outer"+t},function(e,r){M.fn[r]=function(i,o){var u=arguments.length&&(e||"boolean"!=typeof i),a=e||(!0===i||!0===o?"margin":"border");return W(this,function(n,e,i){var o;return b(n)?0===r.indexOf("outer")?n["inner"+t]:n.document.documentElement["client"+t]:9===n.nodeType?(o=n.documentElement,Math.max(n.body["scroll"+t],o["scroll"+t],n.body["offset"+t],o["offset"+t],o["client"+t])):void 0===i?M.css(n,e,a):M.style(n,e,i,a)},n,u?i:void 0,u)}})}),M.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,n){M.fn[n]=function(t,e){return arguments.length>0?this.on(n,null,t,e):this.trigger(n)}}),M.fn.extend({hover:function(t,n){return this.mouseenter(t).mouseleave(n||t)}}),M.fn.extend({bind:function(t,n,e){return this.on(t,null,n,e)},unbind:function(t,n){return this.off(t,null,n)},delegate:function(t,n,e,r){return this.on(n,t,e,r)},undelegate:function(t,n,e){return 1===arguments.length?this.off(t,"**"):this.off(n,t||"**",e)}}),M.proxy=function(t,n){var e,r,i;if("string"==typeof n&&(e=t[n],n=t,t=e),m(t))return r=c.call(arguments,2),(i=function(){return t.apply(n||this,r.concat(c.call(arguments)))}).guid=t.guid=t.guid||M.guid++,i},M.holdReady=function(t){t?M.readyWait++:M.ready(!0)},M.isArray=Array.isArray,M.parseJSON=JSON.parse,M.nodeName=N,M.isFunction=m,M.isWindow=b,M.camelCase=G,M.type=w,M.now=Date.now,M.isNumeric=function(t){var n=M.type(t);return("number"===n||"string"===n)&&!isNaN(t-parseFloat(t))},void 0===(r=function(){return M}.apply(n,[]))||(t.exports=r);var Xn=e.jQuery,Gn=e.$;return M.noConflict=function(t){return e.$===M&&(e.$=Gn),t&&e.jQuery===M&&(e.jQuery=Xn),M},i||(e.jQuery=e.$=M),M})},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function t(){this.consumers={}}return t.get=function(){return t.instance},t.prototype.publish=function(t,n){var e=this.consumers[t];e&&e.forEach(function(t){return t(n)})},t.prototype.subscribe=function(t,n){var e=this.consumers[t];e||(e=[],this.consumers[t]=e),e.push(n)},t.instance=new t,t}();n.default=r},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(2),i=e(0),o=e(3),u=e(4),a=e(8),c=e(9),f=e(10),s=e(12),l=e(13),h=e(14);e(15),e(16),e(17),e(18);var d=e(1);(new(function(){function t(){this.aiSettingsDefault={c:{timeout:2,confidence:1.5,iterations:15e3},t:{timeout:3,confidence:2,iterations:15e3}}}return t.prototype.init=function(){var t=this;o("#restart").click(this.restart.bind(this)),o("#analyze").click(this.analyze.bind(this)),o("#save").click(this.save.bind(this)),o("#load").click(this.load.bind(this)),o("#settings").click(this.configure.bind(this)),o("#game").change(this.restart.bind(this)),o("#board").click(this.onBoardClick.bind(this)),o("#board").contextmenu(this.onBoardRightClick.bind(this)),o("#form-apply").click(this.formApply.bind(this)),o("#form-reset").click(this.formReset.bind(this)),u.default.get().subscribe("move-selected",function(n){return t.onMoveSelected(n)}),this.barChart=new a.default("#moves-chart"),this.lineChart=new c.default("#line-chart"),this.loadSettings(),this.restart(),this.load()},t.prototype.onMoveSelected=function(t){t>=0?this.boardView.refresh({move:t,player:this.ai.player}):this.boardView.refresh()},t.prototype.onBoardClick=function(t){var n=this.getClickedCell(t);this.board.win||this.board.get(n.x,n.y)||this.timer||(this.makeMove(n.x,n.y),this.board.win||this.analyze())},t.prototype.onBoardRightClick=function(t){t.preventDefault();var n=this.getClickedCell(t);this.board.get(n.x,n.y)&&!this.timer&&(this.board.clear(n.x,n.y),this.player=d.Board.nextPlayer(this.player),this.refresh())},t.prototype.getClickedCell=function(t){var n=o("#board").offset(),e=Math.floor((t.pageY-n.top)/this.boardView.cellSize);return{x:Math.floor((t.pageX-n.left)/this.boardView.cellSize),y:e}},t.prototype.makeMove=function(t,n){var e=this.board.makeMove(t,n,this.player);this.board.findWinner(e.x,e.y),this.board.win||(this.player=d.Board.nextPlayer(this.player)),this.refresh()},t.prototype.analyze=function(){this.timer?this.stop=!0:(this.lineChart.reset(),this.iteration=0,this.ai=new h.MTS_AI(this.board,this.player),this.stop=!1,this.start=(new Date).getTime(),this.confidences=[],this.timer=r.timer(this.onTimer.bind(this)),o("#analyze > i").attr("class","fa fa-stop"))},t.prototype.onTimer=function(t){try{for(var n=(new Date).getTime();(new Date).getTime()-n<50;)this.ai.step(),this.iteration++;this.aiResult=this.ai.getResult();var e=((new Date).getTime()-this.start)/1e3;this.barChart.refresh(this.aiResult),this.boardView.refresh({move:this.aiResult.moves[0].move,player:this.ai.player}),this.lineChart.addDataPoint(this.aiResult.confidence),o("#iterations").text(this.iteration),o("#confidence").text(this.format(this.aiResult.confidence,2)),o("#time").text(this.format(e,2));var r=this.getSettings();if(this.stop||1===this.aiResult.moves.length||r.timeout>0&&t>=1e3*r.timeout||r.confidence>0&&this.aiResult.confidence>=r.confidence||r.iterations>0&&this.iteration>=r.iterations){var i=this.board.cell(this.aiResult.moves[0].move);this.makeMove(i.x,i.y),this.stopTimer()}}catch(t){console.error(t),this.stopTimer()}},t.prototype.stopTimer=function(){this.timer&&(this.timer.stop(),this.timer=void 0,o("#analyze > i").attr("class","fa fa-play"))},t.prototype.format=function(t,n){return t.toFixed(n)},t.prototype.refresh=function(){var t=this;this.boardView.refresh(),r.select("#player").selectAll("*").remove(),r.select("#player").append("div").classed("cell",!0).classed("win",function(n){return null!=t.board.win}).append("i").attr("class","fa").classed("fa-close",function(n){return 1==t.player}).classed("fa-circle-o",function(n){return 2==t.player})},t.prototype.restart=function(){this.stopTimer();var t=o("#game").val();"t"==t?this.board=new f.default:"c"==t&&(this.board=new s.default),this.board.init(),this.player=1,this.resetState()},t.prototype.resetState=function(){this.aiResult=void 0,this.boardView=new l.default("#board",this.board),this.barChart.refresh(),this.lineChart.reset(),this.refresh()},t.prototype.save=function(){this.stopTimer();var t={game:o("#game").val(),board:this.board,player:this.player};window.localStorage.setItem("state",JSON.stringify(t))},t.prototype.load=function(){this.stopTimer();var t=window.localStorage.getItem("state");if(t){var n=JSON.parse(t);o("#game").val(n.game),this.player=n.player,"t"==n.game?this.board=new f.default:"c"==n.game&&(this.board=new s.default),this.board.deserialize(n.board),this.resetState()}},t.prototype.loadSettings=function(){var t=window.localStorage.getItem("aiSettings");this.aiSettings=t?JSON.parse(t):i.cloneDeep(this.aiSettingsDefault)},t.prototype.getSettings=function(){var t=o("#game").val();return this.aiSettings[t]},t.prototype.configure=function(){this.stopTimer();var t=this.getSettings();o("#form-timeout").val(t.timeout),o("#form-confidence").val(t.confidence),o("#form-iterations").val(t.iterations),o("#config-dialog").modal()},t.prototype.formApply=function(){var t=this.getSettings();t.timeout=o("#form-timeout").val(),t.confidence=o("#form-confidence").val(),t.iterations=o("#form-iterations").val(),window.localStorage.setItem("aiSettings",JSON.stringify(this.aiSettings)),o("#config-dialog").modal("hide")},t.prototype.formReset=function(){var t=o("#game").val(),n=this.aiSettingsDefault[t];o("#form-timeout").val(n.timeout),o("#form-confidence").val(n.confidence),o("#form-iterations").val(n.iterations)},t}())).init()},function(t,n){var e;e=function(){return this}();try{e=e||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(e=window)}t.exports=e},function(t,n){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(4),i=e(2),o=e(3),u=function(){function t(t){this.selector=t,o(t).mousemove(this.onMouseMove.bind(this)),o(t).mouseleave(this.onMouseLeave.bind(this))}return t.prototype.onMouseMove=function(t){if(this.aiResult&&this.aiResult.moves.length){var n=this.aiResult.moves,e=o(this.selector).offset(),r=o(this.selector).width()/n.length,i=Math.floor((t.pageX-e.left)/r);i<n.length&&this.setSelection(n[i].move)}},t.prototype.onMouseLeave=function(t){this.setSelection(void 0)},t.prototype.setSelection=function(t){this.selection=t,this.refresh(this.aiResult),r.default.get().publish("move-selected",this.selection)},t.prototype.refresh=function(t){var n=this;this.aiResult=t;var e=t?t.moves:[],r=i.select(this.selector),o=r.selectAll("div").data(e,function(t){return t.move});o.exit().remove(),o.enter().append("div").attr("data-id",function(t,n){return t.move}),r.selectAll("div").data(e,function(t){return t.move}).merge(o).style("height",function(n){return n.value/t.max*100+"%"}).classed("selected",function(t){return t.move===n.selection}).order()},t}();n.default=u},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(2),i=function(){function t(t){this.data=[],this.minY=Number.MAX_VALUE,this.maxY=Number.MIN_VALUE;var n=r.select(t),e=n.node(),i=2,o=0,u=2,a=2,c=e.offsetWidth-a-o,f=e.offsetHeight-i-u;this.xScale=r.scaleLinear().domain([0,0]).range([0,c]),this.yScale=r.scaleLinear().domain([0,0]).range([f,0]),this.svg=n.append("svg").attr("width",c+a+o).attr("height",f+i+u).append("g").attr("transform","translate("+a+","+i+")"),this.path=this.svg.append("path").attr("class","line").style("fill","none").style("stroke","black").style("stroke-width","1.5px")}return t.prototype.reset=function(){this.data=[],this.redraw(),this.minY=Number.MAX_VALUE,this.maxY=Number.MIN_VALUE},t.prototype.addDataPoint=function(t){this.minY=Math.min(this.minY,t),this.maxY=Math.max(this.maxY,t),this.data.push({x:this.data.length+1,y:t}),this.redraw()},t.prototype.redraw=function(){var t=this;this.xScale.domain([1,this.data.length]),this.yScale.domain([this.minY,this.maxY]);var n=r.line().x(function(n){return t.xScale(n.x)}).y(function(n){return t.yScale(n.y)});this.path.datum(this.data).attr("d",n)},t}();n.default=i},function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(t,n)},function(t,n){function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)});Object.defineProperty(n,"__esModule",{value:!0});var o=e(0),u=function(t){function n(){var n=t.call(this)||this;return n.resize(15,15,5),n}return i(n,t),n.prototype.init=function(){var t=this.index(Math.floor(this.width/2),Math.floor(this.height/2));this.moves.add(t)},n.prototype.clone=function(){var t=new n;return t.resize(this.width,this.height,this.winSize),t.cells=o.clone(this.cells),t.moves=this.moves.clone(),t},n.prototype.makeMove=function(t,n,e){return this.set(t,n,e),{x:t,y:n}},n.prototype.addMoves=function(t,n){for(var e=Math.max(0,t-1),r=Math.max(0,n-1),i=Math.min(this.width-1,t+1),o=Math.min(this.height-1,n+1),u=e;u<=i;u++)for(var a=r;a<=o;a++){var c=this.index(u,a);this.cells[c]?this.moves.remove(c):this.moves.add(c)}},n.prototype.findAllMoves=function(){for(var t=[],n=this.width*this.height,e=0;e<n;e++)this.cells[e]||t.push(e);return t},n.prototype.evaluate=function(){for(var t=0,n=0;n<this.height;n++)t+=this.evaluateRow(0,n,1,0);for(var e=0;e<this.width;e++)t+=this.evaluateRow(e,0,0,1);for(n=0;n<this.height;n++)t+=this.evaluateRow(0,n,1,-1);for(e=1;e<this.width;e++)t+=this.evaluateRow(e,this.height-1,1,-1);for(n=0;n<this.height;n++)t+=this.evaluateRow(0,n,1,1);for(e=1;e<this.width;e++)t+=this.evaluateRow(e,0,1,1);return t},n.prototype.evaluateRow=function(t,n,e,r){for(var i=0,o=this.get(t-e,n-r),u=void 0,a=1;;){var c=this.get(t,n);if(c&&c===u?a++:a>1?(i+=this.evaluateSequence(u,a,o,c),u=c,a=1,o=this.get(t-e,n-r)):c&&(u=c,a=1,o=this.get(t-e,n-r)),n+=r,(t+=e)<0||t>=this.width||n<0||n>=this.height){a>1&&(i+=this.evaluateSequence(u,a,o,c));break}}return i},n.prototype.evaluateSequence=function(t,n,e,r){var i=0;return n>=5?i=1e6:4===n?void 0===e&&void 0===r?i=8:void 0!==e&&void 0!==r||(i=4):3===n?void 0===e&&void 0===r?i=4:void 0!==e&&void 0!==r||(i=2):2===n&&(void 0===e&&void 0===r?i=2:void 0!==e&&void 0!==r||(i=1)),1==t?i:-i},n}(e(1).Board);n.default=u},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(0),i=function(){function t(){this.map={},this.keys=[]}return t.prototype.clone=function(){var n=new t;return n.map=r.clone(this.map),n.keys=r.clone(this.keys),n},t.prototype.deserialize=function(t){this.map=t.map,this.keys=t.keys},t.prototype.add=function(t){void 0===this.map[t]&&(this.keys.push(t),this.map[t]=this.keys.length-1)},t.prototype.remove=function(t){var n=this.map[t];if(n>=0){delete this.map[t],this.keys.splice(n,1);for(var e=0;e<this.keys.length;e++)this.map[this.keys[e]]=e}},t.prototype.getKeys=function(){return this.keys},t}();n.default=i},function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(t,n)},function(t,n){function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)});Object.defineProperty(n,"__esModule",{value:!0});var o=e(0),u=function(t){function n(){var n=t.call(this)||this;return n.resize(7,6,4),n}return i(n,t),n.prototype.init=function(){for(var t=0;t<this.width;t++)this.moves.add(this.index(t,this.height-1))},n.prototype.clone=function(){var t=new n;return t.cells=o.clone(this.cells),t.moves=this.moves.clone(),t},n.prototype.makeMove=function(t,n,e){for(var r=this.height-1;r>=0;r--)if(!this.get(t,r))return this.set(t,r,e),{x:t,y:r};return null},n.prototype.addMoves=function(t,n){var e=this.index(t,n);this.moves.remove(e),n>0&&this.moves.add(this.index(t,n-1))},n.prototype.evaluate=function(){return 0},n}(e(1).Board);n.default=u},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(0),i=e(2),o=function(){function t(t,n){this.cellSize=30,this.selector=t,this.board=n,this.width=n.width*this.cellSize,this.height=n.height*this.cellSize,this.drawGrid(),this.refresh()}return t.prototype.drawGrid=function(){var t=i.select(this.selector);t.selectAll("*").remove();for(var n=t.append("div").style("width",this.width+"px").style("height",this.height+"px"),e=-1;e<this.board.height;e++)n.append("div").classed("grid-row",!0).style("width",this.width+"px").style("top",e*this.cellSize+"px");for(e=-1;e<this.board.width;e++)n.append("div").classed("grid-column",!0).style("height",this.height+"px").style("left",e*this.cellSize+"px")},t.prototype.refresh=function(t){var n=this,e=i.select(this.selector),o=[],u=this,a=!1;r.forOwn(this.board.cells,function(n,e){o.push({id:e,cell:u.board.cell(e),value:n,win:u.board.win&&u.board.win.cells[e],selected:t&&e===t.move}),t&&e===t.move&&(a=!0)}),t&&!a&&o.push({id:t.move,cell:u.board.cell(t.move),value:t.player,selected:!0});var c=e.selectAll(".cell").data(o,function(t){return t.id});c.exit().remove(),c.enter().append("div").classed("cell",!0).classed("win",function(t){return t.win}).classed("selected",function(t){return t.selected}).style("left",function(t){return t.cell.x*n.cellSize+"px"}).style("top",function(t){return t.cell.y*n.cellSize+"px"}).append("i").attr("class","fa").classed("fa-close",function(t){return 1==t.value}).classed("fa-circle-o",function(t){return 2==t.value}),e.selectAll(".cell").data(o,function(t){return t.id}).merge(c).classed("win",function(t){return t.win}).classed("selected",function(t){return t.selected})},t}();n.default=o},function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(t,n)},function(t,n){function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)});Object.defineProperty(n,"__esModule",{value:!0});var o=e(0),u=e(1),a=o,c=function(){return function(){}}();n.AI=c;var f=function(t){function n(n,e){var r=t.call(this)||this;return r.evaluation=!1,r.player=e,r.originalBoard=n,r.node=new l(null,u.Board.nextPlayer(e),null),r.playCount=0,r}return i(n,t),n.prototype.step=function(){this.board=this.originalBoard.clone();var t=this.selection();t||(this.expansion(),t=this.simulation()),this.backpropogation(t),this.playCount++},n.prototype.getResult=function(){var t,n=this,e={};return t=o.map(this.node.children,function(t){return{move:t.move,value:t.playCount/n.playCount}}),e.max=o.maxBy(t,"value").value,e.mean=a.meanBy(t,"value"),e.confidence=(e.max-e.mean)/e.mean,e.moves=o.orderBy(t,"value","desc"),e},n.prototype.selection=function(){var t=this;if(this.node.parent)throw new Error("invalid start node: "+this.node);for(var n=function(){e.node.children.forEach(function(n){return n.calculateUCB(t.node.playCount)});var n,r=-Number.MAX_VALUE;e.node.children.forEach(function(t){t.ucb>r&&(r=t.ucb,n=t)}),n?(e.board.setIndex(n.move,n.player),e.node=n):console.log("error")},e=this;this.node.children&&this.node.children.length;)n();return null!==this.node.move&&null===this.node.win&&(this.node.win=this.board.findWinnerAt(this.node.move)),this.node.win},n.prototype.expansion=function(){var t=this;if(null===this.node.children){this.node.children=[];var n=this.board.getMoves();if(n.length){var e=u.Board.nextPlayer(this.node.player);n.forEach(function(n){var r=new l(t.node,e,n);if(t.node.children.push(r),t.evaluation&&0===t.node.layer){var i=t.board.clone();i.setIndex(r.move,e),r.evaluation=i.evaluate(),2==e&&(r.evaluation=-r.evaluation),console.log("eval",r.evaluation)}});var r=Math.floor(Math.random()*this.node.children.length),i=this.node.children[r];this.board.setIndex(i.move,i.player),this.node=i}}},n.prototype.simulation=function(){var t=this.board.findWinnerAt(this.node.move);return t||this.board.randomPlayout(u.Board.nextPlayer(this.node.player))},n.prototype.backpropogation=function(t){for(;this.node.playCount++,t?t.player===this.node.player&&this.node.winCount++:this.node.winCount+=.5,this.node.parent;)this.node=this.node.parent},n}(c);n.MTS_AI=f;var s=function(t){function n(n,e,r){var i=t.call(this)||this;return i.counter=0,i.player=e,i.originalBoard=n,i.depth=r,i}return i(n,t),n.prototype.step=function(){this.move=this.miniMax(this.originalBoard,this.player,this.depth),console.log("evaluations #",this.counter)},n.prototype.getResult=function(){return{max:0,mean:0,confidence:0,moves:[this.move]}},n.prototype.miniMax=function(t,n,e){var r=this,i=t.getMoves();if(0==e||0==i.length)return this.counter++,{value:t.evaluate()};var o=null,a=null;return i.forEach(function(i){var c=t.clone();c.setIndex(i,n);var f=r.miniMax(c,u.Board.nextPlayer(n),e-1);(null==a||1===n&&f.value>o||2===n&&f.value<o)&&(a={move:i,value:o},o=f.value)}),a},n.prototype.alphaBeta=function(t,n,e,r,i){var o=t.getMoves();if(0==e||0==o.length)return this.counter++,{value:t.evaluate()};for(var a=null,c=null,f=0;f<o.length;f++){var s=o[f],l=t.clone();l.setIndex(s,n);var h=this.alphaBeta(l,u.Board.nextPlayer(n),e-1,r,i);if(1==n){if((null==a||h.value>a)&&(c={move:s,value:a=h.value}),i<=(r=Math.max(r,a)))break}else if((null==a||h.value<a)&&(c={move:s,value:a=h.value}),(i=Math.min(i,a))<=r)break}return c},n}(c);n.MiniMaxAI=s;var l=function(){function t(t,n,e){this.win=null,this.children=null,this.playCount=0,this.winCount=0,this.evaluation=0,this.parent=t,this.player=n,this.move=e,this.layer=t?t.layer+1:0}return t.prototype.calculateUCB=function(t){var n,e,r;0===this.playCount?(n=0,e=1e6,r=5*this.evaluation):(e=1.4*Math.sqrt(Math.log(t)/this.playCount),n=this.winCount/this.playCount,r=5*this.evaluation/this.playCount),this.ucb=n+r+e},t}()},function(t,n,e){},function(t,n,e){(function(t){
/*!
 * Bootstrap v3.3.7 (http://getbootstrap.com)
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under the MIT license
 */
if(void 0===t)throw new Error("Bootstrap's JavaScript requires jQuery");!function(n){"use strict";var e=t.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1==e[0]&&9==e[1]&&e[2]<1||e[0]>3)throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4")}(),function(t){"use strict";t.fn.emulateTransitionEnd=function(n){var e=!1,r=this;t(this).one("bsTransitionEnd",function(){e=!0});return setTimeout(function(){e||t(r).trigger(t.support.transition.end)},n),this},t(function(){t.support.transition=function(){var t=document.createElement("bootstrap"),n={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var e in n)if(void 0!==t.style[e])return{end:n[e]};return!1}(),t.support.transition&&(t.event.special.bsTransitionEnd={bindType:t.support.transition.end,delegateType:t.support.transition.end,handle:function(n){if(t(n.target).is(this))return n.handleObj.handler.apply(this,arguments)}})})}(t),function(t){"use strict";var n='[data-dismiss="alert"]',e=function(e){t(e).on("click",n,this.close)};e.VERSION="3.3.7",e.TRANSITION_DURATION=150,e.prototype.close=function(n){var r=t(this),i=r.attr("data-target");i||(i=(i=r.attr("href"))&&i.replace(/.*(?=#[^\s]*$)/,""));var o=t("#"===i?[]:i);function u(){o.detach().trigger("closed.bs.alert").remove()}n&&n.preventDefault(),o.length||(o=r.closest(".alert")),o.trigger(n=t.Event("close.bs.alert")),n.isDefaultPrevented()||(o.removeClass("in"),t.support.transition&&o.hasClass("fade")?o.one("bsTransitionEnd",u).emulateTransitionEnd(e.TRANSITION_DURATION):u())};var r=t.fn.alert;t.fn.alert=function(n){return this.each(function(){var r=t(this),i=r.data("bs.alert");i||r.data("bs.alert",i=new e(this)),"string"==typeof n&&i[n].call(r)})},t.fn.alert.Constructor=e,t.fn.alert.noConflict=function(){return t.fn.alert=r,this},t(document).on("click.bs.alert.data-api",n,e.prototype.close)}(t),function(t){"use strict";var n=function(e,r){this.$element=t(e),this.options=t.extend({},n.DEFAULTS,r),this.isLoading=!1};function e(e){return this.each(function(){var r=t(this),i=r.data("bs.button"),o="object"==typeof e&&e;i||r.data("bs.button",i=new n(this,o)),"toggle"==e?i.toggle():e&&i.setState(e)})}n.VERSION="3.3.7",n.DEFAULTS={loadingText:"loading..."},n.prototype.setState=function(n){var e="disabled",r=this.$element,i=r.is("input")?"val":"html",o=r.data();n+="Text",null==o.resetText&&r.data("resetText",r[i]()),setTimeout(t.proxy(function(){r[i](null==o[n]?this.options[n]:o[n]),"loadingText"==n?(this.isLoading=!0,r.addClass(e).attr(e,e).prop(e,!0)):this.isLoading&&(this.isLoading=!1,r.removeClass(e).removeAttr(e).prop(e,!1))},this),0)},n.prototype.toggle=function(){var t=!0,n=this.$element.closest('[data-toggle="buttons"]');if(n.length){var e=this.$element.find("input");"radio"==e.prop("type")?(e.prop("checked")&&(t=!1),n.find(".active").removeClass("active"),this.$element.addClass("active")):"checkbox"==e.prop("type")&&(e.prop("checked")!==this.$element.hasClass("active")&&(t=!1),this.$element.toggleClass("active")),e.prop("checked",this.$element.hasClass("active")),t&&e.trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active")};var r=t.fn.button;t.fn.button=e,t.fn.button.Constructor=n,t.fn.button.noConflict=function(){return t.fn.button=r,this},t(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(n){var r=t(n.target).closest(".btn");e.call(r,"toggle"),t(n.target).is('input[type="radio"], input[type="checkbox"]')||(n.preventDefault(),r.is("input,button")?r.trigger("focus"):r.find("input:visible,button:visible").first().trigger("focus"))}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(n){t(n.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(n.type))})}(t),function(t){"use strict";var n=function(n,e){this.$element=t(n),this.$indicators=this.$element.find(".carousel-indicators"),this.options=e,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",t.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",t.proxy(this.pause,this)).on("mouseleave.bs.carousel",t.proxy(this.cycle,this))};function e(e){return this.each(function(){var r=t(this),i=r.data("bs.carousel"),o=t.extend({},n.DEFAULTS,r.data(),"object"==typeof e&&e),u="string"==typeof e?e:o.slide;i||r.data("bs.carousel",i=new n(this,o)),"number"==typeof e?i.to(e):u?i[u]():o.interval&&i.pause().cycle()})}n.VERSION="3.3.7",n.TRANSITION_DURATION=600,n.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},n.prototype.keydown=function(t){if(!/input|textarea/i.test(t.target.tagName)){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()}},n.prototype.cycle=function(n){return n||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(t.proxy(this.next,this),this.options.interval)),this},n.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},n.prototype.getItemForDirection=function(t,n){var e=this.getItemIndex(n);if(("prev"==t&&0===e||"next"==t&&e==this.$items.length-1)&&!this.options.wrap)return n;var r=(e+("prev"==t?-1:1))%this.$items.length;return this.$items.eq(r)},n.prototype.to=function(t){var n=this,e=this.getItemIndex(this.$active=this.$element.find(".item.active"));if(!(t>this.$items.length-1||t<0))return this.sliding?this.$element.one("slid.bs.carousel",function(){n.to(t)}):e==t?this.pause().cycle():this.slide(t>e?"next":"prev",this.$items.eq(t))},n.prototype.pause=function(n){return n||(this.paused=!0),this.$element.find(".next, .prev").length&&t.support.transition&&(this.$element.trigger(t.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},n.prototype.next=function(){if(!this.sliding)return this.slide("next")},n.prototype.prev=function(){if(!this.sliding)return this.slide("prev")},n.prototype.slide=function(e,r){var i=this.$element.find(".item.active"),o=r||this.getItemForDirection(e,i),u=this.interval,a="next"==e?"left":"right",c=this;if(o.hasClass("active"))return this.sliding=!1;var f=o[0],s=t.Event("slide.bs.carousel",{relatedTarget:f,direction:a});if(this.$element.trigger(s),!s.isDefaultPrevented()){if(this.sliding=!0,u&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var l=t(this.$indicators.children()[this.getItemIndex(o)]);l&&l.addClass("active")}var h=t.Event("slid.bs.carousel",{relatedTarget:f,direction:a});return t.support.transition&&this.$element.hasClass("slide")?(o.addClass(e),o[0].offsetWidth,i.addClass(a),o.addClass(a),i.one("bsTransitionEnd",function(){o.removeClass([e,a].join(" ")).addClass("active"),i.removeClass(["active",a].join(" ")),c.sliding=!1,setTimeout(function(){c.$element.trigger(h)},0)}).emulateTransitionEnd(n.TRANSITION_DURATION)):(i.removeClass("active"),o.addClass("active"),this.sliding=!1,this.$element.trigger(h)),u&&this.cycle(),this}};var r=t.fn.carousel;t.fn.carousel=e,t.fn.carousel.Constructor=n,t.fn.carousel.noConflict=function(){return t.fn.carousel=r,this};var i=function(n){var r,i=t(this),o=t(i.attr("data-target")||(r=i.attr("href"))&&r.replace(/.*(?=#[^\s]+$)/,""));if(o.hasClass("carousel")){var u=t.extend({},o.data(),i.data()),a=i.attr("data-slide-to");a&&(u.interval=!1),e.call(o,u),a&&o.data("bs.carousel").to(a),n.preventDefault()}};t(document).on("click.bs.carousel.data-api","[data-slide]",i).on("click.bs.carousel.data-api","[data-slide-to]",i),t(window).on("load",function(){t('[data-ride="carousel"]').each(function(){var n=t(this);e.call(n,n.data())})})}(t),function(t){"use strict";var n=function(e,r){this.$element=t(e),this.options=t.extend({},n.DEFAULTS,r),this.$trigger=t('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};function e(n){var e,r=n.attr("data-target")||(e=n.attr("href"))&&e.replace(/.*(?=#[^\s]+$)/,"");return t(r)}function r(e){return this.each(function(){var r=t(this),i=r.data("bs.collapse"),o=t.extend({},n.DEFAULTS,r.data(),"object"==typeof e&&e);!i&&o.toggle&&/show|hide/.test(e)&&(o.toggle=!1),i||r.data("bs.collapse",i=new n(this,o)),"string"==typeof e&&i[e]()})}n.VERSION="3.3.7",n.TRANSITION_DURATION=350,n.DEFAULTS={toggle:!0},n.prototype.dimension=function(){return this.$element.hasClass("width")?"width":"height"},n.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var e,i=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(i&&i.length&&(e=i.data("bs.collapse"))&&e.transitioning)){var o=t.Event("show.bs.collapse");if(this.$element.trigger(o),!o.isDefaultPrevented()){i&&i.length&&(r.call(i,"hide"),e||i.data("bs.collapse",null));var u=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[u](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var a=function(){this.$element.removeClass("collapsing").addClass("collapse in")[u](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!t.support.transition)return a.call(this);var c=t.camelCase(["scroll",u].join("-"));this.$element.one("bsTransitionEnd",t.proxy(a,this)).emulateTransitionEnd(n.TRANSITION_DURATION)[u](this.$element[0][c])}}}},n.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var e=t.Event("hide.bs.collapse");if(this.$element.trigger(e),!e.isDefaultPrevented()){var r=this.dimension();this.$element[r](this.$element[r]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var i=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};if(!t.support.transition)return i.call(this);this.$element[r](0).one("bsTransitionEnd",t.proxy(i,this)).emulateTransitionEnd(n.TRANSITION_DURATION)}}},n.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},n.prototype.getParent=function(){return t(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(t.proxy(function(n,r){var i=t(r);this.addAriaAndCollapsedClass(e(i),i)},this)).end()},n.prototype.addAriaAndCollapsedClass=function(t,n){var e=t.hasClass("in");t.attr("aria-expanded",e),n.toggleClass("collapsed",!e).attr("aria-expanded",e)};var i=t.fn.collapse;t.fn.collapse=r,t.fn.collapse.Constructor=n,t.fn.collapse.noConflict=function(){return t.fn.collapse=i,this},t(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(n){var i=t(this);i.attr("data-target")||n.preventDefault();var o=e(i),u=o.data("bs.collapse")?"toggle":i.data();r.call(o,u)})}(t),function(t){"use strict";var n=".dropdown-backdrop",e='[data-toggle="dropdown"]',r=function(n){t(n).on("click.bs.dropdown",this.toggle)};function i(n){var e=n.attr("data-target");e||(e=(e=n.attr("href"))&&/#[A-Za-z]/.test(e)&&e.replace(/.*(?=#[^\s]*$)/,""));var r=e&&t(e);return r&&r.length?r:n.parent()}function o(r){r&&3===r.which||(t(n).remove(),t(e).each(function(){var n=t(this),e=i(n),o={relatedTarget:this};e.hasClass("open")&&(r&&"click"==r.type&&/input|textarea/i.test(r.target.tagName)&&t.contains(e[0],r.target)||(e.trigger(r=t.Event("hide.bs.dropdown",o)),r.isDefaultPrevented()||(n.attr("aria-expanded","false"),e.removeClass("open").trigger(t.Event("hidden.bs.dropdown",o)))))}))}r.VERSION="3.3.7",r.prototype.toggle=function(n){var e=t(this);if(!e.is(".disabled, :disabled")){var r=i(e),u=r.hasClass("open");if(o(),!u){"ontouchstart"in document.documentElement&&!r.closest(".navbar-nav").length&&t(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(t(this)).on("click",o);var a={relatedTarget:this};if(r.trigger(n=t.Event("show.bs.dropdown",a)),n.isDefaultPrevented())return;e.trigger("focus").attr("aria-expanded","true"),r.toggleClass("open").trigger(t.Event("shown.bs.dropdown",a))}return!1}},r.prototype.keydown=function(n){if(/(38|40|27|32)/.test(n.which)&&!/input|textarea/i.test(n.target.tagName)){var r=t(this);if(n.preventDefault(),n.stopPropagation(),!r.is(".disabled, :disabled")){var o=i(r),u=o.hasClass("open");if(!u&&27!=n.which||u&&27==n.which)return 27==n.which&&o.find(e).trigger("focus"),r.trigger("click");var a=o.find(".dropdown-menu li:not(.disabled):visible a");if(a.length){var c=a.index(n.target);38==n.which&&c>0&&c--,40==n.which&&c<a.length-1&&c++,~c||(c=0),a.eq(c).trigger("focus")}}}};var u=t.fn.dropdown;t.fn.dropdown=function(n){return this.each(function(){var e=t(this),i=e.data("bs.dropdown");i||e.data("bs.dropdown",i=new r(this)),"string"==typeof n&&i[n].call(e)})},t.fn.dropdown.Constructor=r,t.fn.dropdown.noConflict=function(){return t.fn.dropdown=u,this},t(document).on("click.bs.dropdown.data-api",o).on("click.bs.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.bs.dropdown.data-api",e,r.prototype.toggle).on("keydown.bs.dropdown.data-api",e,r.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",r.prototype.keydown)}(t),function(t){"use strict";var n=function(n,e){this.options=e,this.$body=t(document.body),this.$element=t(n),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,t.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};function e(e,r){return this.each(function(){var i=t(this),o=i.data("bs.modal"),u=t.extend({},n.DEFAULTS,i.data(),"object"==typeof e&&e);o||i.data("bs.modal",o=new n(this,u)),"string"==typeof e?o[e](r):u.show&&o.show(r)})}n.VERSION="3.3.7",n.TRANSITION_DURATION=300,n.BACKDROP_TRANSITION_DURATION=150,n.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},n.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},n.prototype.show=function(e){var r=this,i=t.Event("show.bs.modal",{relatedTarget:e});this.$element.trigger(i),this.isShown||i.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',t.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){r.$element.one("mouseup.dismiss.bs.modal",function(n){t(n.target).is(r.$element)&&(r.ignoreBackdropClick=!0)})}),this.backdrop(function(){var i=t.support.transition&&r.$element.hasClass("fade");r.$element.parent().length||r.$element.appendTo(r.$body),r.$element.show().scrollTop(0),r.adjustDialog(),i&&r.$element[0].offsetWidth,r.$element.addClass("in"),r.enforceFocus();var o=t.Event("shown.bs.modal",{relatedTarget:e});i?r.$dialog.one("bsTransitionEnd",function(){r.$element.trigger("focus").trigger(o)}).emulateTransitionEnd(n.TRANSITION_DURATION):r.$element.trigger("focus").trigger(o)}))},n.prototype.hide=function(e){e&&e.preventDefault(),e=t.Event("hide.bs.modal"),this.$element.trigger(e),this.isShown&&!e.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),t(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),t.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",t.proxy(this.hideModal,this)).emulateTransitionEnd(n.TRANSITION_DURATION):this.hideModal())},n.prototype.enforceFocus=function(){t(document).off("focusin.bs.modal").on("focusin.bs.modal",t.proxy(function(t){document===t.target||this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")},this))},n.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",t.proxy(function(t){27==t.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},n.prototype.resize=function(){this.isShown?t(window).on("resize.bs.modal",t.proxy(this.handleUpdate,this)):t(window).off("resize.bs.modal")},n.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop(function(){t.$body.removeClass("modal-open"),t.resetAdjustments(),t.resetScrollbar(),t.$element.trigger("hidden.bs.modal")})},n.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},n.prototype.backdrop=function(e){var r=this,i=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var o=t.support.transition&&i;if(this.$backdrop=t(document.createElement("div")).addClass("modal-backdrop "+i).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",t.proxy(function(t){this.ignoreBackdropClick?this.ignoreBackdropClick=!1:t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide())},this)),o&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!e)return;o?this.$backdrop.one("bsTransitionEnd",e).emulateTransitionEnd(n.BACKDROP_TRANSITION_DURATION):e()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var u=function(){r.removeBackdrop(),e&&e()};t.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",u).emulateTransitionEnd(n.BACKDROP_TRANSITION_DURATION):u()}else e&&e()},n.prototype.handleUpdate=function(){this.adjustDialog()},n.prototype.adjustDialog=function(){var t=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&t?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!t?this.scrollbarWidth:""})},n.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},n.prototype.checkScrollbar=function(){var t=window.innerWidth;if(!t){var n=document.documentElement.getBoundingClientRect();t=n.right-Math.abs(n.left)}this.bodyIsOverflowing=document.body.clientWidth<t,this.scrollbarWidth=this.measureScrollbar()},n.prototype.setScrollbar=function(){var t=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"",this.bodyIsOverflowing&&this.$body.css("padding-right",t+this.scrollbarWidth)},n.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)},n.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",this.$body.append(t);var n=t.offsetWidth-t.clientWidth;return this.$body[0].removeChild(t),n};var r=t.fn.modal;t.fn.modal=e,t.fn.modal.Constructor=n,t.fn.modal.noConflict=function(){return t.fn.modal=r,this},t(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(n){var r=t(this),i=r.attr("href"),o=t(r.attr("data-target")||i&&i.replace(/.*(?=#[^\s]+$)/,"")),u=o.data("bs.modal")?"toggle":t.extend({remote:!/#/.test(i)&&i},o.data(),r.data());r.is("a")&&n.preventDefault(),o.one("show.bs.modal",function(t){t.isDefaultPrevented()||o.one("hidden.bs.modal",function(){r.is(":visible")&&r.trigger("focus")})}),e.call(o,u,this)})}(t),function(t){"use strict";var n=function(t,n){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.inState=null,this.init("tooltip",t,n)};n.VERSION="3.3.7",n.TRANSITION_DURATION=150,n.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},n.prototype.init=function(n,e,r){if(this.enabled=!0,this.type=n,this.$element=t(e),this.options=this.getOptions(r),this.$viewport=this.options.viewport&&t(t.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport),this.inState={click:!1,hover:!1,focus:!1},this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var i=this.options.trigger.split(" "),o=i.length;o--;){var u=i[o];if("click"==u)this.$element.on("click."+this.type,this.options.selector,t.proxy(this.toggle,this));else if("manual"!=u){var a="hover"==u?"mouseenter":"focusin",c="hover"==u?"mouseleave":"focusout";this.$element.on(a+"."+this.type,this.options.selector,t.proxy(this.enter,this)),this.$element.on(c+"."+this.type,this.options.selector,t.proxy(this.leave,this))}}this.options.selector?this._options=t.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},n.prototype.getDefaults=function(){return n.DEFAULTS},n.prototype.getOptions=function(n){return(n=t.extend({},this.getDefaults(),this.$element.data(),n)).delay&&"number"==typeof n.delay&&(n.delay={show:n.delay,hide:n.delay}),n},n.prototype.getDelegateOptions=function(){var n={},e=this.getDefaults();return this._options&&t.each(this._options,function(t,r){e[t]!=r&&(n[t]=r)}),n},n.prototype.enter=function(n){var e=n instanceof this.constructor?n:t(n.currentTarget).data("bs."+this.type);if(e||(e=new this.constructor(n.currentTarget,this.getDelegateOptions()),t(n.currentTarget).data("bs."+this.type,e)),n instanceof t.Event&&(e.inState["focusin"==n.type?"focus":"hover"]=!0),e.tip().hasClass("in")||"in"==e.hoverState)e.hoverState="in";else{if(clearTimeout(e.timeout),e.hoverState="in",!e.options.delay||!e.options.delay.show)return e.show();e.timeout=setTimeout(function(){"in"==e.hoverState&&e.show()},e.options.delay.show)}},n.prototype.isInStateTrue=function(){for(var t in this.inState)if(this.inState[t])return!0;return!1},n.prototype.leave=function(n){var e=n instanceof this.constructor?n:t(n.currentTarget).data("bs."+this.type);if(e||(e=new this.constructor(n.currentTarget,this.getDelegateOptions()),t(n.currentTarget).data("bs."+this.type,e)),n instanceof t.Event&&(e.inState["focusout"==n.type?"focus":"hover"]=!1),!e.isInStateTrue()){if(clearTimeout(e.timeout),e.hoverState="out",!e.options.delay||!e.options.delay.hide)return e.hide();e.timeout=setTimeout(function(){"out"==e.hoverState&&e.hide()},e.options.delay.hide)}},n.prototype.show=function(){var e=t.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(e);var r=t.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(e.isDefaultPrevented()||!r)return;var i=this,o=this.tip(),u=this.getUID(this.type);this.setContent(),o.attr("id",u),this.$element.attr("aria-describedby",u),this.options.animation&&o.addClass("fade");var a="function"==typeof this.options.placement?this.options.placement.call(this,o[0],this.$element[0]):this.options.placement,c=/\s?auto?\s?/i,f=c.test(a);f&&(a=a.replace(c,"")||"top"),o.detach().css({top:0,left:0,display:"block"}).addClass(a).data("bs."+this.type,this),this.options.container?o.appendTo(this.options.container):o.insertAfter(this.$element),this.$element.trigger("inserted.bs."+this.type);var s=this.getPosition(),l=o[0].offsetWidth,h=o[0].offsetHeight;if(f){var d=a,p=this.getPosition(this.$viewport);a="bottom"==a&&s.bottom+h>p.bottom?"top":"top"==a&&s.top-h<p.top?"bottom":"right"==a&&s.right+l>p.width?"left":"left"==a&&s.left-l<p.left?"right":a,o.removeClass(d).addClass(a)}var v=this.getCalculatedOffset(a,s,l,h);this.applyPlacement(v,a);var g=function(){var t=i.hoverState;i.$element.trigger("shown.bs."+i.type),i.hoverState=null,"out"==t&&i.leave(i)};t.support.transition&&this.$tip.hasClass("fade")?o.one("bsTransitionEnd",g).emulateTransitionEnd(n.TRANSITION_DURATION):g()}},n.prototype.applyPlacement=function(n,e){var r=this.tip(),i=r[0].offsetWidth,o=r[0].offsetHeight,u=parseInt(r.css("margin-top"),10),a=parseInt(r.css("margin-left"),10);isNaN(u)&&(u=0),isNaN(a)&&(a=0),n.top+=u,n.left+=a,t.offset.setOffset(r[0],t.extend({using:function(t){r.css({top:Math.round(t.top),left:Math.round(t.left)})}},n),0),r.addClass("in");var c=r[0].offsetWidth,f=r[0].offsetHeight;"top"==e&&f!=o&&(n.top=n.top+o-f);var s=this.getViewportAdjustedDelta(e,n,c,f);s.left?n.left+=s.left:n.top+=s.top;var l=/top|bottom/.test(e),h=l?2*s.left-i+c:2*s.top-o+f,d=l?"offsetWidth":"offsetHeight";r.offset(n),this.replaceArrow(h,r[0][d],l)},n.prototype.replaceArrow=function(t,n,e){this.arrow().css(e?"left":"top",50*(1-t/n)+"%").css(e?"top":"left","")},n.prototype.setContent=function(){var t=this.tip(),n=this.getTitle();t.find(".tooltip-inner")[this.options.html?"html":"text"](n),t.removeClass("fade in top bottom left right")},n.prototype.hide=function(e){var r=this,i=t(this.$tip),o=t.Event("hide.bs."+this.type);function u(){"in"!=r.hoverState&&i.detach(),r.$element&&r.$element.removeAttr("aria-describedby").trigger("hidden.bs."+r.type),e&&e()}if(this.$element.trigger(o),!o.isDefaultPrevented())return i.removeClass("in"),t.support.transition&&i.hasClass("fade")?i.one("bsTransitionEnd",u).emulateTransitionEnd(n.TRANSITION_DURATION):u(),this.hoverState=null,this},n.prototype.fixTitle=function(){var t=this.$element;(t.attr("title")||"string"!=typeof t.attr("data-original-title"))&&t.attr("data-original-title",t.attr("title")||"").attr("title","")},n.prototype.hasContent=function(){return this.getTitle()},n.prototype.getPosition=function(n){var e=(n=n||this.$element)[0],r="BODY"==e.tagName,i=e.getBoundingClientRect();null==i.width&&(i=t.extend({},i,{width:i.right-i.left,height:i.bottom-i.top}));var o=window.SVGElement&&e instanceof window.SVGElement,u=r?{top:0,left:0}:o?null:n.offset(),a={scroll:r?document.documentElement.scrollTop||document.body.scrollTop:n.scrollTop()},c=r?{width:t(window).width(),height:t(window).height()}:null;return t.extend({},i,a,c,u)},n.prototype.getCalculatedOffset=function(t,n,e,r){return"bottom"==t?{top:n.top+n.height,left:n.left+n.width/2-e/2}:"top"==t?{top:n.top-r,left:n.left+n.width/2-e/2}:"left"==t?{top:n.top+n.height/2-r/2,left:n.left-e}:{top:n.top+n.height/2-r/2,left:n.left+n.width}},n.prototype.getViewportAdjustedDelta=function(t,n,e,r){var i={top:0,left:0};if(!this.$viewport)return i;var o=this.options.viewport&&this.options.viewport.padding||0,u=this.getPosition(this.$viewport);if(/right|left/.test(t)){var a=n.top-o-u.scroll,c=n.top+o-u.scroll+r;a<u.top?i.top=u.top-a:c>u.top+u.height&&(i.top=u.top+u.height-c)}else{var f=n.left-o,s=n.left+o+e;f<u.left?i.left=u.left-f:s>u.right&&(i.left=u.left+u.width-s)}return i},n.prototype.getTitle=function(){var t=this.$element,n=this.options;return t.attr("data-original-title")||("function"==typeof n.title?n.title.call(t[0]):n.title)},n.prototype.getUID=function(t){do{t+=~~(1e6*Math.random())}while(document.getElementById(t));return t},n.prototype.tip=function(){if(!this.$tip&&(this.$tip=t(this.options.template),1!=this.$tip.length))throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!");return this.$tip},n.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},n.prototype.enable=function(){this.enabled=!0},n.prototype.disable=function(){this.enabled=!1},n.prototype.toggleEnabled=function(){this.enabled=!this.enabled},n.prototype.toggle=function(n){var e=this;n&&((e=t(n.currentTarget).data("bs."+this.type))||(e=new this.constructor(n.currentTarget,this.getDelegateOptions()),t(n.currentTarget).data("bs."+this.type,e))),n?(e.inState.click=!e.inState.click,e.isInStateTrue()?e.enter(e):e.leave(e)):e.tip().hasClass("in")?e.leave(e):e.enter(e)},n.prototype.destroy=function(){var t=this;clearTimeout(this.timeout),this.hide(function(){t.$element.off("."+t.type).removeData("bs."+t.type),t.$tip&&t.$tip.detach(),t.$tip=null,t.$arrow=null,t.$viewport=null,t.$element=null})};var e=t.fn.tooltip;t.fn.tooltip=function(e){return this.each(function(){var r=t(this),i=r.data("bs.tooltip"),o="object"==typeof e&&e;!i&&/destroy|hide/.test(e)||(i||r.data("bs.tooltip",i=new n(this,o)),"string"==typeof e&&i[e]())})},t.fn.tooltip.Constructor=n,t.fn.tooltip.noConflict=function(){return t.fn.tooltip=e,this}}(t),function(t){"use strict";var n=function(t,n){this.init("popover",t,n)};if(!t.fn.tooltip)throw new Error("Popover requires tooltip.js");n.VERSION="3.3.7",n.DEFAULTS=t.extend({},t.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),n.prototype=t.extend({},t.fn.tooltip.Constructor.prototype),n.prototype.constructor=n,n.prototype.getDefaults=function(){return n.DEFAULTS},n.prototype.setContent=function(){var t=this.tip(),n=this.getTitle(),e=this.getContent();t.find(".popover-title")[this.options.html?"html":"text"](n),t.find(".popover-content").children().detach().end()[this.options.html?"string"==typeof e?"html":"append":"text"](e),t.removeClass("fade top bottom left right in"),t.find(".popover-title").html()||t.find(".popover-title").hide()},n.prototype.hasContent=function(){return this.getTitle()||this.getContent()},n.prototype.getContent=function(){var t=this.$element,n=this.options;return t.attr("data-content")||("function"==typeof n.content?n.content.call(t[0]):n.content)},n.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var e=t.fn.popover;t.fn.popover=function(e){return this.each(function(){var r=t(this),i=r.data("bs.popover"),o="object"==typeof e&&e;!i&&/destroy|hide/.test(e)||(i||r.data("bs.popover",i=new n(this,o)),"string"==typeof e&&i[e]())})},t.fn.popover.Constructor=n,t.fn.popover.noConflict=function(){return t.fn.popover=e,this}}(t),function(t){"use strict";function n(e,r){this.$body=t(document.body),this.$scrollElement=t(e).is(document.body)?t(window):t(e),this.options=t.extend({},n.DEFAULTS,r),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",t.proxy(this.process,this)),this.refresh(),this.process()}function e(e){return this.each(function(){var r=t(this),i=r.data("bs.scrollspy"),o="object"==typeof e&&e;i||r.data("bs.scrollspy",i=new n(this,o)),"string"==typeof e&&i[e]()})}n.VERSION="3.3.7",n.DEFAULTS={offset:10},n.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},n.prototype.refresh=function(){var n=this,e="offset",r=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),t.isWindow(this.$scrollElement[0])||(e="position",r=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map(function(){var n=t(this),i=n.data("target")||n.attr("href"),o=/^#./.test(i)&&t(i);return o&&o.length&&o.is(":visible")&&[[o[e]().top+r,i]]||null}).sort(function(t,n){return t[0]-n[0]}).each(function(){n.offsets.push(this[0]),n.targets.push(this[1])})},n.prototype.process=function(){var t,n=this.$scrollElement.scrollTop()+this.options.offset,e=this.getScrollHeight(),r=this.options.offset+e-this.$scrollElement.height(),i=this.offsets,o=this.targets,u=this.activeTarget;if(this.scrollHeight!=e&&this.refresh(),n>=r)return u!=(t=o[o.length-1])&&this.activate(t);if(u&&n<i[0])return this.activeTarget=null,this.clear();for(t=i.length;t--;)u!=o[t]&&n>=i[t]&&(void 0===i[t+1]||n<i[t+1])&&this.activate(o[t])},n.prototype.activate=function(n){this.activeTarget=n,this.clear();var e=this.selector+'[data-target="'+n+'"],'+this.selector+'[href="'+n+'"]',r=t(e).parents("li").addClass("active");r.parent(".dropdown-menu").length&&(r=r.closest("li.dropdown").addClass("active")),r.trigger("activate.bs.scrollspy")},n.prototype.clear=function(){t(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var r=t.fn.scrollspy;t.fn.scrollspy=e,t.fn.scrollspy.Constructor=n,t.fn.scrollspy.noConflict=function(){return t.fn.scrollspy=r,this},t(window).on("load.bs.scrollspy.data-api",function(){t('[data-spy="scroll"]').each(function(){var n=t(this);e.call(n,n.data())})})}(t),function(t){"use strict";var n=function(n){this.element=t(n)};function e(e){return this.each(function(){var r=t(this),i=r.data("bs.tab");i||r.data("bs.tab",i=new n(this)),"string"==typeof e&&i[e]()})}n.VERSION="3.3.7",n.TRANSITION_DURATION=150,n.prototype.show=function(){var n=this.element,e=n.closest("ul:not(.dropdown-menu)"),r=n.data("target");if(r||(r=(r=n.attr("href"))&&r.replace(/.*(?=#[^\s]*$)/,"")),!n.parent("li").hasClass("active")){var i=e.find(".active:last a"),o=t.Event("hide.bs.tab",{relatedTarget:n[0]}),u=t.Event("show.bs.tab",{relatedTarget:i[0]});if(i.trigger(o),n.trigger(u),!u.isDefaultPrevented()&&!o.isDefaultPrevented()){var a=t(r);this.activate(n.closest("li"),e),this.activate(a,a.parent(),function(){i.trigger({type:"hidden.bs.tab",relatedTarget:n[0]}),n.trigger({type:"shown.bs.tab",relatedTarget:i[0]})})}}},n.prototype.activate=function(e,r,i){var o=r.find("> .active"),u=i&&t.support.transition&&(o.length&&o.hasClass("fade")||!!r.find("> .fade").length);function a(){o.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),e.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),u?(e[0].offsetWidth,e.addClass("in")):e.removeClass("fade"),e.parent(".dropdown-menu").length&&e.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),i&&i()}o.length&&u?o.one("bsTransitionEnd",a).emulateTransitionEnd(n.TRANSITION_DURATION):a(),o.removeClass("in")};var r=t.fn.tab;t.fn.tab=e,t.fn.tab.Constructor=n,t.fn.tab.noConflict=function(){return t.fn.tab=r,this};var i=function(n){n.preventDefault(),e.call(t(this),"show")};t(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',i).on("click.bs.tab.data-api",'[data-toggle="pill"]',i)}(t),function(t){"use strict";var n=function(e,r){this.options=t.extend({},n.DEFAULTS,r),this.$target=t(this.options.target).on("scroll.bs.affix.data-api",t.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",t.proxy(this.checkPositionWithEventLoop,this)),this.$element=t(e),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};function e(e){return this.each(function(){var r=t(this),i=r.data("bs.affix"),o="object"==typeof e&&e;i||r.data("bs.affix",i=new n(this,o)),"string"==typeof e&&i[e]()})}n.VERSION="3.3.7",n.RESET="affix affix-top affix-bottom",n.DEFAULTS={offset:0,target:window},n.prototype.getState=function(t,n,e,r){var i=this.$target.scrollTop(),o=this.$element.offset(),u=this.$target.height();if(null!=e&&"top"==this.affixed)return i<e&&"top";if("bottom"==this.affixed)return null!=e?!(i+this.unpin<=o.top)&&"bottom":!(i+u<=t-r)&&"bottom";var a=null==this.affixed,c=a?i:o.top;return null!=e&&i<=e?"top":null!=r&&c+(a?u:n)>=t-r&&"bottom"},n.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(n.RESET).addClass("affix");var t=this.$target.scrollTop(),e=this.$element.offset();return this.pinnedOffset=e.top-t},n.prototype.checkPositionWithEventLoop=function(){setTimeout(t.proxy(this.checkPosition,this),1)},n.prototype.checkPosition=function(){if(this.$element.is(":visible")){var e=this.$element.height(),r=this.options.offset,i=r.top,o=r.bottom,u=Math.max(t(document).height(),t(document.body).height());"object"!=typeof r&&(o=i=r),"function"==typeof i&&(i=r.top(this.$element)),"function"==typeof o&&(o=r.bottom(this.$element));var a=this.getState(u,e,i,o);if(this.affixed!=a){null!=this.unpin&&this.$element.css("top","");var c="affix"+(a?"-"+a:""),f=t.Event(c+".bs.affix");if(this.$element.trigger(f),f.isDefaultPrevented())return;this.affixed=a,this.unpin="bottom"==a?this.getPinnedOffset():null,this.$element.removeClass(n.RESET).addClass(c).trigger(c.replace("affix","affixed")+".bs.affix")}"bottom"==a&&this.$element.offset({top:u-e-o})}};var r=t.fn.affix;t.fn.affix=e,t.fn.affix.Constructor=n,t.fn.affix.noConflict=function(){return t.fn.affix=r,this},t(window).on("load",function(){t('[data-spy="affix"]').each(function(){var n=t(this),r=n.data();r.offset=r.offset||{},null!=r.offsetBottom&&(r.offset.bottom=r.offsetBottom),null!=r.offsetTop&&(r.offset.top=r.offsetTop),e.call(n,r)})})}(t)}).call(this,e(3))},function(t,n,e){},function(t,n,e){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,